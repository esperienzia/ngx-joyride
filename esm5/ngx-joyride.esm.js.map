{"version":3,"file":"ngx-joyride.esm.js","sources":["../../src/models/joyride-step.class.ts","../../src/services/joyride-options.service.ts","../../src/services/joyride-steps-container.service.ts","../../src/models/joyride-error.class.ts","../../src/services/dom.service.ts","../../src/services/templates.service.ts","../../src/directives/joyride.directive.ts","../../src/services/document.service.ts","../../src/services/joyride-backdrop.service.ts","../../src/services/event-listener.service.ts","../../src/services/logger.service.ts","../../src/components/step/joyride-step.component.ts","../../src/services/step-drawer.service.ts","../../src/services/joyride-step.service.ts","../../../../node_modules/tslib/tslib.es6.js","../../../../node_modules/rxjs/_esm5/internal/util/errorObject.js","../../../../node_modules/rxjs/_esm5/internal/util/tryCatch.js","../../../../node_modules/rxjs/_esm5/internal/util/isFunction.js","../../../../node_modules/rxjs/_esm5/internal/config.js","../../../../node_modules/rxjs/_esm5/internal/util/hostReportError.js","../../../../node_modules/rxjs/_esm5/internal/Observer.js","../../../../node_modules/rxjs/_esm5/internal/util/isArray.js","../../../../node_modules/rxjs/_esm5/internal/util/isObject.js","../../../../node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js","../../../../node_modules/rxjs/_esm5/internal/Subscription.js","../../../../node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js","../../../../node_modules/rxjs/_esm5/internal/Subscriber.js","../../../../node_modules/rxjs/_esm5/internal/OuterSubscriber.js","../../../../node_modules/rxjs/_esm5/internal/InnerSubscriber.js","../../../../node_modules/rxjs/_esm5/internal/util/toSubscriber.js","../../../../node_modules/rxjs/_esm5/internal/symbol/observable.js","../../../../node_modules/rxjs/_esm5/internal/util/noop.js","../../../../node_modules/rxjs/_esm5/internal/util/pipe.js","../../../../node_modules/rxjs/_esm5/internal/Observable.js","../../../../node_modules/rxjs/_esm5/internal/util/subscribeToArray.js","../../../../node_modules/rxjs/_esm5/internal/util/subscribeToPromise.js","../../../../node_modules/rxjs/_esm5/internal/symbol/iterator.js","../../../../node_modules/rxjs/_esm5/internal/util/subscribeToIterable.js","../../../../node_modules/rxjs/_esm5/internal/util/subscribeToObservable.js","../../../../node_modules/rxjs/_esm5/internal/util/isArrayLike.js","../../../../node_modules/rxjs/_esm5/internal/util/isPromise.js","../../../../node_modules/rxjs/_esm5/internal/util/subscribeTo.js","../../../../node_modules/rxjs/_esm5/internal/util/subscribeToResult.js","../../../../node_modules/rxjs/_esm5/internal/operators/audit.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/Action.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js","../../../../node_modules/rxjs/_esm5/internal/Scheduler.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/async.js","../../../../node_modules/rxjs/_esm5/internal/util/isNumeric.js","../../../../node_modules/rxjs/_esm5/internal/util/isScheduler.js","../../../../node_modules/rxjs/_esm5/internal/operators/buffer.js","../../../../node_modules/rxjs/_esm5/internal/operators/bufferCount.js","../../../../node_modules/rxjs/_esm5/internal/operators/bufferTime.js","../../../../node_modules/rxjs/_esm5/internal/operators/bufferToggle.js","../../../../node_modules/rxjs/_esm5/internal/operators/bufferWhen.js","../../../../node_modules/rxjs/_esm5/internal/operators/catchError.js","../../../../node_modules/rxjs/_esm5/internal/observable/fromArray.js","../../../../node_modules/rxjs/_esm5/internal/observable/combineLatest.js","../../../../node_modules/rxjs/_esm5/internal/observable/empty.js","../../../../node_modules/rxjs/_esm5/internal/observable/scalar.js","../../../../node_modules/rxjs/_esm5/internal/observable/of.js","../../../../node_modules/rxjs/_esm5/internal/operators/map.js","../../../../node_modules/rxjs/_esm5/internal/operators/mergeMap.js","../../../../node_modules/rxjs/_esm5/internal/operators/count.js","../../../../node_modules/rxjs/_esm5/internal/operators/debounce.js","../../../../node_modules/rxjs/_esm5/internal/operators/debounceTime.js","../../../../node_modules/rxjs/_esm5/internal/operators/defaultIfEmpty.js","../../../../node_modules/rxjs/_esm5/internal/observable/throwError.js","../../../../node_modules/rxjs/_esm5/internal/Notification.js","../../../../node_modules/rxjs/_esm5/internal/operators/delay.js","../../../../node_modules/rxjs/_esm5/internal/operators/delayWhen.js","../../../../node_modules/rxjs/_esm5/internal/operators/dematerialize.js","../../../../node_modules/rxjs/_esm5/internal/operators/distinct.js","../../../../node_modules/rxjs/_esm5/internal/operators/distinctUntilChanged.js","../../../../node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js","../../../../node_modules/rxjs/_esm5/internal/operators/filter.js","../../../../node_modules/rxjs/_esm5/internal/operators/tap.js","../../../../node_modules/rxjs/_esm5/internal/util/EmptyError.js","../../../../node_modules/rxjs/_esm5/internal/operators/take.js","../../../../node_modules/rxjs/_esm5/internal/operators/every.js","../../../../node_modules/rxjs/_esm5/internal/operators/exhaust.js","../../../../node_modules/rxjs/_esm5/internal/operators/exhaustMap.js","../../../../node_modules/rxjs/_esm5/internal/operators/expand.js","../../../../node_modules/rxjs/_esm5/internal/operators/finalize.js","../../../../node_modules/rxjs/_esm5/internal/operators/find.js","../../../../node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js","../../../../node_modules/rxjs/_esm5/internal/SubjectSubscription.js","../../../../node_modules/rxjs/_esm5/internal/Subject.js","../../../../node_modules/rxjs/_esm5/internal/operators/groupBy.js","../../../../node_modules/rxjs/_esm5/internal/operators/ignoreElements.js","../../../../node_modules/rxjs/_esm5/internal/operators/isEmpty.js","../../../../node_modules/rxjs/_esm5/internal/operators/takeLast.js","../../../../node_modules/rxjs/_esm5/internal/operators/mapTo.js","../../../../node_modules/rxjs/_esm5/internal/operators/materialize.js","../../../../node_modules/rxjs/_esm5/internal/operators/scan.js","../../../../node_modules/rxjs/_esm5/internal/operators/mergeScan.js","../../../../node_modules/rxjs/_esm5/internal/operators/refCount.js","../../../../node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js","../../../../node_modules/rxjs/_esm5/internal/operators/observeOn.js","../../../../node_modules/rxjs/_esm5/internal/operators/onErrorResumeNext.js","../../../../node_modules/rxjs/_esm5/internal/operators/pairwise.js","../../../../node_modules/rxjs/_esm5/internal/BehaviorSubject.js","../../../../node_modules/rxjs/_esm5/internal/AsyncSubject.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/QueueAction.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/QueueScheduler.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/queue.js","../../../../node_modules/rxjs/_esm5/internal/ReplaySubject.js","../../../../node_modules/rxjs/_esm5/internal/observable/race.js","../../../../node_modules/rxjs/_esm5/internal/operators/repeat.js","../../../../node_modules/rxjs/_esm5/internal/operators/repeatWhen.js","../../../../node_modules/rxjs/_esm5/internal/operators/retry.js","../../../../node_modules/rxjs/_esm5/internal/operators/retryWhen.js","../../../../node_modules/rxjs/_esm5/internal/operators/sample.js","../../../../node_modules/rxjs/_esm5/internal/operators/sampleTime.js","../../../../node_modules/rxjs/_esm5/internal/operators/sequenceEqual.js","../../../../node_modules/rxjs/_esm5/internal/operators/single.js","../../../../node_modules/rxjs/_esm5/internal/operators/skip.js","../../../../node_modules/rxjs/_esm5/internal/operators/skipLast.js","../../../../node_modules/rxjs/_esm5/internal/operators/skipUntil.js","../../../../node_modules/rxjs/_esm5/internal/operators/skipWhile.js","../../../../node_modules/rxjs/_esm5/internal/util/Immediate.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/AsapAction.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/AsapScheduler.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/asap.js","../../../../node_modules/rxjs/_esm5/internal/observable/SubscribeOnObservable.js","../../../../node_modules/rxjs/_esm5/internal/operators/switchMap.js","../../../../node_modules/rxjs/_esm5/internal/operators/takeUntil.js","../../../../node_modules/rxjs/_esm5/internal/operators/takeWhile.js","../../../../node_modules/rxjs/_esm5/internal/operators/throttle.js","../../../../node_modules/rxjs/_esm5/internal/operators/throttleTime.js","../../../../node_modules/rxjs/_esm5/internal/util/TimeoutError.js","../../../../node_modules/rxjs/_esm5/internal/operators/timeoutWith.js","../../../../node_modules/rxjs/_esm5/internal/operators/window.js","../../../../node_modules/rxjs/_esm5/internal/operators/windowCount.js","../../../../node_modules/rxjs/_esm5/internal/operators/windowTime.js","../../../../node_modules/rxjs/_esm5/internal/operators/windowToggle.js","../../../../node_modules/rxjs/_esm5/internal/operators/windowWhen.js","../../../../node_modules/rxjs/_esm5/internal/operators/withLatestFrom.js","../../../../node_modules/rxjs/_esm5/internal/observable/zip.js","../../src/models/joyride-step-info.class.ts","../../src/services/joyride.service.ts","../../src/components/button/button.component.ts","../../src/components/close-button/close-button.component.ts","../../src/components/arrow/arrow.component.ts","../../src/joyride.module.ts"],"sourcesContent":["import { ViewContainerRef, TemplateRef, EventEmitter } from \"@angular/core\";\nimport { JoyrideStepComponent } from \"../components/step/joyride-step.component\";\nimport { Observable } from \"rxjs\";\n\nexport class JoyrideStep {\n    name: string;\n    route: string;\n    position: string;\n    title: Observable<string>;\n    text: Observable<string>;\n    stepContent: TemplateRef<any>;\n    stepContentParams: Object;\n    nextClicked: EventEmitter<any>;\n    prevCliked: EventEmitter<any>;\n    tourDone: EventEmitter<any>;\n    transformCssStyle: string;\n    isElementOrAncestorFixed: boolean;\n    targetViewContainer: ViewContainerRef;\n    stepInstance: JoyrideStepComponent;\n}","import { Injectable } from \"@angular/core\";\nimport { JoyrideOptions } from \"../models/joyride-options.class\";\n\nexport const DEFAULT_THEME_COLOR = \"#3b5560\";\nexport const STEP_DEFAULT_POSITION = \"bottom\";\n\n@Injectable()\nexport class JoyrideOptionsService {\n\n    private themeColor: string = DEFAULT_THEME_COLOR;\n    private stepDefaultPosition: string = STEP_DEFAULT_POSITION;\n    private logsEnabled: boolean = true;\n    private showCounter: boolean = true;\n    private showPrevButton: boolean = true;\n    public stepsOrder: string[] = [];\n    setOptions(options: JoyrideOptions) {\n        this.stepsOrder = options.steps;\n        this.stepDefaultPosition = options.stepDefaultPosition ? options.stepDefaultPosition : this.stepDefaultPosition;\n        this.logsEnabled = typeof options.logsEnabled !== 'undefined' ? options.logsEnabled : this.logsEnabled;\n        this.showCounter = typeof options.showCounter !== 'undefined' ? options.showCounter : this.showCounter;\n        this.showPrevButton = typeof options.showPrevButton !== 'undefined' ? options.showPrevButton : this.showPrevButton;\n        this.themeColor = options.themeColor ? options.themeColor : this.themeColor;\n    }\n\n    getBackdropColor() {\n        return this.hexToRgb(this.themeColor);\n    }\n\n    getThemeColor() {\n        return this.themeColor;\n    }\n\n    getStepDefaultPosition() {\n        return this.stepDefaultPosition;\n    }\n\n    getStepsOrder() {\n        return this.stepsOrder;\n    }\n\n    areLogsEnabled() {\n        return this.logsEnabled;\n    }\n\n    isCounterVisible() {\n        return this.showCounter;\n    }\n\n    isPrevButtonVisible() {\n        return this.showPrevButton;\n    }\n\n    private hexToRgb(hex: any): string {\n        var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n        hex = hex.replace(shorthandRegex, (m: any, r: any, g: any, b: any) => {\n            return r + r + g + g + b + b;\n        });\n\n        var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        return result ?\n            `${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}` : null;\n    }\n}","import { Injectable } from \"@angular/core\";\nimport { JoyrideStep } from \"../models/joyride-step.class\";\nimport { Subject } from \"rxjs\";\nimport { JoyrideOptionsService } from \"./joyride-options.service\";\n\nconst ROUTE_SEPARATOR = '@';\n\n@Injectable()\nexport class JoyrideStepsContainerService {\n    private steps: JoyrideStep[];\n    private stepsOriginal: JoyrideStep[];\n    stepHasBeenModified: Subject<JoyrideStep> = new Subject<JoyrideStep>();\n\n    constructor(\n        private readonly stepOptions: JoyrideOptionsService\n    ) {\n        this.stepsOriginal = [];\n        this.steps = [];\n    }\n\n    get(index: number): JoyrideStep {\n        return this.steps[index];\n    }\n\n    getStepRoute(index: number) {\n        let stepsOrder = this.stepOptions.getStepsOrder();\n        let stepID = stepsOrder[index];\n        let stepRoute = stepID && stepID.includes(ROUTE_SEPARATOR) ? stepID.split(ROUTE_SEPARATOR)[1] : \"\";\n        return stepRoute;\n    }\n\n    getStepPosition(step: JoyrideStep): number {\n        return this.getStepIndex(step) + 1;\n    }\n\n    addStep(stepToAdd: JoyrideStep) {\n        let stepExist = this.stepsOriginal.filter(step => step.name === stepToAdd.name).length > 0;\n        if (!stepExist) this.stepsOriginal.push(stepToAdd);\n        else {\n            let stepIndexToReplace = this.stepsOriginal.findIndex(step => step.name === stepToAdd.name);\n            this.stepsOriginal[stepIndexToReplace] = stepToAdd;\n        }\n    }\n\n    getNumberOfSteps() {\n        let stepsOrder = this.stepOptions.getStepsOrder();\n        return stepsOrder.length;\n    }\n\n    setPosition(step: JoyrideStep, position: string) {\n        let index = this.getStepIndex(step);\n        this.steps[index].position = position;\n        this.stepHasBeenModified.next(this.steps[index]);\n    }\n\n    initSteps() {\n        this.steps = [];\n        this.stepsOriginal.forEach((step) => this.steps.push({ ...step }));\n        this.sortSteps();\n    }\n\n    private sortSteps() {\n        let orderedSteps: JoyrideStep[] = [];\n        let stepsOrder = this.stepOptions.getStepsOrder();\n\n        stepsOrder.forEach((stepID) => {\n            let step = this.steps.find((step) => step.name === this.getStepName(stepID));\n            if (step) orderedSteps.push(step);\n        });\n\n        this.steps = [...orderedSteps];\n    }\n\n    private getStepIndex(step: JoyrideStep) {\n        return this.steps.findIndex((s) => step.name + step.route === s.name + s.route);\n    }\n\n    private getStepName(stepID: string): string {\n        let stepName = stepID && stepID.includes(ROUTE_SEPARATOR) ? stepID.split(ROUTE_SEPARATOR)[0] : stepID;\n        return stepName;\n    }\n}","export class JoyrideError extends Error {\n}","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class DomRefService {\n\n    private fakeDocument: Document = <Document>{ body: {}, documentElement: {} };\n    private fakeWindow: Window = <Window>{ document: this.fakeDocument};\n    constructor(\n        @Inject(PLATFORM_ID) private platformId: Object\n    ) { }\n    getNativeWindow(): Window {\n        if (isPlatformBrowser(this.platformId)) return window;\n        else return this.fakeWindow;\n    }\n\n    getNativeDocument() {\n        if (isPlatformBrowser(this.platformId)) return document;\n        else return this.fakeDocument;\n    }\n}","import { Injectable, TemplateRef } from \"@angular/core\";\n\n@Injectable()\nexport class TemplatesService {\n    private _prevButton: TemplateRef<any>;\n    private _nextButton: TemplateRef<any>;\n    private _doneButton: TemplateRef<any>;\n    private _counter: TemplateRef<any>;\n    \n    setPrevButton(template: TemplateRef<any>) {\n        this._prevButton = template;\n    }\n\n    getPrevButton() {\n        return this._prevButton;\n    }\n\n    setNextButton(template: TemplateRef<any>) {\n        this._nextButton = template;\n    }\n\n    getNextButton() {\n        return this._nextButton;\n    }\n\n    setDoneButton(template: TemplateRef<any>) {\n        this._doneButton = template;\n    }\n\n    getDoneButton() {\n        return this._doneButton;\n    }\n    setCounter(template: TemplateRef<any>) {\n        this._counter = template;\n    }\n\n    getCounter() {\n        return this._counter;\n    }\n}\n","import {\n    Directive,\n    ElementRef,\n    AfterViewInit,\n    Input,\n    ViewContainerRef,\n    TemplateRef,\n    Output,\n    EventEmitter,\n    Inject,\n    PLATFORM_ID\n} from '@angular/core';\nimport { JoyrideStep } from '../models/joyride-step.class';\nimport { JoyrideStepsContainerService } from '../services/joyride-steps-container.service';\nimport { JoyrideError } from '../models/joyride-error.class';\nimport { Router } from '@angular/router';\nimport { DomRefService } from '../services/dom.service';\nimport { isPlatformBrowser } from '@angular/common';\nimport { TemplatesService } from '../services/templates.service';\nimport { Observable, of } from 'rxjs';\n\nexport const NO_POSITION = 'NO_POSITION';\n\n@Directive({\n    selector: 'joyrideStep, [joyrideStep]'\n})\nexport class JoyrideDirective implements AfterViewInit {\n    @Input('joyrideStep')\n    name: string;\n\n    @Input()\n    nextStep?: string;\n\n    @Input()\n    title?: string | Observable<string>;\n\n    @Input()\n    text?: string | Observable<string>;\n\n    @Input()\n    stepPosition?: string = NO_POSITION;\n\n    @Input()\n    stepContent?: TemplateRef<any>;\n\n    @Input()\n    stepContentParams?: Object;\n\n    @Input()\n    prevTemplate?: TemplateRef<any>;\n\n    @Input()\n    nextTemplate?: TemplateRef<any>;\n\n    @Input()\n    doneTemplate?: TemplateRef<any>;\n\n    @Input()\n    counterTemplate?: TemplateRef<any>;\n\n    @Output()\n    prev?: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    next?: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    done?: EventEmitter<any> = new EventEmitter<any>();\n\n    private windowRef: Window;\n\n    constructor(\n        private readonly joyrideStepsContainer: JoyrideStepsContainerService,\n        private viewContainerRef: ViewContainerRef,\n        private readonly domService: DomRefService,\n        private readonly router: Router,\n        private readonly templateService: TemplatesService,\n        @Inject(PLATFORM_ID) private platformId: Object\n    ) {\n        this.windowRef = this.domService.getNativeWindow();\n    }\n\n    ngAfterViewInit() {\n        if (!isPlatformBrowser(this.platformId)) return;\n        if (this.prevTemplate) this.templateService.setPrevButton(this.prevTemplate);\n        if (this.nextTemplate) this.templateService.setNextButton(this.nextTemplate);\n        if (this.doneTemplate) this.templateService.setDoneButton(this.doneTemplate);\n        if (this.counterTemplate) this.templateService.setCounter(this.counterTemplate);\n        let step = new JoyrideStep();\n        step.position = this.stepPosition;\n        step.targetViewContainer = this.viewContainerRef;\n        this.setAsyncText(step);\n        step.stepContent = this.stepContent;\n        step.stepContentParams = this.stepContentParams;\n        step.nextClicked = this.next;\n        step.prevCliked = this.prev;\n        step.tourDone = this.done;\n        if (!this.name) throw new JoyrideError(\"All the steps should have the 'joyrideStep' property set with a custom name.\");\n        step.name = this.name;\n        step.route = this.router.url.substr(0, 1) === '/' ? this.router.url.substr(1) : this.router.url;\n        step.transformCssStyle = this.windowRef.getComputedStyle(this.viewContainerRef.element.nativeElement).transform;\n        step.isElementOrAncestorFixed =\n            this.isElementFixed(this.viewContainerRef.element) ||\n            this.isAncestorsFixed(this.viewContainerRef.element.nativeElement.parentElement);\n\n        this.joyrideStepsContainer.addStep(step);\n    }\n\n    private isElementFixed(element: ElementRef) {\n        return this.windowRef.getComputedStyle(element.nativeElement).position === 'fixed';\n    }\n\n    private setAsyncText(step: JoyrideStep) {\n        if (this.title instanceof Observable) {\n            step.title = this.title;\n        } else {\n            step.title = of(this.title);\n        }\n        if (this.text instanceof Observable) {\n            step.text = this.text;\n        } else {\n            step.text = of(this.text);\n        }\n    }\n\n    private isAncestorsFixed(nativeElement: any): boolean {\n        if (!nativeElement || !nativeElement.parentElement) return false;\n        let isElementFixed = this.windowRef.getComputedStyle(nativeElement.parentElement).position === 'fixed';\n        if (nativeElement.nodeName === 'BODY') {\n            return isElementFixed;\n        }\n        if (isElementFixed) return true;\n        else return this.isAncestorsFixed(nativeElement.parentElement);\n    }\n}\n","import { Injectable, ElementRef } from '@angular/core';\nimport { DomRefService } from './dom.service';\n\n@Injectable()\nexport class DocumentService {\n    private documentHeight: number;\n\n    constructor(private readonly DOMService: DomRefService) {\n        this.setDocumentHeight();\n    }\n\n    getElementFixedTop(elementRef: ElementRef) {\n        return elementRef.nativeElement.getBoundingClientRect().top;\n    }\n\n    getElementFixedLeft(elementRef: ElementRef) {\n        return elementRef.nativeElement.getBoundingClientRect().left;\n    }\n\n    getElementAbsoluteTop(elementRef: ElementRef) {\n        var scrollOffsets = this.getScrollOffsets();\n        return elementRef.nativeElement.getBoundingClientRect().top + scrollOffsets.y;\n    }\n\n    getElementAbsoluteLeft(elementRef: ElementRef) {\n        var scrollOffsets = this.getScrollOffsets();\n        return elementRef.nativeElement.getBoundingClientRect().left + scrollOffsets.x;\n    }\n\n    setDocumentHeight() {\n        this.documentHeight = this.calculateDocumentHeight();\n    }\n\n    getDocumentHeight() {\n        return this.documentHeight;\n    }\n\n    getFirstScrollableParent(node: any) {\n        const regex = /(auto|scroll|overlay)/;\n\n        const style = (node: any, prop: any) =>\n            this.DOMService.getNativeWindow()\n                .getComputedStyle(node, null)\n                .getPropertyValue(prop);\n\n        const scroll = (node: any) => regex.test(style(node, 'overflow') + style(node, 'overflow-y') + style(node, 'overflow-x'));\n\n        const scrollparent = (node: any): any => {\n            return !node || node === this.DOMService.getNativeDocument().body\n                ? this.DOMService.getNativeDocument().body\n                : scroll(node)\n                ? node\n                : scrollparent(node.parentNode);\n        };\n\n        return scrollparent(node);\n    }\n\n    getElementsFromPoint(x: number, y: number) {\n        this.DOMService.getNativeDocument().elementsFromPoint(x, y);\n    }\n\n    isElementBeyondOthers(elementRef: ElementRef, isElementFixed: boolean, keywordToDiscard: string) {\n        const x1 = isElementFixed ? this.getElementFixedLeft(elementRef) : this.getElementAbsoluteLeft(elementRef);\n        const y1 = isElementFixed ? this.getElementFixedTop(elementRef) : this.getElementAbsoluteTop(elementRef);\n        const x2 = x1 + elementRef.nativeElement.getBoundingClientRect().width - 1;\n        const y2 = y1 + elementRef.nativeElement.getBoundingClientRect().height - 1;\n\n        const elements1 = this.DOMService.getNativeDocument().elementsFromPoint(x1, y1);\n        const elements2 = this.DOMService.getNativeDocument().elementsFromPoint(x2, y2);\n\n        return (\n            this.getFirstElementWithoutKeyword(elements1, keywordToDiscard) !== elementRef.nativeElement ||\n            this.getFirstElementWithoutKeyword(elements2, keywordToDiscard) !== elementRef.nativeElement\n        );\n    }\n\n    private calculateDocumentHeight() {\n        const documentRef = this.DOMService.getNativeDocument();\n        return Math.max(\n            documentRef.body.scrollHeight,\n            documentRef.documentElement.scrollHeight,\n            documentRef.body.offsetHeight,\n            documentRef.documentElement.offsetHeight,\n            documentRef.body.clientHeight,\n            documentRef.documentElement.clientHeight\n        );\n    }\n\n    private getScrollOffsets() {\n        const winReference = this.DOMService.getNativeWindow();\n        const docReference = this.DOMService.getNativeDocument();\n\n        // This works for all browsers except IE versions 8 and before\n        if (winReference.pageXOffset != null) return { x: winReference.pageXOffset, y: winReference.pageYOffset };\n\n        // For IE (or any browser) in Standards mode\n        if (docReference.compatMode == 'CSS1Compat')\n            return {\n                x: docReference.documentElement.scrollLeft,\n                y: docReference.documentElement.scrollTop\n            };\n\n        // For browsers in Quirks mode\n        return { x: docReference.body.scrollLeft, y: docReference.body.scrollTop };\n    }\n\n    private getFirstElementWithoutKeyword(elements: Element[], keyword: string): Element {\n        while (elements[0] && elements[0].classList.toString().includes(keyword)) {\n            elements.shift();\n        }\n        return elements[0];\n    }\n}\n","import { Injectable, Renderer2, RendererFactory2, ViewContainerRef } from '@angular/core';\nimport { DocumentService } from './document.service';\nimport { Scroll } from './event-listener.service';\nimport { JoyrideOptionsService } from './joyride-options.service';\nimport { JoyrideStep } from '../models/joyride-step.class';\n\n@Injectable()\nexport class JoyrideBackdropService {\n    private renderer: Renderer2;\n    private currentBackdropContainer: any;\n    private lastBackdropContainer: any;\n    private backdropContent: any;\n    private backdropTop: any;\n    private backdropBottom: any;\n    private backdropMiddleContainer: any;\n    private backdropMiddleContent: any;\n    private leftBackdrop: any;\n    private targetBackdrop: any;\n    private rightBackdrop: any;\n    private elementRef: ViewContainerRef;\n    private targetAbsoluteTop: number;\n    private targetAbsoluteLeft: number;\n    private lastXScroll: number = 0;\n    private lastYScroll: number = 0;\n\n    constructor(\n        private readonly documentService: DocumentService,\n        private readonly optionsService: JoyrideOptionsService,\n        private readonly rendererFactory: RendererFactory2\n    ) {\n        this.setRenderer();\n    }\n\n    private setRenderer() {\n        this.renderer = this.rendererFactory.createRenderer(null, null);\n    }\n\n    draw(step: JoyrideStep) {\n        this.elementRef = step.targetViewContainer;\n        this.targetAbsoluteTop = this.getTargetTotalTop(step);\n        this.targetAbsoluteLeft = this.getTargetTotalLeft(step);\n\n        this.currentBackdropContainer = this.renderer.createElement('div');\n        this.renderer.addClass(this.currentBackdropContainer, 'backdrop-container');\n        this.renderer.setStyle(this.currentBackdropContainer, 'position', 'fixed');\n        this.renderer.setStyle(this.currentBackdropContainer, 'top', '0px');\n        this.renderer.setStyle(this.currentBackdropContainer, 'left', '0px');\n        this.renderer.setStyle(this.currentBackdropContainer, 'width', '100%');\n        this.renderer.setStyle(this.currentBackdropContainer, 'height', '100%');\n        this.renderer.setStyle(this.currentBackdropContainer, 'z-index', '1000');\n\n        this.backdropContent = this.renderer.createElement('div');\n        this.renderer.addClass(this.backdropContent, 'backdrop-content');\n        this.renderer.setStyle(this.backdropContent, 'position', 'relative');\n        this.renderer.setStyle(this.backdropContent, 'height', '100%');\n        this.renderer.setStyle(this.backdropContent, 'display', 'flex');\n        this.renderer.setStyle(this.backdropContent, 'flex-direction', 'column');\n        this.renderer.appendChild(this.currentBackdropContainer, this.backdropContent);\n\n        this.backdropTop = this.renderer.createElement('div');\n        this.renderer.addClass(this.backdropTop, 'joyride-backdrop');\n        this.renderer.addClass(this.backdropTop, 'backdrop-top');\n        this.renderer.setStyle(this.backdropTop, 'width', '100%');\n        this.renderer.setStyle(this.backdropTop, 'height', this.targetAbsoluteTop - this.lastYScroll + 'px');\n        this.renderer.setStyle(this.backdropTop, 'flex-shrink', '0');\n        this.renderer.setStyle(this.backdropTop, 'background-color', `rgba(${this.optionsService.getBackdropColor()}, 0.7)`);\n        this.renderer.appendChild(this.backdropContent, this.backdropTop);\n\n        this.backdropMiddleContainer = this.renderer.createElement('div');\n        this.renderer.addClass(this.backdropMiddleContainer, 'backdrop-middle-container');\n        this.renderer.setStyle(this.backdropMiddleContainer, 'height', this.elementRef.element.nativeElement.offsetHeight + 'px');\n        this.renderer.setStyle(this.backdropMiddleContainer, 'width', '100%');\n        this.renderer.setStyle(this.backdropMiddleContainer, 'flex-shrink', '0');\n        this.renderer.appendChild(this.backdropContent, this.backdropMiddleContainer);\n\n        this.backdropMiddleContent = this.renderer.createElement('div');\n        this.renderer.addClass(this.backdropMiddleContent, 'backdrop-middle-content');\n        this.renderer.setStyle(this.backdropMiddleContent, 'display', 'flex');\n        this.renderer.setStyle(this.backdropMiddleContent, 'width', '100%');\n        this.renderer.setStyle(this.backdropMiddleContent, 'height', '100%');\n        this.renderer.appendChild(this.backdropMiddleContainer, this.backdropMiddleContent);\n\n        this.leftBackdrop = this.renderer.createElement('div');\n        this.renderer.addClass(this.leftBackdrop, 'joyride-backdrop');\n        this.renderer.addClass(this.leftBackdrop, 'backdrop-left');\n        this.renderer.setStyle(this.leftBackdrop, 'flex-shrink', '0');\n        this.renderer.setStyle(this.leftBackdrop, 'width', this.targetAbsoluteLeft - this.lastXScroll + 'px');\n        this.renderer.setStyle(this.leftBackdrop, 'background-color', `rgba(${this.optionsService.getBackdropColor()}, 0.7)`);\n        this.renderer.appendChild(this.backdropMiddleContent, this.leftBackdrop);\n\n        this.targetBackdrop = this.renderer.createElement('div');\n        this.renderer.addClass(this.targetBackdrop, 'backdrop-target');\n        this.renderer.setStyle(this.targetBackdrop, 'flex-shrink', '0');\n        this.renderer.setStyle(this.targetBackdrop, 'width', this.elementRef.element.nativeElement.offsetWidth + 'px');\n        this.renderer.appendChild(this.backdropMiddleContent, this.targetBackdrop);\n\n        this.rightBackdrop = this.renderer.createElement('div');\n        this.renderer.addClass(this.rightBackdrop, 'joyride-backdrop');\n        this.renderer.addClass(this.rightBackdrop, 'backdrop-right');\n        this.renderer.setStyle(this.rightBackdrop, 'width', '100%');\n        this.renderer.setStyle(this.rightBackdrop, 'background-color', `rgba(${this.optionsService.getBackdropColor()}, 0.7)`);\n        this.renderer.appendChild(this.backdropMiddleContent, this.rightBackdrop);\n\n        this.backdropBottom = this.renderer.createElement('div');\n        this.renderer.addClass(this.backdropBottom, 'joyride-backdrop');\n        this.renderer.addClass(this.backdropBottom, 'backdrop-bottom');\n        this.renderer.setStyle(this.backdropBottom, 'width', '100%');\n        this.renderer.setStyle(this.backdropBottom, 'height', '100%');\n        this.renderer.setStyle(this.backdropBottom, 'background-color', `rgba(${this.optionsService.getBackdropColor()}, 0.7)`);\n        this.renderer.appendChild(this.backdropContent, this.backdropBottom);\n\n        this.removeLastBackdrop();\n        this.drawCurrentBackdrop();\n        this.lastBackdropContainer = this.currentBackdropContainer;\n    }\n\n    remove() {\n        this.removeLastBackdrop();\n    }\n\n    redrawTarget(step: JoyrideStep) {\n        this.targetAbsoluteLeft = this.getTargetTotalLeft(step);\n        this.targetAbsoluteTop = this.getTargetTotalTop(step);\n        this.handleVerticalScroll(step);\n        this.handleHorizontalScroll(step);\n    }\n\n    private getTargetTotalTop(step: JoyrideStep) {\n        let targetVC = step.targetViewContainer;\n        return step.isElementOrAncestorFixed\n            ? this.documentService.getElementFixedTop(targetVC.element)\n            : this.documentService.getElementAbsoluteTop(targetVC.element);\n    }\n\n    private getTargetTotalLeft(step: JoyrideStep) {\n        let targetVC = step.targetViewContainer;\n\n        return step.isElementOrAncestorFixed\n            ? this.documentService.getElementFixedLeft(targetVC.element)\n            : this.documentService.getElementAbsoluteLeft(targetVC.element);\n    }\n    redraw(step: JoyrideStep, scroll: Scroll) {\n        if (this.lastYScroll !== scroll.scrollY) {\n            this.lastYScroll = scroll.scrollY;\n            if (this.elementRef) {\n                this.handleVerticalScroll(step);\n            }\n        }\n        if (this.lastXScroll !== scroll.scrollX) {\n            this.lastXScroll = scroll.scrollX;\n            if (this.elementRef) {\n                this.handleHorizontalScroll(step);\n            }\n        }\n    }\n\n    private handleHorizontalScroll(step: JoyrideStep) {\n        let newBackdropLeftWidth = step.isElementOrAncestorFixed ? this.targetAbsoluteLeft : this.targetAbsoluteLeft - this.lastXScroll;\n\n        if (newBackdropLeftWidth >= 0) {\n            this.renderer.setStyle(this.leftBackdrop, 'width', newBackdropLeftWidth + 'px');\n            this.renderer.setStyle(this.targetBackdrop, 'width', this.elementRef.element.nativeElement.offsetWidth + 'px');\n        } else {\n            this.handleTargetPartialWidth(newBackdropLeftWidth);\n        }\n    }\n\n    private handleTargetPartialWidth(newBackdropLeftWidth: number) {\n        this.renderer.setStyle(this.leftBackdrop, 'width', 0 + 'px');\n        let visibleTargetWidth = this.elementRef.element.nativeElement.offsetWidth + newBackdropLeftWidth;\n        if (visibleTargetWidth >= 0) {\n            this.renderer.setStyle(this.targetBackdrop, 'width', visibleTargetWidth + 'px');\n        } else {\n            this.renderer.setStyle(this.targetBackdrop, 'width', 0 + 'px');\n        }\n    }\n\n    private handleVerticalScroll(step: JoyrideStep) {\n        let newBackdropTopHeight = step.isElementOrAncestorFixed ? this.targetAbsoluteTop : this.targetAbsoluteTop - this.lastYScroll;\n\n        if (newBackdropTopHeight >= 0) {\n            this.renderer.setStyle(this.backdropTop, 'height', newBackdropTopHeight + 'px');\n            this.renderer.setStyle(this.backdropMiddleContainer, 'height', this.elementRef.element.nativeElement.offsetHeight + 'px');\n        } else {\n            this.handleTargetPartialHeight(newBackdropTopHeight);\n        }\n    }\n\n    private handleTargetPartialHeight(newBackdropTopHeight: number) {\n        this.renderer.setStyle(this.backdropTop, 'height', 0 + 'px');\n        let visibleTargetHeight = this.elementRef.element.nativeElement.offsetHeight + newBackdropTopHeight;\n        if (visibleTargetHeight >= 0) {\n            this.renderer.setStyle(this.backdropMiddleContainer, 'height', visibleTargetHeight + 'px');\n        } else {\n            this.renderer.setStyle(this.backdropMiddleContainer, 'height', 0 + 'px');\n        }\n    }\n\n    private removeLastBackdrop() {\n        if (this.lastBackdropContainer) {\n            this.renderer.removeChild(document.body, this.lastBackdropContainer);\n            this.lastBackdropContainer = undefined;\n        }\n    }\n\n    private drawCurrentBackdrop() {\n        this.renderer.appendChild(document.body, this.currentBackdropContainer);\n    }\n}\n","import { Injectable, Renderer2, RendererFactory2 } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { DomRefService } from './dom.service';\n\nexport class Scroll {\n    scrollX: number;\n    scrollY: number;\n}\n\n@Injectable()\nexport class EventListenerService {\n    private renderer: Renderer2;\n    private scrollUnlisten: any;\n    private resizeUnlisten: any;\n\n    scrollEvent: Subject<Scroll> = new Subject<Scroll>();\n    resizeEvent: Subject<number> = new Subject<number>();\n\n    constructor(private readonly rendererFactory: RendererFactory2, private readonly DOMService: DomRefService) {\n        this.renderer = rendererFactory.createRenderer(null, null);\n    }\n\n    startListeningScrollEvents() {\n        this.scrollUnlisten = this.renderer.listen('document', 'scroll', evt => {\n            this.scrollEvent.next({\n                scrollX: this.DOMService.getNativeWindow().pageXOffset,\n                scrollY: this.DOMService.getNativeWindow().pageYOffset\n            });\n        });\n    }\n\n    startListeningResizeEvents() {\n        this.resizeUnlisten = this.renderer.listen('window', 'resize', evt => {\n            this.resizeEvent.next(evt);\n        });\n    }\n\n    stopListeningScrollEvents() {\n        this.scrollUnlisten();\n    }\n\n    stopListeningResizeEvents() {\n        this.resizeUnlisten();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { JoyrideOptionsService } from './joyride-options.service';\n\nconst JOYRIDE = 'ngx-joyride:::';\n\n@Injectable()\nexport class LoggerService {\n\n    constructor(private readonly optionService: JoyrideOptionsService) { }\n\n    debug(message?: string, data: any = \"\") {\n        if (this.optionService.areLogsEnabled()) {\n            console.debug(JOYRIDE + message, data);\n        }\n    }\n\n    info(message?: string, data: any = \"\") {\n        if (this.optionService.areLogsEnabled()) {\n            console.info(JOYRIDE + message, data);\n        }\n    }\n\n    warn(message?: string, data: any = \"\") {\n        if (this.optionService.areLogsEnabled()) {\n            console.warn(JOYRIDE + message, data);\n        }\n    }\n\n    error(message?: string, data: any = \"\") {\n        if (this.optionService.areLogsEnabled()) {\n            console.error(JOYRIDE + message, data);\n        }\n    }\n\n}","import {\n    Component,\n    Input,\n    AfterViewInit,\n    ViewEncapsulation,\n    OnInit,\n    OnDestroy,\n    ElementRef,\n    ViewChild,\n    Renderer2,\n    Injector,\n    TemplateRef\n} from '@angular/core';\nimport { JoyrideStep } from '../../models/joyride-step.class';\nimport { JoyrideStepService, ARROW_SIZE, DISTANCE_FROM_TARGET, IJoyrideStepService } from '../../services/joyride-step.service';\nimport { JoyrideStepsContainerService } from '../../services/joyride-steps-container.service';\nimport { EventListenerService } from '../../services/event-listener.service';\nimport { Subscription, Observable } from 'rxjs';\nimport { DocumentService } from '../../services/document.service';\nimport { JoyrideOptionsService } from '../../services/joyride-options.service';\nimport { LoggerService } from '../../services/logger.service';\nimport { TemplatesService } from '../../services/templates.service';\n\nconst STEP_MIN_WIDTH = 200;\nconst STEP_MAX_WIDTH = 400;\nconst CUSTOM_STEP_MAX_WIDTH_VW = 90;\nconst STEP_HEIGHT = 200;\nconst ASPECT_RATIO = 1.212;\nexport const DEFAULT_DISTANCE_FROM_MARGIN_TOP = 2;\nexport const DEFAULT_DISTANCE_FROM_MARGIN_LEFT = 2;\nconst DEFAULT_DISTANCE_FROM_MARGIN_BOTTOM = 5;\nconst DEFAULT_DISTANCE_FROM_MARGIN_RIGHT = 5;\n\n@Component({\n    selector: 'joyride-step',\n    templateUrl: './joyride-step.component.html',\n    styleUrls: ['./joyride-step.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class JoyrideStepComponent implements OnInit, OnDestroy, AfterViewInit {\n    stepWidth: number = STEP_MIN_WIDTH;\n    stepHeight: number = STEP_HEIGHT;\n    leftPosition: number;\n    topPosition: number;\n    showArrow: boolean = true;\n    arrowPosition: string;\n    arrowLeftPosition: number;\n    arrowTopPosition: number;\n    title: Observable<string>;\n    text: Observable<string>;\n    counter: string;\n    isCounterVisible: boolean;\n    isPrevButtonVisible: boolean;\n    themeColor: string;\n    customContent: TemplateRef<any>;\n    customPrevButton: TemplateRef<any>;\n    customNextButton: TemplateRef<any>;\n    customDoneButton: TemplateRef<any>;\n    customCounter: TemplateRef<any>;\n    counterData: any;\n    ctx: Object;\n\n    private arrowSize: number = ARROW_SIZE;\n    private stepAbsoluteLeft: number;\n    private stepAbsoluteTop: number;\n    private targetWidth: number;\n    targetHeight: number;\n    private targetAbsoluteLeft: number;\n    private targetAbsoluteTop: number;\n\n    private subscriptions: Subscription[] = [];\n    joyrideStepService: IJoyrideStepService;\n\n    private positionAlreadyFixed: boolean;\n    private documentHeight: number;\n\n    @Input() step?: JoyrideStep;\n    @ViewChild('stepHolder') stepHolder: ElementRef;\n    @ViewChild('stepContainer') stepContainer: ElementRef;\n\n    constructor(\n        private injector: Injector,\n        private readonly stepsContainerService: JoyrideStepsContainerService,\n        private readonly eventListenerService: EventListenerService,\n        private readonly documentService: DocumentService,\n        private readonly renderer: Renderer2,\n        private readonly logger: LoggerService,\n        private readonly optionsService: JoyrideOptionsService,\n        private readonly templateService: TemplatesService\n    ) {}\n\n    ngOnInit(): void {\n        // Need to Inject here otherwise you will obtain a circular dependency\n        this.joyrideStepService = this.injector.get(JoyrideStepService);\n\n        this.documentHeight = this.documentService.getDocumentHeight();\n        this.subscriptions.push(this.subscribeToResizeEvents());\n        this.title = this.step.title;\n        this.text = this.step.text;\n\n        this.setCustomTemplates();\n\n        this.counter = this.getCounter();\n        this.isCounterVisible = this.optionsService.isCounterVisible();\n        this.isPrevButtonVisible = this.optionsService.isPrevButtonVisible();\n        this.themeColor = this.optionsService.getThemeColor();\n\n        if (this.text) this.text.subscribe(val => this.checkRedraw(val));\n        if (this.title) this.title.subscribe(val => this.checkRedraw(val));\n    }\n\n    ngAfterViewInit() {\n        if (this.isCustomized()) {\n            this.renderer.setStyle(this.stepContainer.nativeElement, 'max-width', CUSTOM_STEP_MAX_WIDTH_VW + 'vw');\n            this.updateStepDimensions();\n        } else {\n            this.renderer.setStyle(this.stepContainer.nativeElement, 'max-width', STEP_MAX_WIDTH + 'px');\n            let dimensions = this.getDimensionsByAspectRatio(\n                this.stepContainer.nativeElement.clientWidth,\n                this.stepContainer.nativeElement.clientHeight,\n                ASPECT_RATIO\n            );\n            dimensions = this.adjustDimensions(dimensions.width, dimensions.height);\n            this.stepWidth = dimensions.width;\n            this.stepHeight = dimensions.height;\n            this.renderer.setStyle(this.stepContainer.nativeElement, 'width', this.stepWidth + 'px');\n            this.renderer.setStyle(this.stepContainer.nativeElement, 'height', this.stepHeight + 'px');\n        }\n        this.drawStep();\n    }\n\n    private checkRedraw(val) {\n        if (val != null) {\n            // Need to wait that the change is rendered before redrawing\n            setTimeout(() => {\n                this.redrawStep();\n            }, 2);\n        }\n    }\n\n    private isCustomized() {\n        return (\n            this.step.stepContent ||\n            this.templateService.getCounter() ||\n            this.templateService.getPrevButton() ||\n            this.templateService.getNextButton() ||\n            this.templateService.getDoneButton()\n        );\n    }\n\n    private drawStep() {\n        let position = this.step.isElementOrAncestorFixed ? 'fixed' : 'absolute';\n        this.renderer.setStyle(this.stepHolder.nativeElement, 'position', position);\n        this.renderer.setStyle(this.stepHolder.nativeElement, 'transform', this.step.transformCssStyle);\n        this.targetWidth = this.step.targetViewContainer.element.nativeElement.getBoundingClientRect().width;\n        this.targetHeight = this.step.targetViewContainer.element.nativeElement.getBoundingClientRect().height;\n        this.targetAbsoluteLeft =\n            position === 'fixed'\n                ? this.documentService.getElementFixedLeft(this.step.targetViewContainer.element)\n                : this.documentService.getElementAbsoluteLeft(this.step.targetViewContainer.element);\n        this.targetAbsoluteTop =\n            position === 'fixed'\n                ? this.documentService.getElementFixedTop(this.step.targetViewContainer.element)\n                : this.documentService.getElementAbsoluteTop(this.step.targetViewContainer.element);\n        this.setStepStyle();\n    }\n\n    private getCounter(): string {\n        let stepPosition = this.stepsContainerService.getStepPosition(this.step);\n        let numberOfSteps = this.stepsContainerService.getNumberOfSteps();\n        this.counterData = { step: stepPosition, total: numberOfSteps };\n        return stepPosition + '/' + numberOfSteps;\n    }\n\n    private setCustomTemplates() {\n        this.customContent = this.step.stepContent;\n        this.ctx = this.step.stepContentParams;\n        this.customPrevButton = this.templateService.getPrevButton();\n        this.customNextButton = this.templateService.getNextButton();\n        this.customDoneButton = this.templateService.getDoneButton();\n        this.customCounter = this.templateService.getCounter();\n    }\n\n    prev() {\n        this.joyrideStepService.prev();\n    }\n\n    next() {\n        this.joyrideStepService.next();\n    }\n\n    close() {\n        this.joyrideStepService.close();\n    }\n\n    isFirstStep() {\n        return this.joyrideStepService.isFirstStep();\n    }\n\n    isLastStep() {\n        return this.joyrideStepService.isLastStep();\n    }\n\n    private setStepStyle() {\n        switch (this.step.position) {\n            case 'top': {\n                this.setStyleTop();\n                break;\n            }\n            case 'bottom': {\n                this.setStyleBottom();\n                break;\n            }\n            case 'right': {\n                this.setStyleRight();\n                break;\n            }\n            case 'left': {\n                this.setStyleLeft();\n                break;\n            }\n            case 'center': {\n                this.setStyleCenter();\n                break;\n            }\n            default: {\n                this.setStyleBottom();\n            }\n        }\n    }\n\n    private setStyleTop() {\n        this.stepsContainerService.setPosition(this.step, 'top');\n        this.topPosition = this.targetAbsoluteTop - DISTANCE_FROM_TARGET - this.stepHeight;\n        this.stepAbsoluteTop = this.targetAbsoluteTop - DISTANCE_FROM_TARGET - this.stepHeight;\n        this.arrowTopPosition = this.stepHeight;\n\n        this.leftPosition = this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;\n        this.stepAbsoluteLeft = this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;\n        this.arrowLeftPosition = this.stepWidth / 2 - this.arrowSize;\n        this.adjustLeftPosition();\n        this.adjustRightPosition();\n        this.arrowPosition = 'bottom';\n        this.autofixTopPosition();\n    }\n\n    private setStyleRight() {\n        this.stepsContainerService.setPosition(this.step, 'right');\n        this.topPosition = this.targetAbsoluteTop + this.targetHeight / 2 - this.stepHeight / 2;\n        this.stepAbsoluteTop = this.targetAbsoluteTop + this.targetHeight / 2 - this.stepHeight / 2;\n        this.arrowTopPosition = this.stepHeight / 2 - this.arrowSize;\n\n        this.leftPosition = this.targetAbsoluteLeft + this.targetWidth + DISTANCE_FROM_TARGET;\n        this.stepAbsoluteLeft = this.targetAbsoluteLeft + this.targetWidth + DISTANCE_FROM_TARGET;\n        this.arrowLeftPosition = -this.arrowSize;\n        this.adjustTopPosition();\n        this.adjustBottomPosition();\n        this.arrowPosition = 'left';\n        this.autofixRightPosition();\n    }\n\n    private setStyleBottom() {\n        this.stepsContainerService.setPosition(this.step, 'bottom');\n        this.topPosition = this.targetAbsoluteTop + this.targetHeight + DISTANCE_FROM_TARGET;\n        this.stepAbsoluteTop = this.targetAbsoluteTop + this.targetHeight + DISTANCE_FROM_TARGET;\n        this.arrowTopPosition = -this.arrowSize;\n\n        this.arrowLeftPosition = this.stepWidth / 2 - this.arrowSize;\n        this.leftPosition = this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;\n        this.stepAbsoluteLeft = this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;\n        this.adjustLeftPosition();\n        this.adjustRightPosition();\n        this.arrowPosition = 'top';\n        this.autofixBottomPosition();\n    }\n\n    private setStyleLeft() {\n        this.stepsContainerService.setPosition(this.step, 'left');\n        this.topPosition = this.targetAbsoluteTop + this.targetHeight / 2 - this.stepHeight / 2;\n        this.stepAbsoluteTop = this.targetAbsoluteTop + this.targetHeight / 2 - this.stepHeight / 2;\n        this.arrowTopPosition = this.stepHeight / 2 - this.arrowSize;\n\n        this.leftPosition = this.targetAbsoluteLeft - this.stepWidth - DISTANCE_FROM_TARGET;\n        this.stepAbsoluteLeft = this.targetAbsoluteLeft - this.stepWidth - DISTANCE_FROM_TARGET;\n        this.arrowLeftPosition = this.stepWidth;\n        this.adjustTopPosition();\n        this.adjustBottomPosition();\n        this.arrowPosition = 'right';\n        this.autofixLeftPosition();\n    }\n\n    private setStyleCenter() {\n        this.renderer.setStyle(this.stepHolder.nativeElement, 'position', 'fixed');\n        this.renderer.setStyle(this.stepHolder.nativeElement, 'top', '50%');\n        this.renderer.setStyle(this.stepHolder.nativeElement, 'left', '50%');\n\n        this.updateStepDimensions();\n\n        this.renderer.setStyle(\n            this.stepHolder.nativeElement,\n            'transform',\n            `translate(-${this.stepWidth / 2}px, -${this.stepHeight / 2}px)`\n        );\n        this.showArrow = false;\n    }\n\n    private adjustLeftPosition() {\n        if (this.leftPosition < 0) {\n            this.arrowLeftPosition = this.arrowLeftPosition + this.leftPosition - DEFAULT_DISTANCE_FROM_MARGIN_LEFT;\n            this.leftPosition = DEFAULT_DISTANCE_FROM_MARGIN_LEFT;\n        }\n    }\n\n    private adjustRightPosition() {\n        let currentWindowWidth = document.body.clientWidth;\n        if (this.stepAbsoluteLeft + this.stepWidth > currentWindowWidth) {\n            let newLeftPos =\n                this.leftPosition - (this.stepAbsoluteLeft + this.stepWidth + DEFAULT_DISTANCE_FROM_MARGIN_RIGHT - currentWindowWidth);\n            let deltaLeftPosition = newLeftPos - this.leftPosition;\n\n            this.leftPosition = newLeftPos;\n            this.arrowLeftPosition = this.arrowLeftPosition - deltaLeftPosition;\n        }\n    }\n\n    private adjustTopPosition() {\n        if (this.stepAbsoluteTop < 0) {\n            this.arrowTopPosition = this.arrowTopPosition + this.topPosition - DEFAULT_DISTANCE_FROM_MARGIN_TOP;\n            this.topPosition = DEFAULT_DISTANCE_FROM_MARGIN_TOP;\n        }\n    }\n\n    private adjustBottomPosition() {\n        if (this.stepAbsoluteTop + this.stepHeight > this.documentHeight) {\n            let newTopPos =\n                this.topPosition - (this.stepAbsoluteTop + this.stepHeight + DEFAULT_DISTANCE_FROM_MARGIN_BOTTOM - this.documentHeight);\n            let deltaTopPosition = newTopPos - this.topPosition;\n\n            this.topPosition = newTopPos;\n            this.arrowTopPosition = this.arrowTopPosition - deltaTopPosition;\n        }\n    }\n\n    private autofixTopPosition() {\n        if (this.positionAlreadyFixed) {\n            this.logger.warn('No step positions found for this step. The step will be centered.');\n        } else if (this.targetAbsoluteTop - this.stepHeight - this.arrowSize < 0) {\n            this.positionAlreadyFixed = true;\n            this.setStyleRight();\n        }\n    }\n\n    private autofixRightPosition() {\n        if (this.targetAbsoluteLeft + this.targetWidth + this.stepWidth + this.arrowSize > document.body.clientWidth) {\n            this.setStyleBottom();\n        }\n    }\n\n    private autofixBottomPosition() {\n        if (this.targetAbsoluteTop + this.stepHeight + this.arrowSize + this.targetHeight > this.documentHeight) {\n            this.setStyleLeft();\n        }\n    }\n\n    private autofixLeftPosition() {\n        if (this.targetAbsoluteLeft - this.stepWidth - this.arrowSize < 0) {\n            this.setStyleTop();\n        }\n    }\n\n    private subscribeToResizeEvents(): Subscription {\n        return this.eventListenerService.resizeEvent.subscribe(() => {\n            this.redrawStep();\n        });\n    }\n\n    private redrawStep() {\n        this.updateStepDimensions();\n        this.drawStep();\n    }\n\n    private getDimensionsByAspectRatio(width: number, height: number, aspectRatio: number) {\n        let calcHeight = (width + height) / (1 + aspectRatio);\n        let calcWidth = calcHeight * aspectRatio;\n        return {\n            width: calcWidth,\n            height: calcHeight\n        };\n    }\n    private adjustDimensions(width: number, height: number) {\n        let area = width * height;\n        let newWidth = width;\n        let newHeight = height;\n        if (width > STEP_MAX_WIDTH) {\n            newWidth = STEP_MAX_WIDTH;\n            newHeight = area / newWidth;\n        } else if (width < STEP_MIN_WIDTH) {\n            newWidth = STEP_MIN_WIDTH;\n            newHeight = STEP_MIN_WIDTH / ASPECT_RATIO;\n        }\n        return {\n            width: newWidth,\n            height: newHeight\n        };\n    }\n\n    private updateStepDimensions() {\n        this.stepWidth = this.stepContainer.nativeElement.clientWidth;\n        this.stepHeight = this.stepContainer.nativeElement.clientHeight;\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(subscription => {\n            subscription.unsubscribe();\n        });\n    }\n}\n","import { Injectable, ComponentRef, ComponentFactoryResolver, ApplicationRef, Injector, EmbeddedViewRef } from '@angular/core';\nimport { JoyrideStepComponent } from \"../components/step/joyride-step.component\";\nimport { JoyrideStep } from '../models/joyride-step.class';\n\n@Injectable()\nexport class StepDrawerService {\n\n    private refMap: { [key: string]: ComponentRef<JoyrideStepComponent>; } = {};\n\n    constructor(\n        private readonly componentFactoryResolver: ComponentFactoryResolver,\n        private appRef: ApplicationRef,\n        private injector: Injector\n    ) { }\n\n    draw(step: JoyrideStep) {\n\n        // 1. Create a component reference from the component \n        const ref: ComponentRef<JoyrideStepComponent> = this.componentFactoryResolver\n            .resolveComponentFactory(JoyrideStepComponent)\n            .create(this.injector);\n\n        // 2. Attach component to the appRef so that it's inside the ng component tree\n        this.appRef.attachView(ref.hostView);\n\n        // 3. Get DOM element from component\n        const domElem = (ref.hostView as EmbeddedViewRef<any>)\n            .rootNodes[0] as HTMLElement;\n\n        // 4. Append DOM element to the body\n        document.body.appendChild(domElem);\n\n        const instance: JoyrideStepComponent = ref.instance;\n        instance.step = step;\n        ref.changeDetectorRef.detectChanges();\n        step.stepInstance = instance;\n\n        this.refMap[step.name] = ref;\n\n    }\n\n    remove(step: JoyrideStep) {\n        this.appRef.detachView(this.refMap[step.name].hostView);\n        this.refMap[step.name].destroy();\n    }\n\n}","import { Injectable } from '@angular/core';\nimport { JoyrideStep } from '../models/joyride-step.class';\nimport { JoyrideBackdropService } from './joyride-backdrop.service';\nimport { EventListenerService } from './event-listener.service';\nimport { JoyrideStepsContainerService } from './joyride-steps-container.service';\nimport { DocumentService } from './document.service';\nimport { StepDrawerService } from './step-drawer.service';\nimport { DomRefService } from './dom.service';\nimport { NO_POSITION } from '../directives/joyride.directive';\nimport { JoyrideOptionsService } from './joyride-options.service';\nimport { Router } from '@angular/router';\nimport { ReplaySubject, Observable } from 'rxjs';\nimport { JoyrideStepInfo } from '../models/joyride-step-info.class';\n\nconst SCROLLBAR_SIZE = 20;\nexport const DISTANCE_FROM_TARGET = 15;\nexport const ARROW_SIZE = 10;\n\nexport interface IJoyrideStepService {\n    startTour(): Observable<JoyrideStepInfo>;\n    close(): any;\n    prev(): any;\n    next(): any;\n    isFirstStep(): boolean;\n    isLastStep(): boolean;\n}\n\n@Injectable()\nexport class JoyrideStepService implements IJoyrideStepService {\n    private currentStepIndex: number;\n    private currentStep: JoyrideStep;\n\n    private winTopPosition: number = 0;\n    private winBottomPosition: number = 0;\n    private stepsObserver: ReplaySubject<JoyrideStepInfo> = new ReplaySubject<JoyrideStepInfo>();\n\n    constructor(\n        private readonly backDropService: JoyrideBackdropService,\n        private readonly eventListener: EventListenerService,\n        private readonly stepsContainerService: JoyrideStepsContainerService,\n        private readonly documentService: DocumentService,\n        private readonly DOMService: DomRefService,\n        private readonly stepDrawerService: StepDrawerService,\n        public optionsService: JoyrideOptionsService,\n        private readonly router: Router\n    ) {\n        this.initViewportPositions();\n        this.subscribeToScrollEvents();\n        this.subscribeToResizeEvents();\n    }\n\n    private initViewportPositions() {\n        this.winTopPosition = 0;\n        this.winBottomPosition = this.DOMService.getNativeWindow().innerHeight - SCROLLBAR_SIZE;\n    }\n\n    private subscribeToScrollEvents() {\n        this.eventListener.startListeningScrollEvents();\n        this.eventListener.scrollEvent.subscribe(scroll => {\n            this.winTopPosition = scroll.scrollY;\n            this.winBottomPosition = this.winTopPosition + this.DOMService.getNativeWindow().innerHeight - SCROLLBAR_SIZE;\n            this.backDropService.redraw(this.currentStep, scroll);\n        });\n    }\n\n    private subscribeToResizeEvents() {\n        this.eventListener.resizeEvent.subscribe(() => {\n            this.backDropService.redrawTarget(this.currentStep);\n        });\n    }\n\n    private drawStep(step: JoyrideStep) {\n        step.position = step.position === NO_POSITION ? this.optionsService.getStepDefaultPosition() : step.position;\n        this.stepDrawerService.draw(step);\n    }\n\n    startTour(): Observable<JoyrideStepInfo> {\n        this.stepsObserver = new ReplaySubject<JoyrideStepInfo>();\n        this.currentStepIndex = 0;\n        this.documentService.setDocumentHeight();\n        this.navigateToStepPage();\n        this.showStep('NEXT');\n        this.eventListener.startListeningResizeEvents();\n        this.subscribeToStepsUpdates();\n        return this.stepsObserver.asObservable();\n    }\n\n    close() {\n        this.removeCurrentStep();\n        this.notifyTourIsFinished();\n        this.DOMService.getNativeWindow().scrollTo(0, 0);\n        this.eventListener.stopListeningResizeEvents();\n        this.backDropService.remove();\n    }\n\n    prev() {\n        this.removeCurrentStep();\n        this.currentStepIndex -= 1;\n        this.currentStep.prevCliked.emit();\n        this.navigateToStepPage();\n        this.showStep('PREV');\n    }\n\n    next() {\n        this.removeCurrentStep();\n        this.currentStepIndex += 1;\n        this.currentStep.nextClicked.emit();\n        this.navigateToStepPage();\n        this.showStep('NEXT');\n    }\n\n    isFirstStep() {\n        return this.currentStepIndex === 0;\n    }\n\n    isLastStep() {\n        return this.currentStepIndex === this.stepsContainerService.getNumberOfSteps() - 1;\n    }\n\n    private navigateToStepPage() {\n        let stepRoute = this.stepsContainerService.getStepRoute(this.currentStepIndex);\n        if (stepRoute) {\n            this.router.navigate([stepRoute]);\n        }\n    }\n\n    private subscribeToStepsUpdates() {\n        this.stepsContainerService.stepHasBeenModified.subscribe(updatedStep => {\n            if (this.currentStep.name === updatedStep.name) {\n                this.currentStep = updatedStep;\n            }\n        });\n    }\n\n    private showStep(action: 'PREV' | 'NEXT') {\n        setTimeout(() => {\n            this.stepsContainerService.initSteps();\n            this.currentStep = this.stepsContainerService.get(this.currentStepIndex);\n            // Scroll the element to get it visible if it's in a scrollable element\n            if (this.isParentScrollable(this.currentStep.targetViewContainer.element.nativeElement)) {\n                this.currentStep.targetViewContainer.element.nativeElement.scrollIntoView();\n            }\n            this.scrollIfElementBeyondOtherElements();\n            this.backDropService.draw(this.currentStep);\n            this.drawStep(this.currentStep);\n            this.scrollIfStepAndTargetAreNotVisible();\n            this.notifyStepClicked(action);\n        }, 1);\n    }\n\n    private notifyStepClicked(action: 'PREV' | 'NEXT') {\n        let stepInfo: JoyrideStepInfo = {\n            number: this.currentStepIndex,\n            name: this.currentStep.name,\n            route: this.currentStep.route,\n            actionType: action\n        };\n        this.stepsObserver.next(stepInfo);\n    }\n\n    private notifyTourIsFinished() {\n        this.currentStep.tourDone.emit();\n        this.stepsObserver.complete();\n    }\n\n    private isParentScrollable(nativeElement: any) {\n        return this.documentService.getFirstScrollableParent(nativeElement) !== this.DOMService.getNativeDocument().body;\n    }\n\n    private removeCurrentStep() {\n        this.stepDrawerService.remove(this.currentStep);\n    }\n\n    private scrollIfStepAndTargetAreNotVisible() {\n        this.scrollWhenTargetOrStepAreHiddenBottom();\n        this.scrollWhenTargetOrStepAreHiddenTop();\n    }\n\n    private scrollWhenTargetOrStepAreHiddenBottom() {\n        let totalTargetBottom = this.getMaxTargetAndStepBottomPosition();\n        if (totalTargetBottom > this.winBottomPosition) {\n            this.DOMService.getNativeWindow().scrollBy(0, totalTargetBottom - this.winBottomPosition);\n        }\n    }\n\n    private scrollWhenTargetOrStepAreHiddenTop() {\n        let totalTargetTop = this.getMaxTargetAndStepTopPosition();\n        if (totalTargetTop < this.winTopPosition) {\n            this.DOMService.getNativeWindow().scrollBy(0, totalTargetTop - this.winTopPosition);\n        }\n    }\n\n    private getMaxTargetAndStepBottomPosition(): number {\n        let targetAbsoluteTop = this.documentService.getElementAbsoluteTop(this.currentStep.targetViewContainer.element);\n        if (this.currentStep.position === 'top') {\n            return targetAbsoluteTop + this.currentStep.stepInstance.targetHeight;\n        } else if (this.currentStep.position === 'bottom') {\n            return (\n                targetAbsoluteTop +\n                this.currentStep.stepInstance.targetHeight +\n                this.currentStep.stepInstance.stepHeight +\n                ARROW_SIZE +\n                DISTANCE_FROM_TARGET\n            );\n        } else if (this.currentStep.position === 'right' || this.currentStep.position === 'left') {\n            return Math.max(\n                targetAbsoluteTop + this.currentStep.stepInstance.targetHeight,\n                targetAbsoluteTop + this.currentStep.stepInstance.targetHeight / 2 + this.currentStep.stepInstance.stepHeight / 2\n            );\n        }\n    }\n\n    private getMaxTargetAndStepTopPosition() {\n        let targetAbsoluteTop = this.documentService.getElementAbsoluteTop(this.currentStep.targetViewContainer.element);\n        if (this.currentStep.position === 'top') {\n            return targetAbsoluteTop - (this.currentStep.stepInstance.stepHeight + ARROW_SIZE + DISTANCE_FROM_TARGET);\n        } else if (this.currentStep.position === 'bottom') {\n            return targetAbsoluteTop;\n        } else if (this.currentStep.position === 'right' || this.currentStep.position === 'left') {\n            return Math.min(\n                targetAbsoluteTop,\n                targetAbsoluteTop + this.currentStep.stepInstance.targetHeight / 2 - this.currentStep.stepInstance.stepHeight / 2\n            );\n        }\n    }\n\n    private scrollIfElementBeyondOtherElements() {\n        if (\n            this.documentService.isElementBeyondOthers(\n                this.currentStep.targetViewContainer.element,\n                this.currentStep.isElementOrAncestorFixed,\n                'backdrop'\n            )\n        ) {\n            this.DOMService.getNativeWindow().scrollTo(0, 0);\n        }\n\n        if (\n            this.documentService.isElementBeyondOthers(\n                this.currentStep.targetViewContainer.element,\n                this.currentStep.isElementOrAncestorFixed,\n                'backdrop'\n            )\n        ) {\n            this.DOMService.getNativeWindow().scrollTo(0, this.DOMService.getNativeDocument().body.scrollHeight);\n        }\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// typeof any so that it we don't have to cast when comparing a result to the error object\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map\n","/** PURE_IMPORTS_START _errorObject PURE_IMPORTS_END */\nimport { errorObject } from './errorObject';\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject.e = e;\n        return errorObject;\n    }\n}\nexport function tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n//# sourceMappingURL=tryCatch.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar _enable_super_gross_mode_that_will_cause_bad_things = false;\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport var config = {\n    /**\n     * The promise constructor used by default for methods such as\n     * {@link toPromise} and {@link forEach}\n     */\n    Promise: undefined,\n    /**\n     * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n     * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n     * call in a try/catch block. It also enables producer interference, a nasty bug\n     * where a multicast can be broken for all observers by a downstream consumer with\n     * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n     * FOR MIGRATION REASONS.\n     */\n    set useDeprecatedSynchronousErrorHandling(value) {\n        if (value) {\n            var error = /*@__PURE__*/ new Error();\n            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n        }\n        else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n            /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');\n        }\n        _enable_super_gross_mode_that_will_cause_bad_things = value;\n    },\n    get useDeprecatedSynchronousErrorHandling() {\n        return _enable_super_gross_mode_that_will_cause_bad_things;\n    },\n};\n//# sourceMappingURL=config.js.map\n","/**\n * Throws an error on another job so that it's picked up by the runtime's\n * uncaught error handling mechanism.\n * @param err the error to throw\n */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function hostReportError(err) {\n    setTimeout(function () { throw err; });\n}\n//# sourceMappingURL=hostReportError.js.map\n","/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport var empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) {\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            throw err;\n        }\n        else {\n            hostReportError(err);\n        }\n    },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isObject(x) {\n    return x != null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        var _this = _super.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return i + 1 + \") \" + err.toString(); }).join('\\n  ') : '') || this;\n        _this.errors = errors;\n        _this.name = 'UnsubscriptionError';\n        Object.setPrototypeOf(_this, UnsubscriptionError.prototype);\n        return _this;\n    }\n    return UnsubscriptionError;\n}(Error));\nexport { UnsubscriptionError };\n//# sourceMappingURL=UnsubscriptionError.js.map\n","/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_tryCatch,_util_errorObject,_util_UnsubscriptionError PURE_IMPORTS_END */\nimport { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = /*@__PURE__*/ (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        /** @internal */\n        this._parent = null;\n        /** @internal */\n        this._parents = null;\n        /** @internal */\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            var trial = tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    var trial = tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject.e;\n                        if (err instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    /** @internal */\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    /** @nocollapse */\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexport { Subscription };\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function')\n    ? /*@__PURE__*/ Symbol.for('rxSubscriber')\n    : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexport var $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n","/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        /** @internal */ _this.syncErrorValue = null;\n        /** @internal */ _this.syncErrorThrown = false;\n        /** @internal */ _this.syncErrorThrowable = false;\n        _this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                _this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    _this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    // HACK(benlesh): For situations where Node has multiple copies of rxjs in\n                    // node_modules, we cannot rely on `instanceof` checks\n                    if (isTrustedSubscriber(destinationOrNext)) {\n                        var trustedSubscriber = destinationOrNext[rxSubscriberSymbol]();\n                        _this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n                        _this.destination = trustedSubscriber;\n                        trustedSubscriber.add(_this);\n                    }\n                    else {\n                        _this.syncErrorThrowable = true;\n                        _this.destination = new SafeSubscriber(_this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                _this.syncErrorThrowable = true;\n                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);\n                break;\n        }\n        return _this;\n    }\n    Subscriber.prototype[rxSubscriberSymbol] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     * @nocollapse\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription));\nexport { Subscriber };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        _this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = _this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    _this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = _this.unsubscribe.bind(_this);\n            }\n        }\n        _this._context = context;\n        _this._next = next;\n        _this._error = error;\n        _this._complete = complete;\n        return _this;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;\n            if (this._error) {\n                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                if (useDeprecatedSynchronousErrorHandling) {\n                    throw err;\n                }\n                hostReportError(err);\n            }\n            else {\n                if (useDeprecatedSynchronousErrorHandling) {\n                    _parentSubscriber.syncErrorValue = err;\n                    _parentSubscriber.syncErrorThrown = true;\n                }\n                else {\n                    hostReportError(err);\n                }\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                throw err;\n            }\n            else {\n                hostReportError(err);\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        if (!config.useDeprecatedSynchronousErrorHandling) {\n            throw new Error('bad call');\n        }\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                parent.syncErrorValue = err;\n                parent.syncErrorThrown = true;\n                return true;\n            }\n            else {\n                hostReportError(err);\n                return true;\n            }\n        }\n        return false;\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nfunction isTrustedSubscriber(obj) {\n    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n//# sourceMappingURL=Subscriber.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber));\nexport { OuterSubscriber };\n//# sourceMappingURL=OuterSubscriber.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        _this.outerValue = outerValue;\n        _this.outerIndex = outerIndex;\n        _this.index = 0;\n        return _this;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber));\nexport { InnerSubscriber };\n//# sourceMappingURL=InnerSubscriber.js.map\n","/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */\nimport { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map\n","/** Symbol.observable or a string \"@@observable\". Used for interop */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';\n//# sourceMappingURL=observable.js.map\n","/* tslint:disable:no-empty */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function noop() { }\n//# sourceMappingURL=noop.js.map\n","/** PURE_IMPORTS_START _noop PURE_IMPORTS_END */\nimport { noop } from './noop';\n/* tslint:enable:max-line-length */\nexport function pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\n/* @internal */\nexport function pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map\n","/** PURE_IMPORTS_START _util_toSubscriber,_internal_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = /*@__PURE__*/ (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        /** Internal implementation detail, do not use directly. */\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            if (sink.syncErrorThrowable) {\n                sink.syncErrorThrowable = false;\n                if (sink.syncErrorThrown) {\n                    throw sink.syncErrorValue;\n                }\n            }\n        }\n        return sink;\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                sink.syncErrorThrown = true;\n                sink.syncErrorValue = err;\n            }\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    if (subscription) {\n                        subscription.unsubscribe();\n                    }\n                }\n            }, reject, resolve);\n        });\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Observable.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        return source && source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[Symbol_observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     * @nocollapse\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexport { Observable };\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor) {\n    if (!promiseCtor) {\n        promiseCtor = config.Promise || Promise;\n    }\n    if (!promiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return promiseCtor;\n}\n//# sourceMappingURL=Observable.js.map\n","/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var subscribeToArray = function (array) {\n    return function (subscriber) {\n        for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n            subscriber.next(array[i]);\n        }\n        if (!subscriber.closed) {\n            subscriber.complete();\n        }\n    };\n};\n//# sourceMappingURL=subscribeToArray.js.map\n","/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */\nimport { hostReportError } from './hostReportError';\nexport var subscribeToPromise = function (promise) {\n    return function (subscriber) {\n        promise.then(function (value) {\n            if (!subscriber.closed) {\n                subscriber.next(value);\n                subscriber.complete();\n            }\n        }, function (err) { return subscriber.error(err); })\n            .then(null, hostReportError);\n        return subscriber;\n    };\n};\n//# sourceMappingURL=subscribeToPromise.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function getSymbolIterator() {\n    if (typeof Symbol !== 'function' || !Symbol.iterator) {\n        return '@@iterator';\n    }\n    return Symbol.iterator;\n}\nexport var iterator = /*@__PURE__*/ getSymbolIterator();\n/**\n * @deprecated use {@link iterator} instead\n */\nexport var $$iterator = iterator;\n//# sourceMappingURL=iterator.js.map\n","/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport var subscribeToIterable = function (iterable) {\n    return function (subscriber) {\n        var iterator = iterable[Symbol_iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                subscriber.complete();\n                break;\n            }\n            subscriber.next(item.value);\n            if (subscriber.closed) {\n                break;\n            }\n        } while (true);\n        // Finalize the iterator if it happens to be a Generator\n        if (typeof iterator.return === 'function') {\n            subscriber.add(function () {\n                if (iterator.return) {\n                    iterator.return();\n                }\n            });\n        }\n        return subscriber;\n    };\n};\n//# sourceMappingURL=subscribeToIterable.js.map\n","/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */\nimport { observable as Symbol_observable } from '../symbol/observable';\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n */\nexport var subscribeToObservable = function (obj) {\n    return function (subscriber) {\n        var obs = obj[Symbol_observable]();\n        if (typeof obs.subscribe !== 'function') {\n            // Should be caught by observable subscribe function error handling.\n            throw new TypeError('Provided object does not correctly implement Symbol.observable');\n        }\n        else {\n            return obs.subscribe(subscriber);\n        }\n    };\n};\n//# sourceMappingURL=subscribeToObservable.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });\n//# sourceMappingURL=isArrayLike.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map\n","/** PURE_IMPORTS_START _Observable,_subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeTo = function (result) {\n    if (result instanceof Observable) {\n        return function (subscriber) {\n            if (result._isScalar) {\n                subscriber.next(result.value);\n                subscriber.complete();\n                return undefined;\n            }\n            else {\n                return result.subscribe(subscriber);\n            }\n        };\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else if (result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else {\n        var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = \"You provided \" + value + \" where a stream was expected.\"\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map\n","/** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo PURE_IMPORTS_END */\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeTo } from './subscribeTo';\nexport function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    return subscribeTo(result)(destination);\n}\n//# sourceMappingURL=subscribeToResult.js.map\n","/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nvar AuditOperator = /*@__PURE__*/ (function () {\n    function AuditOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    AuditOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    };\n    return AuditOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AuditSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AuditSubscriber, _super);\n    function AuditSubscriber(destination, durationSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.durationSelector = durationSelector;\n        _this.hasValue = false;\n        return _this;\n    }\n    AuditSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            var duration = tryCatch(this.durationSelector)(value);\n            if (duration === errorObject) {\n                this.destination.error(errorObject.e);\n            }\n            else {\n                var innerSubscription = subscribeToResult(this, duration);\n                if (!innerSubscription || innerSubscription.closed) {\n                    this.clearThrottle();\n                }\n                else {\n                    this.add(this.throttled = innerSubscription);\n                }\n            }\n        }\n    };\n    AuditSubscriber.prototype.clearThrottle = function () {\n        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = null;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    };\n    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        this.clearThrottle();\n    };\n    AuditSubscriber.prototype.notifyComplete = function () {\n        this.clearThrottle();\n    };\n    return AuditSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=audit.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Action, _super);\n    function Action(scheduler, work) {\n        return _super.call(this) || this;\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return this;\n    };\n    return Action;\n}(Subscription));\nexport { Action };\n//# sourceMappingURL=Action.js.map\n","/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Action } from './Action';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        _this.pending = false;\n        return _this;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action));\nexport { AsyncAction };\n//# sourceMappingURL=AsyncAction.js.map\n","/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}\n */\nvar Scheduler = /*@__PURE__*/ (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) {\n            now = Scheduler.now;\n        }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    /** @nocollapse */\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexport { Scheduler };\n//# sourceMappingURL=Scheduler.js.map\n","/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Scheduler } from '../Scheduler';\nvar AsyncScheduler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsyncScheduler, _super);\n    function AsyncScheduler(SchedulerAction, now) {\n        if (now === void 0) {\n            now = Scheduler.now;\n        }\n        var _this = _super.call(this, SchedulerAction, function () {\n            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {\n                return AsyncScheduler.delegate.now();\n            }\n            else {\n                return now();\n            }\n        }) || this;\n        _this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         * @deprecated internal use only\n         */\n        _this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         * @deprecated internal use only\n         */\n        _this.scheduled = undefined;\n        return _this;\n    }\n    AsyncScheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n            return AsyncScheduler.delegate.schedule(work, delay, state);\n        }\n        else {\n            return _super.prototype.schedule.call(this, work, delay, state);\n        }\n    };\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler));\nexport { AsyncScheduler };\n//# sourceMappingURL=AsyncScheduler.js.map\n","/** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */\nimport { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexport var async = /*@__PURE__*/ new AsyncScheduler(AsyncAction);\n//# sourceMappingURL=async.js.map\n","/** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */\nimport { isArray } from './isArray';\nexport function isNumeric(val) {\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    // adding 1 corrects loss of precision from parseFloat (#15100)\n    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\n//# sourceMappingURL=isNumeric.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer(closingNotifier) {\n    return function bufferOperatorFunction(source) {\n        return source.lift(new BufferOperator(closingNotifier));\n    };\n}\nvar BufferOperator = /*@__PURE__*/ (function () {\n    function BufferOperator(closingNotifier) {\n        this.closingNotifier = closingNotifier;\n    }\n    BufferOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n    };\n    return BufferOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferSubscriber, _super);\n    function BufferSubscriber(destination, closingNotifier) {\n        var _this = _super.call(this, destination) || this;\n        _this.buffer = [];\n        _this.add(subscribeToResult(_this, closingNotifier));\n        return _this;\n    }\n    BufferSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var buffer = this.buffer;\n        this.buffer = [];\n        this.destination.next(buffer);\n    };\n    return BufferSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=buffer.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) {\n        startBufferEvery = null;\n    }\n    return function bufferCountOperatorFunction(source) {\n        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n    };\n}\nvar BufferCountOperator = /*@__PURE__*/ (function () {\n    function BufferCountOperator(bufferSize, startBufferEvery) {\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        if (!startBufferEvery || bufferSize === startBufferEvery) {\n            this.subscriberClass = BufferCountSubscriber;\n        }\n        else {\n            this.subscriberClass = BufferSkipCountSubscriber;\n        }\n    }\n    BufferCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n    };\n    return BufferCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferCountSubscriber, _super);\n    function BufferCountSubscriber(destination, bufferSize) {\n        var _this = _super.call(this, destination) || this;\n        _this.bufferSize = bufferSize;\n        _this.buffer = [];\n        return _this;\n    }\n    BufferCountSubscriber.prototype._next = function (value) {\n        var buffer = this.buffer;\n        buffer.push(value);\n        if (buffer.length == this.bufferSize) {\n            this.destination.next(buffer);\n            this.buffer = [];\n        }\n    };\n    BufferCountSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer.length > 0) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferCountSubscriber;\n}(Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSkipCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferSkipCountSubscriber, _super);\n    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {\n        var _this = _super.call(this, destination) || this;\n        _this.bufferSize = bufferSize;\n        _this.startBufferEvery = startBufferEvery;\n        _this.buffers = [];\n        _this.count = 0;\n        return _this;\n    }\n    BufferSkipCountSubscriber.prototype._next = function (value) {\n        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;\n        this.count++;\n        if (count % startBufferEvery === 0) {\n            buffers.push([]);\n        }\n        for (var i = buffers.length; i--;) {\n            var buffer = buffers[i];\n            buffer.push(value);\n            if (buffer.length === bufferSize) {\n                buffers.splice(i, 1);\n                this.destination.next(buffer);\n            }\n        }\n    };\n    BufferSkipCountSubscriber.prototype._complete = function () {\n        var _a = this, buffers = _a.buffers, destination = _a.destination;\n        while (buffers.length > 0) {\n            var buffer = buffers.shift();\n            if (buffer.length > 0) {\n                destination.next(buffer);\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferSkipCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=bufferCount.js.map\n","/** PURE_IMPORTS_START tslib,_scheduler_async,_Subscriber,_util_isScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async;\n    if (isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return function bufferTimeOperatorFunction(source) {\n        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n    };\n}\nvar BufferTimeOperator = /*@__PURE__*/ (function () {\n    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n    }\n    BufferTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n    };\n    return BufferTimeOperator;\n}());\nvar Context = /*@__PURE__*/ (function () {\n    function Context() {\n        this.buffer = [];\n    }\n    return Context;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferTimeSubscriber, _super);\n    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.bufferTimeSpan = bufferTimeSpan;\n        _this.bufferCreationInterval = bufferCreationInterval;\n        _this.maxBufferSize = maxBufferSize;\n        _this.scheduler = scheduler;\n        _this.contexts = [];\n        var context = _this.openContext();\n        _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n        if (_this.timespanOnly) {\n            var timeSpanOnlyState = { subscriber: _this, context: context, bufferTimeSpan: bufferTimeSpan };\n            _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n        else {\n            var closeState = { subscriber: _this, context: context };\n            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: _this, scheduler: scheduler };\n            _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n            _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n        }\n        return _this;\n    }\n    BufferTimeSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        var filledBufferContext;\n        for (var i = 0; i < len; i++) {\n            var context_1 = contexts[i];\n            var buffer = context_1.buffer;\n            buffer.push(value);\n            if (buffer.length == this.maxBufferSize) {\n                filledBufferContext = context_1;\n            }\n        }\n        if (filledBufferContext) {\n            this.onBufferFull(filledBufferContext);\n        }\n    };\n    BufferTimeSubscriber.prototype._error = function (err) {\n        this.contexts.length = 0;\n        _super.prototype._error.call(this, err);\n    };\n    BufferTimeSubscriber.prototype._complete = function () {\n        var _a = this, contexts = _a.contexts, destination = _a.destination;\n        while (contexts.length > 0) {\n            var context_2 = contexts.shift();\n            destination.next(context_2.buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    BufferTimeSubscriber.prototype._unsubscribe = function () {\n        this.contexts = null;\n    };\n    BufferTimeSubscriber.prototype.onBufferFull = function (context) {\n        this.closeContext(context);\n        var closeAction = context.closeAction;\n        closeAction.unsubscribe();\n        this.remove(closeAction);\n        if (!this.closed && this.timespanOnly) {\n            context = this.openContext();\n            var bufferTimeSpan = this.bufferTimeSpan;\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n    };\n    BufferTimeSubscriber.prototype.openContext = function () {\n        var context = new Context();\n        this.contexts.push(context);\n        return context;\n    };\n    BufferTimeSubscriber.prototype.closeContext = function (context) {\n        this.destination.next(context.buffer);\n        var contexts = this.contexts;\n        var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n        if (spliceIndex >= 0) {\n            contexts.splice(contexts.indexOf(context), 1);\n        }\n    };\n    return BufferTimeSubscriber;\n}(Subscriber));\nfunction dispatchBufferTimeSpanOnly(state) {\n    var subscriber = state.subscriber;\n    var prevContext = state.context;\n    if (prevContext) {\n        subscriber.closeContext(prevContext);\n    }\n    if (!subscriber.closed) {\n        state.context = subscriber.openContext();\n        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n    }\n}\nfunction dispatchBufferCreation(state) {\n    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;\n    var context = subscriber.openContext();\n    var action = this;\n    if (!subscriber.closed) {\n        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));\n        action.schedule(state, bufferCreationInterval);\n    }\n}\nfunction dispatchBufferClose(arg) {\n    var subscriber = arg.subscriber, context = arg.context;\n    subscriber.closeContext(context);\n}\n//# sourceMappingURL=bufferTime.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle(openings, closingSelector) {\n    return function bufferToggleOperatorFunction(source) {\n        return source.lift(new BufferToggleOperator(openings, closingSelector));\n    };\n}\nvar BufferToggleOperator = /*@__PURE__*/ (function () {\n    function BufferToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    BufferToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return BufferToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferToggleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferToggleSubscriber, _super);\n    function BufferToggleSubscriber(destination, openings, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.openings = openings;\n        _this.closingSelector = closingSelector;\n        _this.contexts = [];\n        _this.add(subscribeToResult(_this, openings));\n        return _this;\n    }\n    BufferToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        for (var i = 0; i < len; i++) {\n            contexts[i].buffer.push(value);\n        }\n    };\n    BufferToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context_1 = contexts.shift();\n            context_1.subscription.unsubscribe();\n            context_1.buffer = null;\n            context_1.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._error.call(this, err);\n    };\n    BufferToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context_2 = contexts.shift();\n            this.destination.next(context_2.buffer);\n            context_2.subscription.unsubscribe();\n            context_2.buffer = null;\n            context_2.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._complete.call(this);\n    };\n    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n    };\n    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.closeBuffer(innerSub.context);\n    };\n    BufferToggleSubscriber.prototype.openBuffer = function (value) {\n        try {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = closingSelector.call(this, value);\n            if (closingNotifier) {\n                this.trySubscribe(closingNotifier);\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n        var contexts = this.contexts;\n        if (contexts && context) {\n            var buffer = context.buffer, subscription = context.subscription;\n            this.destination.next(buffer);\n            contexts.splice(contexts.indexOf(context), 1);\n            this.remove(subscription);\n            subscription.unsubscribe();\n        }\n    };\n    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n        var contexts = this.contexts;\n        var buffer = [];\n        var subscription = new Subscription();\n        var context = { buffer: buffer, subscription: subscription };\n        contexts.push(context);\n        var innerSubscription = subscribeToResult(this, closingNotifier, context);\n        if (!innerSubscription || innerSubscription.closed) {\n            this.closeBuffer(context);\n        }\n        else {\n            innerSubscription.context = context;\n            this.add(innerSubscription);\n            subscription.add(innerSubscription);\n        }\n    };\n    return BufferToggleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=bufferToggle.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen(closingSelector) {\n    return function (source) {\n        return source.lift(new BufferWhenOperator(closingSelector));\n    };\n}\nvar BufferWhenOperator = /*@__PURE__*/ (function () {\n    function BufferWhenOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    BufferWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    };\n    return BufferWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferWhenSubscriber, _super);\n    function BufferWhenSubscriber(destination, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.closingSelector = closingSelector;\n        _this.subscribing = false;\n        _this.openBuffer();\n        return _this;\n    }\n    BufferWhenSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferWhenSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    BufferWhenSubscriber.prototype._unsubscribe = function () {\n        this.buffer = null;\n        this.subscribing = false;\n    };\n    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openBuffer();\n    };\n    BufferWhenSubscriber.prototype.notifyComplete = function () {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    };\n    BufferWhenSubscriber.prototype.openBuffer = function () {\n        var closingSubscription = this.closingSubscription;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        var buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        var closingNotifier = tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject) {\n            this.error(errorObject.e);\n        }\n        else {\n            closingSubscription = new Subscription();\n            this.closingSubscription = closingSubscription;\n            this.add(closingSubscription);\n            this.subscribing = true;\n            closingSubscription.add(subscribeToResult(this, closingNotifier));\n            this.subscribing = false;\n        }\n    };\n    return BufferWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=bufferWhen.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function catchError(selector) {\n    return function catchErrorOperatorFunction(source) {\n        var operator = new CatchOperator(selector);\n        var caught = source.lift(operator);\n        return (operator.caught = caught);\n    };\n}\nvar CatchOperator = /*@__PURE__*/ (function () {\n    function CatchOperator(selector) {\n        this.selector = selector;\n    }\n    CatchOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n    };\n    return CatchOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CatchSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CatchSubscriber, _super);\n    function CatchSubscriber(destination, selector, caught) {\n        var _this = _super.call(this, destination) || this;\n        _this.selector = selector;\n        _this.caught = caught;\n        return _this;\n    }\n    // NOTE: overriding `error` instead of `_error` because we don't want\n    // to have this flag this subscriber as `isStopped`. We can mimic the\n    // behavior of the RetrySubscriber (from the `retry` operator), where\n    // we unsubscribe from our source chain, reset our Subscriber flags,\n    // then subscribe to the selector result.\n    CatchSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var result = void 0;\n            try {\n                result = this.selector(err, this.caught);\n            }\n            catch (err2) {\n                _super.prototype.error.call(this, err2);\n                return;\n            }\n            this._unsubscribeAndRecycle();\n            this.add(subscribeToResult(this, result));\n        }\n    };\n    return CatchSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=catchError.js.map\n","/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\nexport function fromArray(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToArray(input));\n    }\n    else {\n        return new Observable(function (subscriber) {\n            var sub = new Subscription();\n            var i = 0;\n            sub.add(scheduler.schedule(function () {\n                if (i === input.length) {\n                    subscriber.complete();\n                    return;\n                }\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    sub.add(this.schedule());\n                }\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromArray.js.map\n","/** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { fromArray } from './fromArray';\nvar NONE = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n */\nexport function combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var resultSelector = null;\n    var scheduler = null;\n    if (isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        resultSelector = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], resultSelector)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));\n}\nvar CombineLatestOperator = /*@__PURE__*/ (function () {\n    function CombineLatestOperator(resultSelector) {\n        this.resultSelector = resultSelector;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));\n    };\n    return CombineLatestOperator;\n}());\nexport { CombineLatestOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, resultSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.resultSelector = resultSelector;\n        _this.active = 0;\n        _this.values = [];\n        _this.observables = [];\n        return _this;\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(NONE);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond\n            ? 0\n            : oldVal === NONE ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.resultSelector) {\n                this._tryResultSelector(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryResultSelector = function (values) {\n        var result;\n        try {\n            result = this.resultSelector.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber));\nexport { CombineLatestSubscriber };\n//# sourceMappingURL=combineLatest.js.map\n","/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * {@link Scheduler}. It is preferrable to use this over `empty()`.\n */\nexport var EMPTY = /*@__PURE__*/ new Observable(function (subscriber) { return subscriber.complete(); });\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.\n * </span>\n *\n * <img src=\"./img/empty.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * @example <caption>Emit the number 7, then complete.</caption>\n * var result = Rx.Observable.empty().startWith(7);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n * var interval = Rx.Observable.interval(1000);\n * var result = interval.mergeMap(x =>\n *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval eg(0,1,2,3,...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1 print abc\n * // if x % 2 is not equal to 1 nothing will be output\n *\n * @see {@link create}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throw}\n *\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the complete notification.\n * @return {Observable} An \"empty\" Observable: emits only the complete\n * notification.\n * @static true\n * @name empty\n * @owner Observable\n * @deprecated Deprecated in favor of using EMPTY constant.\n */\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nexport function emptyScheduled(scheduler) {\n    return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });\n}\n//# sourceMappingURL=empty.js.map\n","/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nexport function scalar(value) {\n    var result = new Observable(function (subscriber) {\n        subscriber.next(value);\n        subscriber.complete();\n    });\n    result._isScalar = true;\n    result.value = value;\n    return result;\n}\n//# sourceMappingURL=scalar.js.map\n","/** PURE_IMPORTS_START _util_isScheduler,_fromArray,_empty,_scalar PURE_IMPORTS_END */\nimport { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { empty } from './empty';\nimport { scalar } from './scalar';\nexport function of() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var scheduler = args[args.length - 1];\n    if (isScheduler(scheduler)) {\n        args.pop();\n    }\n    else {\n        scheduler = undefined;\n    }\n    switch (args.length) {\n        case 0:\n            return empty(scheduler);\n        case 1:\n            return scheduler ? fromArray(args, scheduler) : scalar(args[0]);\n        default:\n            return fromArray(args, scheduler);\n    }\n}\n//# sourceMappingURL=of.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nvar MapOperator = /*@__PURE__*/ (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\nexport { MapOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.count = 0;\n        _this.thisArg = thisArg || _this;\n        return _this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber));\n//# sourceMappingURL=map.js.map\n","/** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_map,_observable_from PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { map } from './map';\nimport { from } from '../observable/from';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    if (typeof resultSelector === 'function') {\n        // DEPRECATED PATH\n        return function (source) { return source.pipe(mergeMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };\n}\nvar MergeMapOperator = /*@__PURE__*/ (function () {\n    function MergeMapOperator(project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexport { MergeMapOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber));\nexport { MergeMapSubscriber };\n//# sourceMappingURL=mergeMap.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count(predicate) {\n    return function (source) { return source.lift(new CountOperator(predicate, source)); };\n}\nvar CountOperator = /*@__PURE__*/ (function () {\n    function CountOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    CountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    };\n    return CountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CountSubscriber, _super);\n    function CountSubscriber(destination, predicate, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.count = 0;\n        _this.index = 0;\n        return _this;\n    }\n    CountSubscriber.prototype._next = function (value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._tryPredicate = function (value) {\n        var result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._complete = function () {\n        this.destination.next(this.count);\n        this.destination.complete();\n    };\n    return CountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=count.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce(durationSelector) {\n    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };\n}\nvar DebounceOperator = /*@__PURE__*/ (function () {\n    function DebounceOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    DebounceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n    };\n    return DebounceOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DebounceSubscriber, _super);\n    function DebounceSubscriber(destination, durationSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.durationSelector = durationSelector;\n        _this.hasValue = false;\n        _this.durationSubscription = null;\n        return _this;\n    }\n    DebounceSubscriber.prototype._next = function (value) {\n        try {\n            var result = this.durationSelector.call(this, value);\n            if (result) {\n                this._tryNext(value, result);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DebounceSubscriber.prototype._complete = function () {\n        this.emitValue();\n        this.destination.complete();\n    };\n    DebounceSubscriber.prototype._tryNext = function (value, duration) {\n        var subscription = this.durationSubscription;\n        this.value = value;\n        this.hasValue = true;\n        if (subscription) {\n            subscription.unsubscribe();\n            this.remove(subscription);\n        }\n        subscription = subscribeToResult(this, duration);\n        if (subscription && !subscription.closed) {\n            this.add(this.durationSubscription = subscription);\n        }\n    };\n    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            var value = this.value;\n            var subscription = this.durationSubscription;\n            if (subscription) {\n                this.durationSubscription = null;\n                subscription.unsubscribe();\n                this.remove(subscription);\n            }\n            // This must be done *before* passing the value\n            // along to the destination because it's possible for\n            // the value to synchronously re-enter this operator\n            // recursively if the duration selector Observable\n            // emits synchronously\n            this.value = null;\n            this.hasValue = false;\n            _super.prototype._next.call(this, value);\n        }\n    };\n    return DebounceSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=debounce.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };\n}\nvar DebounceTimeOperator = /*@__PURE__*/ (function () {\n    function DebounceTimeOperator(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    DebounceTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    };\n    return DebounceTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DebounceTimeSubscriber, _super);\n    function DebounceTimeSubscriber(destination, dueTime, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.dueTime = dueTime;\n        _this.scheduler = scheduler;\n        _this.debouncedSubscription = null;\n        _this.lastValue = null;\n        _this.hasValue = false;\n        return _this;\n    }\n    DebounceTimeSubscriber.prototype._next = function (value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    };\n    DebounceTimeSubscriber.prototype._complete = function () {\n        this.debouncedNext();\n        this.destination.complete();\n    };\n    DebounceTimeSubscriber.prototype.debouncedNext = function () {\n        this.clearDebounce();\n        if (this.hasValue) {\n            var lastValue = this.lastValue;\n            // This must be done *before* passing the value\n            // along to the destination because it's possible for\n            // the value to synchronously re-enter this operator\n            // recursively when scheduled with things like\n            // VirtualScheduler/TestScheduler.\n            this.lastValue = null;\n            this.hasValue = false;\n            this.destination.next(lastValue);\n        }\n    };\n    DebounceTimeSubscriber.prototype.clearDebounce = function () {\n        var debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    };\n    return DebounceTimeSubscriber;\n}(Subscriber));\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n//# sourceMappingURL=debounceTime.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) {\n        defaultValue = null;\n    }\n    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };\n}\nvar DefaultIfEmptyOperator = /*@__PURE__*/ (function () {\n    function DefaultIfEmptyOperator(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n    };\n    return DefaultIfEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DefaultIfEmptySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DefaultIfEmptySubscriber, _super);\n    function DefaultIfEmptySubscriber(destination, defaultValue) {\n        var _this = _super.call(this, destination) || this;\n        _this.defaultValue = defaultValue;\n        _this.isEmpty = true;\n        return _this;\n    }\n    DefaultIfEmptySubscriber.prototype._next = function (value) {\n        this.isEmpty = false;\n        this.destination.next(value);\n    };\n    DefaultIfEmptySubscriber.prototype._complete = function () {\n        if (this.isEmpty) {\n            this.destination.next(this.defaultValue);\n        }\n        this.destination.complete();\n    };\n    return DefaultIfEmptySubscriber;\n}(Subscriber));\n//# sourceMappingURL=defaultIfEmpty.js.map\n","/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits an error notification.\n *\n * <span class=\"informal\">Just emits 'error', and nothing else.\n * </span>\n *\n * <img src=\"./img/throw.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the error notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * @example <caption>Emit the number 7, then emit an error.</caption>\n * import { throwError, concat, of } from 'rxjs/create';\n *\n * const result = concat(of(7), throwError(new Error('oops!')));\n * result.subscribe(x => console.log(x), e => console.error(e));\n *\n * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n * import { throwError, interval, of } from 'rxjs/create';\n * import { mergeMap } from 'rxjs/operators';\n *\n * interval(1000).pipe(\n *   mergeMap(x => x === 13 ?\n *     throwError('Thirteens are bad') :\n *     of('a', 'b', 'c')\n *   )\n * ).subscribe(x => console.log(x), e => console.error(e));\n *\n * @see {@link create}\n * @see {@link empty}\n * @see {@link never}\n * @see {@link of}\n *\n * @param {any} error The particular Error to pass to the error notification.\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the error notification.\n * @return {Observable} An error Observable: emits only the error notification\n * using the given error argument.\n * @static true\n * @name throw\n * @owner Observable\n */\nexport function throwError(error, scheduler) {\n    if (!scheduler) {\n        return new Observable(function (subscriber) { return subscriber.error(error); });\n    }\n    else {\n        return new Observable(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });\n    }\n}\nfunction dispatch(_a) {\n    var error = _a.error, subscriber = _a.subscriber;\n    subscriber.error(error);\n}\n//# sourceMappingURL=throwError.js.map\n","/** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */\nimport { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification = /*@__PURE__*/ (function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return of(this.value);\n            case 'E':\n                return throwError(this.error);\n            case 'C':\n                return empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     * @nocollapse\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     * @nocollapse\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     * @nocollapse\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\nexport { Notification };\n//# sourceMappingURL=Notification.js.map\n","/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_Subscriber,_Notification PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay(delay, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    var absoluteDelay = isDate(delay);\n    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };\n}\nvar DelayOperator = /*@__PURE__*/ (function () {\n    function DelayOperator(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    DelayOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    };\n    return DelayOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelaySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DelaySubscriber, _super);\n    function DelaySubscriber(destination, delay, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.delay = delay;\n        _this.scheduler = scheduler;\n        _this.queue = [];\n        _this.active = false;\n        _this.errored = false;\n        return _this;\n    }\n    DelaySubscriber.dispatch = function (state) {\n        var source = state.source;\n        var queue = source.queue;\n        var scheduler = state.scheduler;\n        var destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            var delay_1 = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay_1);\n        }\n        else {\n            this.unsubscribe();\n            source.active = false;\n        }\n    };\n    DelaySubscriber.prototype._schedule = function (scheduler) {\n        this.active = true;\n        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    };\n    DelaySubscriber.prototype.scheduleNotification = function (notification) {\n        if (this.errored === true) {\n            return;\n        }\n        var scheduler = this.scheduler;\n        var message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    };\n    DelaySubscriber.prototype._next = function (value) {\n        this.scheduleNotification(Notification.createNext(value));\n    };\n    DelaySubscriber.prototype._error = function (err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n    };\n    DelaySubscriber.prototype._complete = function () {\n        this.scheduleNotification(Notification.createComplete());\n    };\n    return DelaySubscriber;\n}(Subscriber));\nvar DelayMessage = /*@__PURE__*/ (function () {\n    function DelayMessage(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n    return DelayMessage;\n}());\n//# sourceMappingURL=delay.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return function (source) {\n            return new SubscriptionDelayObservable(source, subscriptionDelay)\n                .lift(new DelayWhenOperator(delayDurationSelector));\n        };\n    }\n    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };\n}\nvar DelayWhenOperator = /*@__PURE__*/ (function () {\n    function DelayWhenOperator(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    DelayWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    };\n    return DelayWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelayWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DelayWhenSubscriber, _super);\n    function DelayWhenSubscriber(destination, delayDurationSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.delayDurationSelector = delayDurationSelector;\n        _this.completed = false;\n        _this.delayNotifierSubscriptions = [];\n        _this.values = [];\n        return _this;\n    }\n    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        var value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype._next = function (value) {\n        try {\n            var delayNotifier = this.delayDurationSelector(value);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DelayWhenSubscriber.prototype._complete = function () {\n        this.completed = true;\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n        subscription.unsubscribe();\n        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        var value = null;\n        if (subscriptionIdx !== -1) {\n            value = this.values[subscriptionIdx];\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n            this.values.splice(subscriptionIdx, 1);\n        }\n        return value;\n    };\n    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n        var notifierSubscription = subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            this.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n        this.values.push(value);\n    };\n    DelayWhenSubscriber.prototype.tryComplete = function () {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    };\n    return DelayWhenSubscriber;\n}(OuterSubscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelayObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubscriptionDelayObservable, _super);\n    function SubscriptionDelayObservable(source, subscriptionDelay) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subscriptionDelay = subscriptionDelay;\n        return _this;\n    }\n    /** @deprecated This is an internal implementation detail, do not use. */\n    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    };\n    return SubscriptionDelayObservable;\n}(Observable));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelaySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubscriptionDelaySubscriber, _super);\n    function SubscriptionDelaySubscriber(parent, source) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        _this.source = source;\n        _this.sourceSubscribed = false;\n        return _this;\n    }\n    SubscriptionDelaySubscriber.prototype._next = function (unused) {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype._error = function (err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    };\n    SubscriptionDelaySubscriber.prototype._complete = function () {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    };\n    return SubscriptionDelaySubscriber;\n}(Subscriber));\n//# sourceMappingURL=delayWhen.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize() {\n    return function dematerializeOperatorFunction(source) {\n        return source.lift(new DeMaterializeOperator());\n    };\n}\nvar DeMaterializeOperator = /*@__PURE__*/ (function () {\n    function DeMaterializeOperator() {\n    }\n    DeMaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DeMaterializeSubscriber(subscriber));\n    };\n    return DeMaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DeMaterializeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DeMaterializeSubscriber, _super);\n    function DeMaterializeSubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    DeMaterializeSubscriber.prototype._next = function (value) {\n        value.observe(this.destination);\n    };\n    return DeMaterializeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=dematerialize.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct(keySelector, flushes) {\n    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };\n}\nvar DistinctOperator = /*@__PURE__*/ (function () {\n    function DistinctOperator(keySelector, flushes) {\n        this.keySelector = keySelector;\n        this.flushes = flushes;\n    }\n    DistinctOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n    };\n    return DistinctOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DistinctSubscriber, _super);\n    function DistinctSubscriber(destination, keySelector, flushes) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.values = new Set();\n        if (flushes) {\n            _this.add(subscribeToResult(_this, flushes));\n        }\n        return _this;\n    }\n    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values.clear();\n    };\n    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DistinctSubscriber.prototype._next = function (value) {\n        if (this.keySelector) {\n            this._useKeySelector(value);\n        }\n        else {\n            this._finalizeNext(value, value);\n        }\n    };\n    DistinctSubscriber.prototype._useKeySelector = function (value) {\n        var key;\n        var destination = this.destination;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this._finalizeNext(key, value);\n    };\n    DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n        var values = this.values;\n        if (!values.has(key)) {\n            values.add(key);\n            this.destination.next(value);\n        }\n    };\n    return DistinctSubscriber;\n}(OuterSubscriber));\nexport { DistinctSubscriber };\n//# sourceMappingURL=distinct.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged(compare, keySelector) {\n    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };\n}\nvar DistinctUntilChangedOperator = /*@__PURE__*/ (function () {\n    function DistinctUntilChangedOperator(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    };\n    return DistinctUntilChangedOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DistinctUntilChangedSubscriber, _super);\n    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.hasKey = false;\n        if (typeof compare === 'function') {\n            _this.compare = compare;\n        }\n        return _this;\n    }\n    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n        return x === y;\n    };\n    DistinctUntilChangedSubscriber.prototype._next = function (value) {\n        var keySelector = this.keySelector;\n        var key = value;\n        if (keySelector) {\n            key = tryCatch(this.keySelector)(value);\n            if (key === errorObject) {\n                return this.destination.error(errorObject.e);\n            }\n        }\n        var result = false;\n        if (this.hasKey) {\n            result = tryCatch(this.compare)(this.key, key);\n            if (result === errorObject) {\n                return this.destination.error(errorObject.e);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (Boolean(result) === false) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    };\n    return DistinctUntilChangedSubscriber;\n}(Subscriber));\n//# sourceMappingURL=distinctUntilChanged.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nvar ArgumentOutOfRangeError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ArgumentOutOfRangeError, _super);\n    function ArgumentOutOfRangeError() {\n        var _this = _super.call(this, 'argument out of range') || this;\n        _this.name = 'ArgumentOutOfRangeError';\n        Object.setPrototypeOf(_this, ArgumentOutOfRangeError.prototype);\n        return _this;\n    }\n    return ArgumentOutOfRangeError;\n}(Error));\nexport { ArgumentOutOfRangeError };\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nvar FilterOperator = /*@__PURE__*/ (function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.thisArg = thisArg;\n        _this.count = 0;\n        return _this;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber));\n//# sourceMappingURL=filter.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { isFunction } from '../util/isFunction';\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nvar DoOperator = /*@__PURE__*/ (function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TapSubscriber, _super);\n    function TapSubscriber(destination, observerOrNext, error, complete) {\n        var _this = _super.call(this, destination) || this;\n        _this._tapNext = noop;\n        _this._tapError = noop;\n        _this._tapComplete = noop;\n        _this._tapError = error || noop;\n        _this._tapComplete = complete || noop;\n        if (isFunction(observerOrNext)) {\n            _this._context = _this;\n            _this._tapNext = observerOrNext;\n        }\n        else if (observerOrNext) {\n            _this._context = observerOrNext;\n            _this._tapNext = observerOrNext.next || noop;\n            _this._tapError = observerOrNext.error || noop;\n            _this._tapComplete = observerOrNext.complete || noop;\n        }\n        return _this;\n    }\n    TapSubscriber.prototype._next = function (value) {\n        try {\n            this._tapNext.call(this._context, value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(value);\n    };\n    TapSubscriber.prototype._error = function (err) {\n        try {\n            this._tapError.call(this._context, err);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.error(err);\n    };\n    TapSubscriber.prototype._complete = function () {\n        try {\n            this._tapComplete.call(this._context);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        return this.destination.complete();\n    };\n    return TapSubscriber;\n}(Subscriber));\n//# sourceMappingURL=tap.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nvar EmptyError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(EmptyError, _super);\n    function EmptyError() {\n        var _this = _super.call(this, 'no elements in sequence') || this;\n        _this.name = 'EmptyError';\n        Object.setPrototypeOf(_this, EmptyError.prototype);\n        return _this;\n    }\n    return EmptyError;\n}(Error));\nexport { EmptyError };\n//# sourceMappingURL=EmptyError.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take(count) {\n    return function (source) {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nvar TakeOperator = /*@__PURE__*/ (function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.count = 0;\n        return _this;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        var count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=take.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every(predicate, thisArg) {\n    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };\n}\nvar EveryOperator = /*@__PURE__*/ (function () {\n    function EveryOperator(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    EveryOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n    };\n    return EveryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar EverySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(EverySubscriber, _super);\n    function EverySubscriber(destination, predicate, thisArg, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.thisArg = thisArg;\n        _this.source = source;\n        _this.index = 0;\n        _this.thisArg = thisArg || _this;\n        return _this;\n    }\n    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n        this.destination.next(everyValueMatch);\n        this.destination.complete();\n    };\n    EverySubscriber.prototype._next = function (value) {\n        var result = false;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (!result) {\n            this.notifyComplete(false);\n        }\n    };\n    EverySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return EverySubscriber;\n}(Subscriber));\n//# sourceMappingURL=every.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust() {\n    return function (source) { return source.lift(new SwitchFirstOperator()); };\n}\nvar SwitchFirstOperator = /*@__PURE__*/ (function () {\n    function SwitchFirstOperator() {\n    }\n    SwitchFirstOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstSubscriber(subscriber));\n    };\n    return SwitchFirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SwitchFirstSubscriber, _super);\n    function SwitchFirstSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasCompleted = false;\n        _this.hasSubscription = false;\n        return _this;\n    }\n    SwitchFirstSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.hasSubscription = true;\n            this.add(subscribeToResult(this, value));\n        }\n    };\n    SwitchFirstSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=exhaust.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { map } from './map';\nimport { from } from '../observable/from';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap(project, resultSelector) {\n    if (resultSelector) {\n        // DEPRECATED PATH\n        return function (source) { return source.pipe(exhaustMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };\n    }\n    return function (source) {\n        return source.lift(new ExhauseMapOperator(project));\n    };\n}\nvar ExhauseMapOperator = /*@__PURE__*/ (function () {\n    function ExhauseMapOperator(project) {\n        this.project = project;\n    }\n    ExhauseMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));\n    };\n    return ExhauseMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ExhaustMapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ExhaustMapSubscriber, _super);\n    function ExhaustMapSubscriber(destination, project) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.hasSubscription = false;\n        _this.hasCompleted = false;\n        _this.index = 0;\n        return _this;\n    }\n    ExhaustMapSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.tryNext(value);\n        }\n    };\n    ExhaustMapSubscriber.prototype.tryNext = function (value) {\n        var index = this.index++;\n        var destination = this.destination;\n        try {\n            var result = this.project(value, index);\n            this.hasSubscription = true;\n            this.add(subscribeToResult(this, result, value, index));\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    ExhaustMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    ExhaustMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    ExhaustMapSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    ExhaustMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return ExhaustMapSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=exhaustMap.js.map\n","/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    if (scheduler === void 0) {\n        scheduler = undefined;\n    }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };\n}\nvar ExpandOperator = /*@__PURE__*/ (function () {\n    function ExpandOperator(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    ExpandOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    };\n    return ExpandOperator;\n}());\nexport { ExpandOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ExpandSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ExpandSubscriber, _super);\n    function ExpandSubscriber(destination, project, concurrent, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.scheduler = scheduler;\n        _this.index = 0;\n        _this.active = 0;\n        _this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            _this.buffer = [];\n        }\n        return _this;\n    }\n    ExpandSubscriber.dispatch = function (arg) {\n        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\n        subscriber.subscribeToProjection(result, value, index);\n    };\n    ExpandSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        var index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            var result = tryCatch(this.project)(value, index);\n            if (result === errorObject) {\n                destination.error(errorObject.e);\n            }\n            else if (!this.scheduler) {\n                this.subscribeToProjection(result, value, index);\n            }\n            else {\n                var state = { subscriber: this, result: result, value: value, index: index };\n                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n        this.active++;\n        this.add(subscribeToResult(this, result, value, index));\n    };\n    ExpandSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._next(innerValue);\n    };\n    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    return ExpandSubscriber;\n}(OuterSubscriber));\nexport { ExpandSubscriber };\n//# sourceMappingURL=expand.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize(callback) {\n    return function (source) { return source.lift(new FinallyOperator(callback)); };\n}\nvar FinallyOperator = /*@__PURE__*/ (function () {\n    function FinallyOperator(callback) {\n        this.callback = callback;\n    }\n    FinallyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n    };\n    return FinallyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FinallySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(FinallySubscriber, _super);\n    function FinallySubscriber(destination, callback) {\n        var _this = _super.call(this, destination) || this;\n        _this.add(new Subscription(callback));\n        return _this;\n    }\n    return FinallySubscriber;\n}(Subscriber));\n//# sourceMappingURL=finalize.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find(predicate, thisArg) {\n    if (typeof predicate !== 'function') {\n        throw new TypeError('predicate is not a function');\n    }\n    return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };\n}\nvar FindValueOperator = /*@__PURE__*/ (function () {\n    function FindValueOperator(predicate, source, yieldIndex, thisArg) {\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n    }\n    FindValueOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n    };\n    return FindValueOperator;\n}());\nexport { FindValueOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FindValueSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(FindValueSubscriber, _super);\n    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.yieldIndex = yieldIndex;\n        _this.thisArg = thisArg;\n        _this.index = 0;\n        return _this;\n    }\n    FindValueSubscriber.prototype.notifyComplete = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    FindValueSubscriber.prototype._next = function (value) {\n        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;\n        var index = this.index++;\n        try {\n            var result = predicate.call(thisArg || this, value, index, this.source);\n            if (result) {\n                this.notifyComplete(this.yieldIndex ? index : value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    FindValueSubscriber.prototype._complete = function () {\n        this.notifyComplete(this.yieldIndex ? -1 : undefined);\n    };\n    return FindValueSubscriber;\n}(Subscriber));\nexport { FindValueSubscriber };\n//# sourceMappingURL=find.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var _this = _super.call(this, 'object unsubscribed') || this;\n        _this.name = 'ObjectUnsubscribedError';\n        Object.setPrototypeOf(_this, ObjectUnsubscribedError.prototype);\n        return _this;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexport { ObjectUnsubscribedError };\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from './Subscription';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        var _this = _super.call(this) || this;\n        _this.subject = subject;\n        _this.subscriber = subscriber;\n        _this.closed = false;\n        return _this;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription));\nexport { SubjectSubscription };\n//# sourceMappingURL=SubjectSubscription.js.map\n","/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        return _this;\n    }\n    return SubjectSubscriber;\n}(Subscriber));\nexport { SubjectSubscriber };\n/**\n * @class Subject<T>\n */\nvar Subject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Subject, _super);\n    function Subject() {\n        var _this = _super.call(this) || this;\n        _this.observers = [];\n        _this.closed = false;\n        _this.isStopped = false;\n        _this.hasError = false;\n        _this.thrownError = null;\n        return _this;\n    }\n    Subject.prototype[rxSubscriberSymbol] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable();\n        observable.source = this;\n        return observable;\n    };\n    /**@nocollapse */\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable));\nexport { Subject };\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        var _this = _super.call(this) || this;\n        _this.destination = destination;\n        _this.source = source;\n        return _this;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexport { AnonymousSubject };\n//# sourceMappingURL=Subject.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return function (source) {\n        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n    };\n}\nvar GroupByOperator = /*@__PURE__*/ (function () {\n    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n    }\n    GroupByOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    };\n    return GroupByOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupBySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GroupBySubscriber, _super);\n    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.elementSelector = elementSelector;\n        _this.durationSelector = durationSelector;\n        _this.subjectSelector = subjectSelector;\n        _this.groups = null;\n        _this.attemptedToUnsubscribe = false;\n        _this.count = 0;\n        return _this;\n    }\n    GroupBySubscriber.prototype._next = function (value) {\n        var key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    };\n    GroupBySubscriber.prototype._group = function (value, key) {\n        var groups = this.groups;\n        if (!groups) {\n            groups = this.groups = new Map();\n        }\n        var group = groups.get(key);\n        var element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            group = (this.subjectSelector ? this.subjectSelector() : new Subject());\n            groups.set(key, group);\n            var groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                var duration = void 0;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    };\n    GroupBySubscriber.prototype._error = function (err) {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    };\n    GroupBySubscriber.prototype._complete = function () {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    };\n    GroupBySubscriber.prototype.removeGroup = function (key) {\n        this.groups.delete(key);\n    };\n    GroupBySubscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                _super.prototype.unsubscribe.call(this);\n            }\n        }\n    };\n    return GroupBySubscriber;\n}(Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupDurationSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GroupDurationSubscriber, _super);\n    function GroupDurationSubscriber(key, group, parent) {\n        var _this = _super.call(this, group) || this;\n        _this.key = key;\n        _this.group = group;\n        _this.parent = parent;\n        return _this;\n    }\n    GroupDurationSubscriber.prototype._next = function (value) {\n        this.complete();\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    GroupDurationSubscriber.prototype._unsubscribe = function () {\n        var _a = this, parent = _a.parent, key = _a.key;\n        this.key = this.parent = null;\n        if (parent) {\n            parent.removeGroup(key);\n        }\n    };\n    return GroupDurationSubscriber;\n}(Subscriber));\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nvar GroupedObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GroupedObservable, _super);\n    /** @deprecated Do not construct this type. Internal use only */\n    function GroupedObservable(key, groupSubject, refCountSubscription) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.groupSubject = groupSubject;\n        _this.refCountSubscription = refCountSubscription;\n        return _this;\n    }\n    /** @deprecated This is an internal implementation detail, do not use. */\n    GroupedObservable.prototype._subscribe = function (subscriber) {\n        var subscription = new Subscription();\n        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    };\n    return GroupedObservable;\n}(Observable));\nexport { GroupedObservable };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(InnerRefCountSubscription, _super);\n    function InnerRefCountSubscription(parent) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        parent.count++;\n        return _this;\n    }\n    InnerRefCountSubscription.prototype.unsubscribe = function () {\n        var parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            _super.prototype.unsubscribe.call(this);\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    };\n    return InnerRefCountSubscription;\n}(Subscription));\n//# sourceMappingURL=groupBy.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements() {\n    return function ignoreElementsOperatorFunction(source) {\n        return source.lift(new IgnoreElementsOperator());\n    };\n}\nvar IgnoreElementsOperator = /*@__PURE__*/ (function () {\n    function IgnoreElementsOperator() {\n    }\n    IgnoreElementsOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n    };\n    return IgnoreElementsOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IgnoreElementsSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgnoreElementsSubscriber, _super);\n    function IgnoreElementsSubscriber() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    IgnoreElementsSubscriber.prototype._next = function (unused) {\n        // Do nothing\n    };\n    return IgnoreElementsSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ignoreElements.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function isEmpty() {\n    return function (source) { return source.lift(new IsEmptyOperator()); };\n}\nvar IsEmptyOperator = /*@__PURE__*/ (function () {\n    function IsEmptyOperator() {\n    }\n    IsEmptyOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new IsEmptySubscriber(observer));\n    };\n    return IsEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IsEmptySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IsEmptySubscriber, _super);\n    function IsEmptySubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {\n        var destination = this.destination;\n        destination.next(isEmpty);\n        destination.complete();\n    };\n    IsEmptySubscriber.prototype._next = function (value) {\n        this.notifyComplete(false);\n    };\n    IsEmptySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return IsEmptySubscriber;\n}(Subscriber));\n//# sourceMappingURL=isEmpty.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.pipe(takeLast(3));\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast(count) {\n    return function takeLastOperatorFunction(source) {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeLastOperator(count));\n        }\n    };\n}\nvar TakeLastOperator = /*@__PURE__*/ (function () {\n    function TakeLastOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    TakeLastOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    };\n    return TakeLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeLastSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeLastSubscriber, _super);\n    function TakeLastSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.ring = new Array();\n        _this.count = 0;\n        return _this;\n    }\n    TakeLastSubscriber.prototype._next = function (value) {\n        var ring = this.ring;\n        var total = this.total;\n        var count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            var index = count % total;\n            ring[index] = value;\n        }\n    };\n    TakeLastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        var count = this.count;\n        if (count > 0) {\n            var total = this.count >= this.total ? this.total : this.count;\n            var ring = this.ring;\n            for (var i = 0; i < total; i++) {\n                var idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    };\n    return TakeLastSubscriber;\n}(Subscriber));\n//# sourceMappingURL=takeLast.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo(value) {\n    return function (source) { return source.lift(new MapToOperator(value)); };\n}\nvar MapToOperator = /*@__PURE__*/ (function () {\n    function MapToOperator(value) {\n        this.value = value;\n    }\n    MapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    };\n    return MapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapToSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MapToSubscriber, _super);\n    function MapToSubscriber(destination, value) {\n        var _this = _super.call(this, destination) || this;\n        _this.value = value;\n        return _this;\n    }\n    MapToSubscriber.prototype._next = function (x) {\n        this.destination.next(this.value);\n    };\n    return MapToSubscriber;\n}(Subscriber));\n//# sourceMappingURL=mapTo.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize() {\n    return function materializeOperatorFunction(source) {\n        return source.lift(new MaterializeOperator());\n    };\n}\nvar MaterializeOperator = /*@__PURE__*/ (function () {\n    function MaterializeOperator() {\n    }\n    MaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MaterializeSubscriber(subscriber));\n    };\n    return MaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MaterializeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MaterializeSubscriber, _super);\n    function MaterializeSubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    MaterializeSubscriber.prototype._next = function (value) {\n        this.destination.next(Notification.createNext(value));\n    };\n    MaterializeSubscriber.prototype._error = function (err) {\n        var destination = this.destination;\n        destination.next(Notification.createError(err));\n        destination.complete();\n    };\n    MaterializeSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        destination.next(Notification.createComplete());\n        destination.complete();\n    };\n    return MaterializeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=materialize.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan(accumulator, seed) {\n    var hasSeed = false;\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nvar ScanOperator = /*@__PURE__*/ (function () {\n    function ScanOperator(accumulator, seed, hasSeed) {\n        if (hasSeed === void 0) {\n            hasSeed = false;\n        }\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    ScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    };\n    return ScanOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ScanSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ScanSubscriber, _super);\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n        var _this = _super.call(this, destination) || this;\n        _this.accumulator = accumulator;\n        _this._seed = _seed;\n        _this.hasSeed = hasSeed;\n        _this.index = 0;\n        return _this;\n    }\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n        get: function () {\n            return this._seed;\n        },\n        set: function (value) {\n            this.hasSeed = true;\n            this._seed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScanSubscriber.prototype._next = function (value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    };\n    ScanSubscriber.prototype._tryNext = function (value) {\n        var index = this.index++;\n        var result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    };\n    return ScanSubscriber;\n}(Subscriber));\n//# sourceMappingURL=scan.js.map\n","/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };\n}\nvar MergeScanOperator = /*@__PURE__*/ (function () {\n    function MergeScanOperator(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    MergeScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    };\n    return MergeScanOperator;\n}());\nexport { MergeScanOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeScanSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MergeScanSubscriber, _super);\n    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n        var _this = _super.call(this, destination) || this;\n        _this.accumulator = accumulator;\n        _this.acc = acc;\n        _this.concurrent = concurrent;\n        _this.hasValue = false;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeScanSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var index = this.index++;\n            var ish = tryCatch(this.accumulator)(this.acc, value);\n            var destination = this.destination;\n            if (ish === errorObject) {\n                destination.error(errorObject.e);\n            }\n            else {\n                this.active++;\n                this._innerSub(ish, value, index);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult(this, ish, value, index));\n    };\n    MergeScanSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var destination = this.destination;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    };\n    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    return MergeScanSubscriber;\n}(OuterSubscriber));\nexport { MergeScanSubscriber };\n//# sourceMappingURL=mergeScan.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=refCount.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subjectFactory = subjectFactory;\n        _this._refCount = 0;\n        /** @internal */\n        _this._isComplete = false;\n        return _this;\n    }\n    /** @deprecated This is an internal implementation detail, do not use. */\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return higherOrderRefCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable));\nexport { ConnectableObservable };\nvar connectableProto = ConnectableObservable.prototype;\nexport var connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(SubjectSubscriber));\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn(scheduler, delay) {\n    if (delay === void 0) {\n        delay = 0;\n    }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nvar ObserveOnOperator = /*@__PURE__*/ (function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}());\nexport { ObserveOnOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        var _this = _super.call(this, destination) || this;\n        _this.scheduler = scheduler;\n        _this.delay = delay;\n        return _this;\n    }\n    /** @nocollapse */\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification, destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber));\nexport { ObserveOnSubscriber };\nvar ObserveOnMessage = /*@__PURE__*/ (function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}());\nexport { ObserveOnMessage };\n//# sourceMappingURL=observeOn.js.map\n","/** PURE_IMPORTS_START tslib,_observable_from,_util_isArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { from } from '../observable/from';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nexport function onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i] = arguments[_i];\n    }\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };\n}\n/* tslint:enable:max-line-length */\nexport function onErrorResumeNextStatic() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i] = arguments[_i];\n    }\n    var source = null;\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    source = nextSources.shift();\n    return from(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\nvar OnErrorResumeNextOperator = /*@__PURE__*/ (function () {\n    function OnErrorResumeNextOperator(nextSources) {\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n    };\n    return OnErrorResumeNextOperator;\n}());\nvar OnErrorResumeNextSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(OnErrorResumeNextSubscriber, _super);\n    function OnErrorResumeNextSubscriber(destination, nextSources) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.nextSources = nextSources;\n        return _this;\n    }\n    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._error = function (err) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._complete = function () {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n        var next = this.nextSources.shift();\n        if (next) {\n            this.add(subscribeToResult(this, next));\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return OnErrorResumeNextSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=onErrorResumeNext.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise() {\n    return function (source) { return source.lift(new PairwiseOperator()); };\n}\nvar PairwiseOperator = /*@__PURE__*/ (function () {\n    function PairwiseOperator() {\n    }\n    PairwiseOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new PairwiseSubscriber(subscriber));\n    };\n    return PairwiseOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar PairwiseSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(PairwiseSubscriber, _super);\n    function PairwiseSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasPrev = false;\n        return _this;\n    }\n    PairwiseSubscriber.prototype._next = function (value) {\n        if (this.hasPrev) {\n            this.destination.next([this.prev, value]);\n        }\n        else {\n            this.hasPrev = true;\n        }\n        this.prev = value;\n    };\n    return PairwiseSubscriber;\n}(Subscriber));\n//# sourceMappingURL=pairwise.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n/**\n * @class BehaviorSubject<T>\n */\nvar BehaviorSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BehaviorSubject, _super);\n    function BehaviorSubject(_value) {\n        var _this = _super.call(this) || this;\n        _this._value = _value;\n        return _this;\n    }\n    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n        get: function () {\n            return this.getValue();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @deprecated This is an internal implementation detail, do not use. */\n    BehaviorSubject.prototype._subscribe = function (subscriber) {\n        var subscription = _super.prototype._subscribe.call(this, subscriber);\n        if (subscription && !subscription.closed) {\n            subscriber.next(this._value);\n        }\n        return subscription;\n    };\n    BehaviorSubject.prototype.getValue = function () {\n        if (this.hasError) {\n            throw this.thrownError;\n        }\n        else if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return this._value;\n        }\n    };\n    BehaviorSubject.prototype.next = function (value) {\n        _super.prototype.next.call(this, this._value = value);\n    };\n    return BehaviorSubject;\n}(Subject));\nexport { BehaviorSubject };\n//# sourceMappingURL=BehaviorSubject.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { Subscription } from './Subscription';\n/**\n * @class AsyncSubject<T>\n */\nvar AsyncSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsyncSubject, _super);\n    function AsyncSubject() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.value = null;\n        _this.hasNext = false;\n        _this.hasCompleted = false;\n        return _this;\n    }\n    /** @deprecated This is an internal implementation detail, do not use. */\n    AsyncSubject.prototype._subscribe = function (subscriber) {\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.hasCompleted && this.hasNext) {\n            subscriber.next(this.value);\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    AsyncSubject.prototype.next = function (value) {\n        if (!this.hasCompleted) {\n            this.value = value;\n            this.hasNext = true;\n        }\n    };\n    AsyncSubject.prototype.error = function (error) {\n        if (!this.hasCompleted) {\n            _super.prototype.error.call(this, error);\n        }\n    };\n    AsyncSubject.prototype.complete = function () {\n        this.hasCompleted = true;\n        if (this.hasNext) {\n            _super.prototype.next.call(this, this.value);\n        }\n        _super.prototype.complete.call(this);\n    };\n    return AsyncSubject;\n}(Subject));\nexport { AsyncSubject };\n//# sourceMappingURL=AsyncSubject.js.map\n","/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncAction } from './AsyncAction';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar QueueAction = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(QueueAction, _super);\n    function QueueAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        return _this;\n    }\n    QueueAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (delay > 0) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    };\n    QueueAction.prototype.execute = function (state, delay) {\n        return (delay > 0 || this.closed) ?\n            _super.prototype.execute.call(this, state, delay) :\n            this._execute(state, delay);\n    };\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Otherwise flush the scheduler starting with this action.\n        return scheduler.flush(this);\n    };\n    return QueueAction;\n}(AsyncAction));\nexport { QueueAction };\n//# sourceMappingURL=QueueAction.js.map\n","/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncScheduler } from './AsyncScheduler';\nvar QueueScheduler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(QueueScheduler, _super);\n    function QueueScheduler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return QueueScheduler;\n}(AsyncScheduler));\nexport { QueueScheduler };\n//# sourceMappingURL=QueueScheduler.js.map\n","/** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */\nimport { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\nexport var queue = /*@__PURE__*/ new QueueScheduler(QueueAction);\n//# sourceMappingURL=queue.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { queue } from './scheduler/queue';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nvar ReplaySubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) {\n            bufferSize = Number.POSITIVE_INFINITY;\n        }\n        if (windowTime === void 0) {\n            windowTime = Number.POSITIVE_INFINITY;\n        }\n        var _this = _super.call(this) || this;\n        _this.scheduler = scheduler;\n        _this._events = [];\n        _this._infiniteTimeWindow = false;\n        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        _this._windowTime = windowTime < 1 ? 1 : windowTime;\n        if (windowTime === Number.POSITIVE_INFINITY) {\n            _this._infiniteTimeWindow = true;\n            _this.next = _this.nextInfiniteTimeWindow;\n        }\n        else {\n            _this.next = _this.nextTimeWindow;\n        }\n        return _this;\n    }\n    ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {\n        var _events = this._events;\n        _events.push(value);\n        // Since this method is invoked in every next() call than the buffer\n        // can overgrow the max size only by one item\n        if (_events.length > this._bufferSize) {\n            _events.shift();\n        }\n        _super.prototype.next.call(this, value);\n    };\n    ReplaySubject.prototype.nextTimeWindow = function (value) {\n        this._events.push(new ReplayEvent(this._getNow(), value));\n        this._trimBufferThenGetEvents();\n        _super.prototype.next.call(this, value);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    ReplaySubject.prototype._subscribe = function (subscriber) {\n        // When `_infiniteTimeWindow === true` then the buffer is already trimmed\n        var _infiniteTimeWindow = this._infiniteTimeWindow;\n        var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        var len = _events.length;\n        var subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.isStopped || this.hasError) {\n            subscription = Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));\n        }\n        if (_infiniteTimeWindow) {\n            for (var i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i]);\n            }\n        }\n        else {\n            for (var i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i].value);\n            }\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        // Trim events that fall out of the time window.\n        // Start at the front of the list. Break early once\n        // we encounter an event that falls within the window.\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject));\nexport { ReplaySubject };\nvar ReplayEvent = /*@__PURE__*/ (function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}());\n//# sourceMappingURL=ReplaySubject.js.map\n","/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    // if the only argument is an array, it was most likely called with\n    // `race([obs1, obs2, ...])`\n    if (observables.length === 1) {\n        if (isArray(observables[0])) {\n            observables = observables[0];\n        }\n        else {\n            return observables[0];\n        }\n    }\n    return fromArray(observables, undefined).lift(new RaceOperator());\n}\nvar RaceOperator = /*@__PURE__*/ (function () {\n    function RaceOperator() {\n    }\n    RaceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RaceSubscriber(subscriber));\n    };\n    return RaceOperator;\n}());\nexport { RaceOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RaceSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RaceSubscriber, _super);\n    function RaceSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasFirst = false;\n        _this.observables = [];\n        _this.subscriptions = [];\n        return _this;\n    }\n    RaceSubscriber.prototype._next = function (observable) {\n        this.observables.push(observable);\n    };\n    RaceSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            for (var i = 0; i < len && !this.hasFirst; i++) {\n                var observable = observables[i];\n                var subscription = subscribeToResult(this, observable, observable, i);\n                if (this.subscriptions) {\n                    this.subscriptions.push(subscription);\n                }\n                this.add(subscription);\n            }\n            this.observables = null;\n        }\n    };\n    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (!this.hasFirst) {\n            this.hasFirst = true;\n            for (var i = 0; i < this.subscriptions.length; i++) {\n                if (i !== outerIndex) {\n                    var subscription = this.subscriptions[i];\n                    subscription.unsubscribe();\n                    this.remove(subscription);\n                }\n            }\n            this.subscriptions = null;\n        }\n        this.destination.next(innerValue);\n    };\n    return RaceSubscriber;\n}(OuterSubscriber));\nexport { RaceSubscriber };\n//# sourceMappingURL=race.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { empty } from '../observable/empty';\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat(count) {\n    if (count === void 0) {\n        count = -1;\n    }\n    return function (source) {\n        if (count === 0) {\n            return empty();\n        }\n        else if (count < 0) {\n            return source.lift(new RepeatOperator(-1, source));\n        }\n        else {\n            return source.lift(new RepeatOperator(count - 1, source));\n        }\n    };\n}\nvar RepeatOperator = /*@__PURE__*/ (function () {\n    function RepeatOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RepeatOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n    };\n    return RepeatOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RepeatSubscriber, _super);\n    function RepeatSubscriber(destination, count, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.count = count;\n        _this.source = source;\n        return _this;\n    }\n    RepeatSubscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.complete.call(this);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RepeatSubscriber;\n}(Subscriber));\n//# sourceMappingURL=repeat.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen(notifier) {\n    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };\n}\nvar RepeatWhenOperator = /*@__PURE__*/ (function () {\n    function RepeatWhenOperator(notifier) {\n        this.notifier = notifier;\n    }\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    };\n    return RepeatWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RepeatWhenSubscriber, _super);\n    function RepeatWhenSubscriber(destination, notifier, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.notifier = notifier;\n        _this.source = source;\n        _this.sourceIsBeingSubscribedTo = true;\n        return _this;\n    }\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    };\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return _super.prototype.complete.call(this);\n        }\n    };\n    RepeatWhenSubscriber.prototype.complete = function () {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\n                return _super.prototype.complete.call(this);\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next();\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    RepeatWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n        var _unsubscribe = this._unsubscribe;\n        this._unsubscribe = null;\n        _super.prototype._unsubscribeAndRecycle.call(this);\n        this._unsubscribe = _unsubscribe;\n        return this;\n    };\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n        this.notifications = new Subject();\n        var retries = tryCatch(this.notifier)(this.notifications);\n        if (retries === errorObject) {\n            return _super.prototype.complete.call(this);\n        }\n        this.retries = retries;\n        this.retriesSubscription = subscribeToResult(this, retries);\n    };\n    return RepeatWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=repeatWhen.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry(count) {\n    if (count === void 0) {\n        count = -1;\n    }\n    return function (source) { return source.lift(new RetryOperator(count, source)); };\n}\nvar RetryOperator = /*@__PURE__*/ (function () {\n    function RetryOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RetryOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    };\n    return RetryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetrySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RetrySubscriber, _super);\n    function RetrySubscriber(destination, count, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.count = count;\n        _this.source = source;\n        return _this;\n    }\n    RetrySubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.error.call(this, err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RetrySubscriber;\n}(Subscriber));\n//# sourceMappingURL=retry.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen(notifier) {\n    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };\n}\nvar RetryWhenOperator = /*@__PURE__*/ (function () {\n    function RetryWhenOperator(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    };\n    return RetryWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetryWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RetryWhenSubscriber, _super);\n    function RetryWhenSubscriber(destination, notifier, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.notifier = notifier;\n        _this.source = source;\n        return _this;\n    }\n    RetryWhenSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var errors = this.errors;\n            var retries = this.retries;\n            var retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                retries = tryCatch(this.notifier)(errors);\n                if (retries === errorObject) {\n                    return _super.prototype.error.call(this, errorObject.e);\n                }\n                retriesSubscription = subscribeToResult(this, retries);\n            }\n            else {\n                this.errors = null;\n                this.retriesSubscription = null;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    RetryWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _unsubscribe = this._unsubscribe;\n        this._unsubscribe = null;\n        this._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        this.source.subscribe(this);\n    };\n    return RetryWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=retryWhen.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample(notifier) {\n    return function (source) { return source.lift(new SampleOperator(notifier)); };\n}\nvar SampleOperator = /*@__PURE__*/ (function () {\n    function SampleOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SampleOperator.prototype.call = function (subscriber, source) {\n        var sampleSubscriber = new SampleSubscriber(subscriber);\n        var subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    };\n    return SampleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SampleSubscriber, _super);\n    function SampleSubscriber() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.hasValue = false;\n        return _this;\n    }\n    SampleSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n    };\n    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    };\n    return SampleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=sample.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime(period, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };\n}\nvar SampleTimeOperator = /*@__PURE__*/ (function () {\n    function SampleTimeOperator(period, scheduler) {\n        this.period = period;\n        this.scheduler = scheduler;\n    }\n    SampleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n    };\n    return SampleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SampleTimeSubscriber, _super);\n    function SampleTimeSubscriber(destination, period, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.period = period;\n        _this.scheduler = scheduler;\n        _this.hasValue = false;\n        _this.add(scheduler.schedule(dispatchNotification, period, { subscriber: _this, period: period }));\n        return _this;\n    }\n    SampleTimeSubscriber.prototype._next = function (value) {\n        this.lastValue = value;\n        this.hasValue = true;\n    };\n    SampleTimeSubscriber.prototype.notifyNext = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.lastValue);\n        }\n    };\n    return SampleTimeSubscriber;\n}(Subscriber));\nfunction dispatchNotification(state) {\n    var subscriber = state.subscriber, period = state.period;\n    subscriber.notifyNext();\n    this.schedule(state, period);\n}\n//# sourceMappingURL=sampleTime.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual(compareTo, comparor) {\n    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparor)); };\n}\nvar SequenceEqualOperator = /*@__PURE__*/ (function () {\n    function SequenceEqualOperator(compareTo, comparor) {\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n    }\n    SequenceEqualOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n    };\n    return SequenceEqualOperator;\n}());\nexport { SequenceEqualOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SequenceEqualSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SequenceEqualSubscriber, _super);\n    function SequenceEqualSubscriber(destination, compareTo, comparor) {\n        var _this = _super.call(this, destination) || this;\n        _this.compareTo = compareTo;\n        _this.comparor = comparor;\n        _this._a = [];\n        _this._b = [];\n        _this._oneComplete = false;\n        _this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));\n        return _this;\n    }\n    SequenceEqualSubscriber.prototype._next = function (value) {\n        if (this._oneComplete && this._b.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._a.push(value);\n            this.checkValues();\n        }\n    };\n    SequenceEqualSubscriber.prototype._complete = function () {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n    };\n    SequenceEqualSubscriber.prototype.checkValues = function () {\n        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;\n        while (_a.length > 0 && _b.length > 0) {\n            var a = _a.shift();\n            var b = _b.shift();\n            var areEqual = false;\n            if (comparor) {\n                areEqual = tryCatch(comparor)(a, b);\n                if (areEqual === errorObject) {\n                    this.destination.error(errorObject.e);\n                }\n            }\n            else {\n                areEqual = a === b;\n            }\n            if (!areEqual) {\n                this.emit(false);\n            }\n        }\n    };\n    SequenceEqualSubscriber.prototype.emit = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    SequenceEqualSubscriber.prototype.nextB = function (value) {\n        if (this._oneComplete && this._a.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._b.push(value);\n            this.checkValues();\n        }\n    };\n    return SequenceEqualSubscriber;\n}(Subscriber));\nexport { SequenceEqualSubscriber };\nvar SequenceEqualCompareToSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SequenceEqualCompareToSubscriber, _super);\n    function SequenceEqualCompareToSubscriber(destination, parent) {\n        var _this = _super.call(this, destination) || this;\n        _this.parent = parent;\n        return _this;\n    }\n    SequenceEqualCompareToSubscriber.prototype._next = function (value) {\n        this.parent.nextB(value);\n    };\n    SequenceEqualCompareToSubscriber.prototype._error = function (err) {\n        this.parent.error(err);\n    };\n    SequenceEqualCompareToSubscriber.prototype._complete = function () {\n        this.parent._complete();\n    };\n    return SequenceEqualCompareToSubscriber;\n}(Subscriber));\n//# sourceMappingURL=sequenceEqual.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_EmptyError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * items, notify of an IllegalArgumentException or NoSuchElementException respectively. If the source Observable\n * emits items but none match the specified predicate then `undefined` is emiited.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate or `undefined` when no items match.\n *\n * @method single\n * @owner Observable\n */\nexport function single(predicate) {\n    return function (source) { return source.lift(new SingleOperator(predicate, source)); };\n}\nvar SingleOperator = /*@__PURE__*/ (function () {\n    function SingleOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    SingleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n    };\n    return SingleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SingleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SingleSubscriber, _super);\n    function SingleSubscriber(destination, predicate, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.seenValue = false;\n        _this.index = 0;\n        return _this;\n    }\n    SingleSubscriber.prototype.applySingleValue = function (value) {\n        if (this.seenValue) {\n            this.destination.error('Sequence contains more than one element');\n        }\n        else {\n            this.seenValue = true;\n            this.singleValue = value;\n        }\n    };\n    SingleSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this.tryNext(value, index);\n        }\n        else {\n            this.applySingleValue(value);\n        }\n    };\n    SingleSubscriber.prototype.tryNext = function (value, index) {\n        try {\n            if (this.predicate(value, index, this.source)) {\n                this.applySingleValue(value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    SingleSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index > 0) {\n            destination.next(this.seenValue ? this.singleValue : undefined);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError);\n        }\n    };\n    return SingleSubscriber;\n}(Subscriber));\n//# sourceMappingURL=single.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip(count) {\n    return function (source) { return source.lift(new SkipOperator(count)); };\n}\nvar SkipOperator = /*@__PURE__*/ (function () {\n    function SkipOperator(total) {\n        this.total = total;\n    }\n    SkipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    };\n    return SkipOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SkipSubscriber, _super);\n    function SkipSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.count = 0;\n        return _this;\n    }\n    SkipSubscriber.prototype._next = function (x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    };\n    return SkipSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skip.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast(count) {\n    return function (source) { return source.lift(new SkipLastOperator(count)); };\n}\nvar SkipLastOperator = /*@__PURE__*/ (function () {\n    function SkipLastOperator(_skipCount) {\n        this._skipCount = _skipCount;\n        if (this._skipCount < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    SkipLastOperator.prototype.call = function (subscriber, source) {\n        if (this._skipCount === 0) {\n            // If we don't want to skip any values then just subscribe\n            // to Subscriber without any further logic.\n            return source.subscribe(new Subscriber(subscriber));\n        }\n        else {\n            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n        }\n    };\n    return SkipLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipLastSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SkipLastSubscriber, _super);\n    function SkipLastSubscriber(destination, _skipCount) {\n        var _this = _super.call(this, destination) || this;\n        _this._skipCount = _skipCount;\n        _this._count = 0;\n        _this._ring = new Array(_skipCount);\n        return _this;\n    }\n    SkipLastSubscriber.prototype._next = function (value) {\n        var skipCount = this._skipCount;\n        var count = this._count++;\n        if (count < skipCount) {\n            this._ring[count] = value;\n        }\n        else {\n            var currentIndex = count % skipCount;\n            var ring = this._ring;\n            var oldValue = ring[currentIndex];\n            ring[currentIndex] = value;\n            this.destination.next(oldValue);\n        }\n    };\n    return SkipLastSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skipLast.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil(notifier) {\n    return function (source) { return source.lift(new SkipUntilOperator(notifier)); };\n}\nvar SkipUntilOperator = /*@__PURE__*/ (function () {\n    function SkipUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SkipUntilOperator.prototype.call = function (destination, source) {\n        return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));\n    };\n    return SkipUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipUntilSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SkipUntilSubscriber, _super);\n    function SkipUntilSubscriber(destination, notifier) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasValue = false;\n        _this.add(_this.innerSubscription = subscribeToResult(_this, notifier));\n        return _this;\n    }\n    SkipUntilSubscriber.prototype._next = function (value) {\n        if (this.hasValue) {\n            _super.prototype._next.call(this, value);\n        }\n    };\n    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.hasValue = true;\n        if (this.innerSubscription) {\n            this.innerSubscription.unsubscribe();\n        }\n    };\n    SkipUntilSubscriber.prototype.notifyComplete = function () {\n        /* do nothing */\n    };\n    return SkipUntilSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=skipUntil.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile(predicate) {\n    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };\n}\nvar SkipWhileOperator = /*@__PURE__*/ (function () {\n    function SkipWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    SkipWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    };\n    return SkipWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipWhileSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SkipWhileSubscriber, _super);\n    function SkipWhileSubscriber(destination, predicate) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.skipping = true;\n        _this.index = 0;\n        return _this;\n    }\n    SkipWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    };\n    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n        try {\n            var result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    return SkipWhileSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skipWhile.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar nextHandle = 1;\nvar tasksByHandle = {};\nfunction runIfPresent(handle) {\n    var cb = tasksByHandle[handle];\n    if (cb) {\n        cb();\n    }\n}\nexport var Immediate = {\n    setImmediate: function (cb) {\n        var handle = nextHandle++;\n        tasksByHandle[handle] = cb;\n        Promise.resolve().then(function () { return runIfPresent(handle); });\n        return handle;\n    },\n    clearImmediate: function (handle) {\n        delete tasksByHandle[handle];\n    },\n};\n//# sourceMappingURL=Immediate.js.map\n","/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsapAction = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsapAction, _super);\n    function AsapAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        return _this;\n    }\n    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If a microtask has already been scheduled, don't schedule another\n        // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n        // the current scheduled microtask id.\n        return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n    };\n    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested microtask and\n        // set the scheduled flag to undefined so the next AsapAction will schedule\n        // its own.\n        if (scheduler.actions.length === 0) {\n            Immediate.clearImmediate(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AsapAction;\n}(AsyncAction));\nexport { AsapAction };\n//# sourceMappingURL=AsapAction.js.map\n","/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncScheduler } from './AsyncScheduler';\nvar AsapScheduler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsapScheduler, _super);\n    function AsapScheduler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AsapScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsapScheduler;\n}(AsyncScheduler));\nexport { AsapScheduler };\n//# sourceMappingURL=AsapScheduler.js.map\n","/** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */\nimport { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\nexport var asap = /*@__PURE__*/ new AsapScheduler(AsapAction);\n//# sourceMappingURL=asap.js.map\n","/** PURE_IMPORTS_START tslib,_Observable,_scheduler_asap,_util_isNumeric PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar SubscribeOnObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubscribeOnObservable, _super);\n    function SubscribeOnObservable(source, delayTime, scheduler) {\n        if (delayTime === void 0) {\n            delayTime = 0;\n        }\n        if (scheduler === void 0) {\n            scheduler = asap;\n        }\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.delayTime = delayTime;\n        _this.scheduler = scheduler;\n        if (!isNumeric(delayTime) || delayTime < 0) {\n            _this.delayTime = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            _this.scheduler = asap;\n        }\n        return _this;\n    }\n    /** @nocollapse */\n    SubscribeOnObservable.create = function (source, delay, scheduler) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (scheduler === void 0) {\n            scheduler = asap;\n        }\n        return new SubscribeOnObservable(source, delay, scheduler);\n    };\n    /** @nocollapse */\n    SubscribeOnObservable.dispatch = function (arg) {\n        var source = arg.source, subscriber = arg.subscriber;\n        return this.add(source.subscribe(subscriber));\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    SubscribeOnObservable.prototype._subscribe = function (subscriber) {\n        var delay = this.delayTime;\n        var source = this.source;\n        var scheduler = this.scheduler;\n        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n            source: source, subscriber: subscriber\n        });\n    };\n    return SubscribeOnObservable;\n}(Observable));\nexport { SubscribeOnObservable };\n//# sourceMappingURL=SubscribeOnObservable.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { map } from './map';\nimport { from } from '../observable/from';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap(project, resultSelector) {\n    if (typeof resultSelector === 'function') {\n        return function (source) { return source.pipe(switchMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };\n    }\n    return function (source) { return source.lift(new SwitchMapOperator(project)); };\n}\nvar SwitchMapOperator = /*@__PURE__*/ (function () {\n    function SwitchMapOperator(project) {\n        this.project = project;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n    };\n    return SwitchMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.index = 0;\n        return _this;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=switchMap.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil(notifier) {\n    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };\n}\nvar TakeUntilOperator = /*@__PURE__*/ (function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n        var notifierSubscription = subscribeToResult(takeUntilSubscriber, this.notifier);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            takeUntilSubscriber.add(notifierSubscription);\n            return source.subscribe(takeUntilSubscriber);\n        }\n        return takeUntilSubscriber;\n    };\n    return TakeUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeUntilSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=takeUntil.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile(predicate) {\n    return function (source) { return source.lift(new TakeWhileOperator(predicate)); };\n}\nvar TakeWhileOperator = /*@__PURE__*/ (function () {\n    function TakeWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    TakeWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n    };\n    return TakeWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeWhileSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeWhileSubscriber, _super);\n    function TakeWhileSubscriber(destination, predicate) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.index = 0;\n        return _this;\n    }\n    TakeWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        var result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    };\n    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n        var destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            destination.complete();\n        }\n    };\n    return TakeWhileSubscriber;\n}(Subscriber));\n//# sourceMappingURL=takeWhile.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport var defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle(durationSelector, config) {\n    if (config === void 0) {\n        config = defaultThrottleConfig;\n    }\n    return function (source) { return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing)); };\n}\nvar ThrottleOperator = /*@__PURE__*/ (function () {\n    function ThrottleOperator(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    };\n    return ThrottleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ThrottleSubscriber, _super);\n    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.durationSelector = durationSelector;\n        _this._leading = _leading;\n        _this._trailing = _trailing;\n        _this._hasValue = false;\n        return _this;\n    }\n    ThrottleSubscriber.prototype._next = function (value) {\n        this._hasValue = true;\n        this._sendValue = value;\n        if (!this._throttled) {\n            if (this._leading) {\n                this.send();\n            }\n            else {\n                this.throttle(value);\n            }\n        }\n    };\n    ThrottleSubscriber.prototype.send = function () {\n        var _a = this, _hasValue = _a._hasValue, _sendValue = _a._sendValue;\n        if (_hasValue) {\n            this.destination.next(_sendValue);\n            this.throttle(_sendValue);\n        }\n        this._hasValue = false;\n        this._sendValue = null;\n    };\n    ThrottleSubscriber.prototype.throttle = function (value) {\n        var duration = this.tryDurationSelector(value);\n        if (duration) {\n            this.add(this._throttled = subscribeToResult(this, duration));\n        }\n    };\n    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    };\n    ThrottleSubscriber.prototype.throttlingDone = function () {\n        var _a = this, _throttled = _a._throttled, _trailing = _a._trailing;\n        if (_throttled) {\n            _throttled.unsubscribe();\n        }\n        this._throttled = null;\n        if (_trailing) {\n            this.send();\n        }\n    };\n    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.throttlingDone();\n    };\n    ThrottleSubscriber.prototype.notifyComplete = function () {\n        this.throttlingDone();\n    };\n    return ThrottleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=throttle.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { defaultThrottleConfig } from './throttle';\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @param {Object} config a configuration object to define `leading` and\n * `trailing` behavior. Defaults to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    if (config === void 0) {\n        config = defaultThrottleConfig;\n    }\n    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };\n}\nvar ThrottleTimeOperator = /*@__PURE__*/ (function () {\n    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    };\n    return ThrottleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ThrottleTimeSubscriber, _super);\n    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {\n        var _this = _super.call(this, destination) || this;\n        _this.duration = duration;\n        _this.scheduler = scheduler;\n        _this.leading = leading;\n        _this.trailing = trailing;\n        _this._hasTrailingValue = false;\n        _this._trailingValue = null;\n        return _this;\n    }\n    ThrottleTimeSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n        }\n    };\n    ThrottleTimeSubscriber.prototype._complete = function () {\n        if (this._hasTrailingValue) {\n            this.destination.next(this._trailingValue);\n            this.destination.complete();\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n        var throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    };\n    return ThrottleTimeSubscriber;\n}(Subscriber));\nfunction dispatchNext(arg) {\n    var subscriber = arg.subscriber;\n    subscriber.clearThrottle();\n}\n//# sourceMappingURL=throttleTime.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when duetime elapses.\n *\n * @see {@link timeout}\n *\n * @class TimeoutError\n */\nvar TimeoutError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TimeoutError, _super);\n    function TimeoutError() {\n        var _this = _super.call(this, 'Timeout has occurred') || this;\n        _this.name = 'TimeoutError';\n        Object.setPrototypeOf(_this, TimeoutError.prototype);\n        return _this;\n    }\n    return TimeoutError;\n}(Error));\nexport { TimeoutError };\n//# sourceMappingURL=TimeoutError.js.map\n","/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return function (source) {\n        var absoluteTimeout = isDate(due);\n        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n    };\n}\nvar TimeoutWithOperator = /*@__PURE__*/ (function () {\n    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n    }\n    TimeoutWithOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n    };\n    return TimeoutWithOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutWithSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TimeoutWithSubscriber, _super);\n    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.absoluteTimeout = absoluteTimeout;\n        _this.waitFor = waitFor;\n        _this.withObservable = withObservable;\n        _this.scheduler = scheduler;\n        _this.action = null;\n        _this.scheduleTimeout();\n        return _this;\n    }\n    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {\n        var withObservable = subscriber.withObservable;\n        subscriber._unsubscribeAndRecycle();\n        subscriber.add(subscribeToResult(subscriber, withObservable));\n    };\n    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutWithSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    TimeoutWithSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.withObservable = null;\n    };\n    return TimeoutWithSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=timeoutWith.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window(windowBoundaries) {\n    return function windowOperatorFunction(source) {\n        return source.lift(new WindowOperator(windowBoundaries));\n    };\n}\nvar WindowOperator = /*@__PURE__*/ (function () {\n    function WindowOperator(windowBoundaries) {\n        this.windowBoundaries = windowBoundaries;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        var windowSubscriber = new WindowSubscriber(subscriber);\n        var sourceSubscription = source.subscribe(windowSubscriber);\n        if (!sourceSubscription.closed) {\n            windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n        }\n        return sourceSubscription;\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.window = new Subject();\n        destination.next(_this.window);\n        return _this;\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow();\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this._complete();\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    WindowSubscriber.prototype._unsubscribe = function () {\n        this.window = null;\n    };\n    WindowSubscriber.prototype.openWindow = function () {\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var destination = this.destination;\n        var newWindow = this.window = new Subject();\n        destination.next(newWindow);\n    };\n    return WindowSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=window.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Subject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) {\n        startWindowEvery = 0;\n    }\n    return function windowCountOperatorFunction(source) {\n        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));\n    };\n}\nvar WindowCountOperator = /*@__PURE__*/ (function () {\n    function WindowCountOperator(windowSize, startWindowEvery) {\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n    }\n    WindowCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n    };\n    return WindowCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowCountSubscriber, _super);\n    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.windowSize = windowSize;\n        _this.startWindowEvery = startWindowEvery;\n        _this.windows = [new Subject()];\n        _this.count = 0;\n        destination.next(_this.windows[0]);\n        return _this;\n    }\n    WindowCountSubscriber.prototype._next = function (value) {\n        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n        var destination = this.destination;\n        var windowSize = this.windowSize;\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len && !this.closed; i++) {\n            windows[i].next(value);\n        }\n        var c = this.count - windowSize + 1;\n        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n            windows.shift().complete();\n        }\n        if (++this.count % startWindowEvery === 0 && !this.closed) {\n            var window_1 = new Subject();\n            windows.push(window_1);\n            destination.next(window_1);\n        }\n    };\n    WindowCountSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().error(err);\n            }\n        }\n        this.destination.error(err);\n    };\n    WindowCountSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowCountSubscriber.prototype._unsubscribe = function () {\n        this.count = 0;\n        this.windows = null;\n    };\n    return WindowCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=windowCount.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_scheduler_async,_Subscriber,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function windowTime(windowTimeSpan) {\n    var scheduler = async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return function windowTimeOperatorFunction(source) {\n        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n    };\n}\nvar WindowTimeOperator = /*@__PURE__*/ (function () {\n    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n    }\n    WindowTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));\n    };\n    return WindowTimeOperator;\n}());\nvar CountedSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CountedSubject, _super);\n    function CountedSubject() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._numberOfNextedValues = 0;\n        return _this;\n    }\n    CountedSubject.prototype.next = function (value) {\n        this._numberOfNextedValues++;\n        _super.prototype.next.call(this, value);\n    };\n    Object.defineProperty(CountedSubject.prototype, \"numberOfNextedValues\", {\n        get: function () {\n            return this._numberOfNextedValues;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CountedSubject;\n}(Subject));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowTimeSubscriber, _super);\n    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.windowTimeSpan = windowTimeSpan;\n        _this.windowCreationInterval = windowCreationInterval;\n        _this.maxWindowSize = maxWindowSize;\n        _this.scheduler = scheduler;\n        _this.windows = [];\n        var window = _this.openWindow();\n        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n            var closeState = { subscriber: _this, window: window, context: null };\n            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler };\n            _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n            _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n        }\n        else {\n            var timeSpanOnlyState = { subscriber: _this, window: window, windowTimeSpan: windowTimeSpan };\n            _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n        }\n        return _this;\n    }\n    WindowTimeSubscriber.prototype._next = function (value) {\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len; i++) {\n            var window_1 = windows[i];\n            if (!window_1.closed) {\n                window_1.next(value);\n                if (window_1.numberOfNextedValues >= this.maxWindowSize) {\n                    this.closeWindow(window_1);\n                }\n            }\n        }\n    };\n    WindowTimeSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            windows.shift().error(err);\n        }\n        this.destination.error(err);\n    };\n    WindowTimeSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            var window_2 = windows.shift();\n            if (!window_2.closed) {\n                window_2.complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowTimeSubscriber.prototype.openWindow = function () {\n        var window = new CountedSubject();\n        this.windows.push(window);\n        var destination = this.destination;\n        destination.next(window);\n        return window;\n    };\n    WindowTimeSubscriber.prototype.closeWindow = function (window) {\n        window.complete();\n        var windows = this.windows;\n        windows.splice(windows.indexOf(window), 1);\n    };\n    return WindowTimeSubscriber;\n}(Subscriber));\nfunction dispatchWindowTimeSpanOnly(state) {\n    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;\n    if (window) {\n        subscriber.closeWindow(window);\n    }\n    state.window = subscriber.openWindow();\n    this.schedule(state, windowTimeSpan);\n}\nfunction dispatchWindowCreation(state) {\n    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;\n    var window = subscriber.openWindow();\n    var action = this;\n    var context = { action: action, subscription: null };\n    var timeSpanState = { subscriber: subscriber, window: window, context: context };\n    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n    action.add(context.subscription);\n    action.schedule(state, windowCreationInterval);\n}\nfunction dispatchWindowClose(state) {\n    var subscriber = state.subscriber, window = state.window, context = state.context;\n    if (context && context.action && context.subscription) {\n        context.action.remove(context.subscription);\n    }\n    subscriber.closeWindow(window);\n}\n//# sourceMappingURL=windowTime.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle(openings, closingSelector) {\n    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };\n}\nvar WindowToggleOperator = /*@__PURE__*/ (function () {\n    function WindowToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    WindowToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return WindowToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowToggleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowToggleSubscriber, _super);\n    function WindowToggleSubscriber(destination, openings, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.openings = openings;\n        _this.closingSelector = closingSelector;\n        _this.contexts = [];\n        _this.add(_this.openSubscription = subscribeToResult(_this, openings, openings));\n        return _this;\n    }\n    WindowToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        if (contexts) {\n            var len = contexts.length;\n            for (var i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context_1 = contexts[index];\n                context_1.window.error(err);\n                context_1.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._error.call(this, err);\n    };\n    WindowToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context_2 = contexts[index];\n                context_2.window.complete();\n                context_2.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    WindowToggleSubscriber.prototype._unsubscribe = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context_3 = contexts[index];\n                context_3.window.unsubscribe();\n                context_3.subscription.unsubscribe();\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = tryCatch(closingSelector)(innerValue);\n            if (closingNotifier === errorObject) {\n                return this.error(errorObject.e);\n            }\n            else {\n                var window_1 = new Subject();\n                var subscription = new Subscription();\n                var context_4 = { window: window_1, subscription: subscription };\n                this.contexts.push(context_4);\n                var innerSubscription = subscribeToResult(this, closingNotifier, context_4);\n                if (innerSubscription.closed) {\n                    this.closeWindow(this.contexts.length - 1);\n                }\n                else {\n                    innerSubscription.context = context_4;\n                    subscription.add(innerSubscription);\n                }\n                this.destination.next(window_1);\n            }\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyError = function (err) {\n        this.error(err);\n    };\n    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    };\n    WindowToggleSubscriber.prototype.closeWindow = function (index) {\n        if (index === -1) {\n            return;\n        }\n        var contexts = this.contexts;\n        var context = contexts[index];\n        var window = context.window, subscription = context.subscription;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    };\n    return WindowToggleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=windowToggle.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen(closingSelector) {\n    return function windowWhenOperatorFunction(source) {\n        return source.lift(new WindowOperator(closingSelector));\n    };\n}\nvar WindowOperator = /*@__PURE__*/ (function () {\n    function WindowOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.closingSelector = closingSelector;\n        _this.openWindow();\n        return _this;\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n        if (this.closingNotification) {\n            this.closingNotification.unsubscribe();\n        }\n    };\n    WindowSubscriber.prototype.openWindow = function (innerSub) {\n        if (innerSub === void 0) {\n            innerSub = null;\n        }\n        if (innerSub) {\n            this.remove(innerSub);\n            innerSub.unsubscribe();\n        }\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var window = this.window = new Subject();\n        this.destination.next(window);\n        var closingNotifier = tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject) {\n            var err = errorObject.e;\n            this.destination.error(err);\n            this.window.error(err);\n        }\n        else {\n            this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n        }\n    };\n    return WindowSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=windowWhen.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nvar WithLatestFromOperator = /*@__PURE__*/ (function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        var _this = _super.call(this, destination) || this;\n        _this.observables = observables;\n        _this.project = project;\n        _this.toRespond = [];\n        var len = observables.length;\n        _this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            _this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            _this.add(subscribeToResult(_this, observable, observable, i));\n        }\n        return _this;\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=withLatestFrom.js.map\n","/** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_OuterSubscriber,_util_subscribeToResult,_.._internal_symbol_iterator PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zip() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var resultSelector = observables[observables.length - 1];\n    if (typeof resultSelector === 'function') {\n        observables.pop();\n    }\n    return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));\n}\nvar ZipOperator = /*@__PURE__*/ (function () {\n    function ZipOperator(resultSelector) {\n        this.resultSelector = resultSelector;\n    }\n    ZipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n    };\n    return ZipOperator;\n}());\nexport { ZipOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ZipSubscriber, _super);\n    function ZipSubscriber(destination, resultSelector, values) {\n        if (values === void 0) {\n            values = Object.create(null);\n        }\n        var _this = _super.call(this, destination) || this;\n        _this.iterators = [];\n        _this.active = 0;\n        _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;\n        _this.values = values;\n        return _this;\n    }\n    ZipSubscriber.prototype._next = function (value) {\n        var iterators = this.iterators;\n        if (isArray(value)) {\n            iterators.push(new StaticArrayIterator(value));\n        }\n        else if (typeof value[Symbol_iterator] === 'function') {\n            iterators.push(new StaticIterator(value[Symbol_iterator]()));\n        }\n        else {\n            iterators.push(new ZipBufferIterator(this.destination, this, value));\n        }\n    };\n    ZipSubscriber.prototype._complete = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        if (len === 0) {\n            this.destination.complete();\n            return;\n        }\n        this.active = len;\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (iterator.stillUnsubscribed) {\n                this.add(iterator.subscribe(iterator, i));\n            }\n            else {\n                this.active--; // not an observable\n            }\n        }\n    };\n    ZipSubscriber.prototype.notifyInactive = function () {\n        this.active--;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ZipSubscriber.prototype.checkIterators = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        var destination = this.destination;\n        // abort if not all of them have values\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n                return;\n            }\n        }\n        var shouldComplete = false;\n        var args = [];\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            var result = iterator.next();\n            // check to see if it's completed now that you've gotten\n            // the next value.\n            if (iterator.hasCompleted()) {\n                shouldComplete = true;\n            }\n            if (result.done) {\n                destination.complete();\n                return;\n            }\n            args.push(result.value);\n        }\n        if (this.resultSelector) {\n            this._tryresultSelector(args);\n        }\n        else {\n            destination.next(args);\n        }\n        if (shouldComplete) {\n            destination.complete();\n        }\n    };\n    ZipSubscriber.prototype._tryresultSelector = function (args) {\n        var result;\n        try {\n            result = this.resultSelector.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return ZipSubscriber;\n}(Subscriber));\nexport { ZipSubscriber };\nvar StaticIterator = /*@__PURE__*/ (function () {\n    function StaticIterator(iterator) {\n        this.iterator = iterator;\n        this.nextResult = iterator.next();\n    }\n    StaticIterator.prototype.hasValue = function () {\n        return true;\n    };\n    StaticIterator.prototype.next = function () {\n        var result = this.nextResult;\n        this.nextResult = this.iterator.next();\n        return result;\n    };\n    StaticIterator.prototype.hasCompleted = function () {\n        var nextResult = this.nextResult;\n        return nextResult && nextResult.done;\n    };\n    return StaticIterator;\n}());\nvar StaticArrayIterator = /*@__PURE__*/ (function () {\n    function StaticArrayIterator(array) {\n        this.array = array;\n        this.index = 0;\n        this.length = 0;\n        this.length = array.length;\n    }\n    StaticArrayIterator.prototype[Symbol_iterator] = function () {\n        return this;\n    };\n    StaticArrayIterator.prototype.next = function (value) {\n        var i = this.index++;\n        var array = this.array;\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n    };\n    StaticArrayIterator.prototype.hasValue = function () {\n        return this.array.length > this.index;\n    };\n    StaticArrayIterator.prototype.hasCompleted = function () {\n        return this.array.length === this.index;\n    };\n    return StaticArrayIterator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipBufferIterator = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ZipBufferIterator, _super);\n    function ZipBufferIterator(destination, parent, observable) {\n        var _this = _super.call(this, destination) || this;\n        _this.parent = parent;\n        _this.observable = observable;\n        _this.stillUnsubscribed = true;\n        _this.buffer = [];\n        _this.isComplete = false;\n        return _this;\n    }\n    ZipBufferIterator.prototype[Symbol_iterator] = function () {\n        return this;\n    };\n    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n    //    this is legit because `next()` will never be called by a subscription in this case.\n    ZipBufferIterator.prototype.next = function () {\n        var buffer = this.buffer;\n        if (buffer.length === 0 && this.isComplete) {\n            return { value: null, done: true };\n        }\n        else {\n            return { value: buffer.shift(), done: false };\n        }\n    };\n    ZipBufferIterator.prototype.hasValue = function () {\n        return this.buffer.length > 0;\n    };\n    ZipBufferIterator.prototype.hasCompleted = function () {\n        return this.buffer.length === 0 && this.isComplete;\n    };\n    ZipBufferIterator.prototype.notifyComplete = function () {\n        if (this.buffer.length > 0) {\n            this.isComplete = true;\n            this.parent.notifyInactive();\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.buffer.push(innerValue);\n        this.parent.checkIterators();\n    };\n    ZipBufferIterator.prototype.subscribe = function (value, index) {\n        return subscribeToResult(this, this.observable, this, index);\n    };\n    return ZipBufferIterator;\n}(OuterSubscriber));\n//# sourceMappingURL=zip.js.map\n","export class JoyrideStepInfo {\n    number: number;\n    name: string;\n    route: string;\n    actionType: 'NEXT' | 'PREV';\n}","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { JoyrideStepService } from \"./joyride-step.service\";\nimport { JoyrideOptionsService } from './joyride-options.service';\nimport { JoyrideOptions } from '../models/joyride-options.class';\nimport { Observable, of } from 'rxjs';\nimport { finalize } from \"rxjs/operators\";\nimport { JoyrideStepInfo } from '../models/joyride-step-info.class';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class JoyrideService {\n\n    private tourInProgress: boolean = false;\n    private tour$: Observable<JoyrideStepInfo>;\n\n    constructor(\n        @Inject(PLATFORM_ID) private platformId: Object,\n        public stepService: JoyrideStepService,\n        public optionsService: JoyrideOptionsService\n    ) { }\n\n    startTour(options?: JoyrideOptions): Observable<JoyrideStepInfo> {\n        if (!isPlatformBrowser(this.platformId)) {\n            return of(new JoyrideStepInfo());\n        }\n        if (!this.tourInProgress) {\n            this.tourInProgress = true;\n            if (options) {\n                this.optionsService.setOptions(options);\n            }\n            this.tour$ = this.stepService.startTour().pipe(\n                finalize(() => this.tourInProgress = false));\n            this.tour$.subscribe();\n        }\n        return this.tour$;\n    }\n\n    isTourInProgress(): boolean {\n        return this.tourInProgress;\n    }\n\n}\n","import { Component, Input, EventEmitter, Output } from \"@angular/core\";\n\n@Component({\n    selector: 'joyride-button',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.component.scss']\n})\nexport class JoyrideButtonComponent {\n    hover: boolean;\n    \n    @Input() \n    color: string;\n    \n    @Output()\n    clicked: EventEmitter<any> = new EventEmitter();\n\n    onClick() {\n        this.clicked.emit();\n    }\n}","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'joy-close-button',\n    template: `<svg viewBox=\"0 0 25 25\" xmlns=\"http://www.w3.org/2000/svg\">\n                <line x1=\"1\" y1=\"24\" \n                    x2=\"24\" y2=\"1\" \n                    stroke=\"black\" \n                    stroke-width=\"3\"/>\n                <line x1=\"1\" y1=\"1\" \n                    x2=\"24\" y2=\"24\" \n                    stroke=\"black\" \n                    stroke-width=\"3\"/>\n            </svg>`\n})\n\nexport class JoyrideCloseButtonComponent { }","\nimport { Component, Input, ViewEncapsulation } from \"@angular/core\";\n\n@Component({\n    selector: 'joyride-arrow',\n    templateUrl: './arrow.component.html',\n    styleUrls: ['./arrow.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class JoyrideArrowComponent {\n    @Input()\n    position: string = 'top';\n}","import { NgModule, ModuleWithProviders } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { JoyrideDirective } from './directives/joyride.directive';\nimport { JoyrideService } from './services/joyride.service';\nimport { JoyrideStepComponent } from \"./components/step/joyride-step.component\";\nimport { JoyrideButtonComponent } from \"./components/button/button.component\";\nimport { JoyrideCloseButtonComponent } from \"./components/close-button/close-button.component\";\nimport { JoyrideStepService } from \"./services/joyride-step.service\";\nimport { JoyrideBackdropService } from \"./services/joyride-backdrop.service\";\nimport { JoyrideArrowComponent } from \"./components/arrow/arrow.component\";\nimport { EventListenerService } from \"./services/event-listener.service\";\nimport { JoyrideStepsContainerService } from \"./services/joyride-steps-container.service\";\nimport { DocumentService } from \"./services/document.service\";\nimport { JoyrideOptionsService } from './services/joyride-options.service';\nimport { StepDrawerService } from './services/step-drawer.service';\nimport { DomRefService } from './services/dom.service';\nimport { LoggerService } from './services/logger.service';\nimport { RouterModule } from \"@angular/router\";\nimport { TemplatesService } from \"./services/templates.service\";\n\nexport const routerModuleForChild: ModuleWithProviders = RouterModule.forChild([]);\n\n@NgModule({\n    imports: [CommonModule, routerModuleForChild],\n    declarations: [\n        JoyrideDirective,\n        JoyrideStepComponent,\n        JoyrideArrowComponent,\n        JoyrideButtonComponent,\n        JoyrideCloseButtonComponent\n    ],\n    entryComponents: [JoyrideStepComponent],\n    exports: [\n        JoyrideDirective\n    ]\n})\nexport class JoyrideModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: JoyrideModule,\n            providers: [\n                JoyrideService,\n                JoyrideStepService,\n                JoyrideStepsContainerService,\n                JoyrideBackdropService,\n                EventListenerService,\n                DocumentService,\n                JoyrideOptionsService,\n                StepDrawerService,\n                DomRefService,\n                LoggerService,\n                TemplatesService\n            ]\n        }\n    }\n    static forChild(): ModuleWithProviders {\n        return {\n            ngModule: JoyrideModule,\n            providers: []\n        }\n    }\n}\n"],"names":["DEFAULT_THEME_COLOR","STEP_DEFAULT_POSITION","this","JoyrideOptionsService","options","stepsOrder","steps","stepDefaultPosition","logsEnabled","showCounter","showPrevButton","themeColor","hexToRgb","hex","replace","m","r","g","b","result","exec","parseInt","Injectable","ROUTE_SEPARATOR","stepOptions","Subject","stepsOriginal","JoyrideStepsContainerService","index","stepID","getStepsOrder","includes","split","step","getStepIndex","stepToAdd","filter","name","length","stepIndexToReplace","findIndex","push","position","stepHasBeenModified","next","forEach","_this","sortSteps","orderedSteps","find","getStepName","s","route","__extends","Error","platformId","body","documentElement","document","fakeDocument","DomRefService","isPlatformBrowser","window","fakeWindow","__param","Inject","PLATFORM_ID","Object","TemplatesService","template","_prevButton","_nextButton","_doneButton","_counter","NO_POSITION","joyrideStepsContainer","viewContainerRef","domService","router","templateService","EventEmitter","windowRef","getNativeWindow","JoyrideDirective","prevTemplate","setPrevButton","nextTemplate","setNextButton","doneTemplate","setDoneButton","counterTemplate","setCounter","JoyrideStep","stepPosition","targetViewContainer","setAsyncText","stepContent","stepContentParams","nextClicked","prevCliked","prev","tourDone","done","JoyrideError","url","substr","transformCssStyle","getComputedStyle","element","nativeElement","transform","isElementOrAncestorFixed","isElementFixed","isAncestorsFixed","parentElement","addStep","title","Observable","of","text","nodeName","__decorate","Input","TemplateRef","Output","Directive","selector","ViewContainerRef","Router","DOMService","setDocumentHeight","DocumentService","elementRef","getBoundingClientRect","top","left","scrollOffsets","getScrollOffsets","y","x","documentHeight","calculateDocumentHeight","node","regex","style","prop","getPropertyValue","scrollparent","getNativeDocument","test","scroll","parentNode","elementsFromPoint","keywordToDiscard","x1","getElementFixedLeft","getElementAbsoluteLeft","y1","getElementFixedTop","getElementAbsoluteTop","x2","width","y2","height","elements1","elements2","getFirstElementWithoutKeyword","documentRef","Math","max","scrollHeight","offsetHeight","clientHeight","winReference","docReference","pageXOffset","pageYOffset","compatMode","scrollLeft","scrollTop","elements","keyword","classList","toString","shift","documentService","optionsService","rendererFactory","setRenderer","JoyrideBackdropService","renderer","createRenderer","targetAbsoluteTop","getTargetTotalTop","targetAbsoluteLeft","getTargetTotalLeft","currentBackdropContainer","createElement","addClass","setStyle","backdropContent","appendChild","backdropTop","lastYScroll","getBackdropColor","backdropMiddleContainer","backdropMiddleContent","leftBackdrop","lastXScroll","targetBackdrop","offsetWidth","rightBackdrop","backdropBottom","removeLastBackdrop","drawCurrentBackdrop","lastBackdropContainer","handleVerticalScroll","handleHorizontalScroll","targetVC","scrollY","scrollX","newBackdropLeftWidth","handleTargetPartialWidth","visibleTargetWidth","newBackdropTopHeight","handleTargetPartialHeight","visibleTargetHeight","removeChild","undefined","RendererFactory2","EventListenerService","scrollUnlisten","listen","evt","scrollEvent","resizeUnlisten","resizeEvent","JOYRIDE","optionService","LoggerService","message","data","areLogsEnabled","console","debug","info","warn","error","STEP_MIN_WIDTH","STEP_MAX_WIDTH","CUSTOM_STEP_MAX_WIDTH_VW","STEP_HEIGHT","ASPECT_RATIO","DEFAULT_DISTANCE_FROM_MARGIN_TOP","DEFAULT_DISTANCE_FROM_MARGIN_LEFT","DEFAULT_DISTANCE_FROM_MARGIN_BOTTOM","DEFAULT_DISTANCE_FROM_MARGIN_RIGHT","injector","stepsContainerService","eventListenerService","logger","ARROW_SIZE","JoyrideStepComponent","joyrideStepService","get","JoyrideStepService","getDocumentHeight","subscriptions","subscribeToResizeEvents","setCustomTemplates","counter","getCounter","isCounterVisible","isPrevButtonVisible","getThemeColor","subscribe","val","checkRedraw","isCustomized","stepContainer","updateStepDimensions","dimensions","getDimensionsByAspectRatio","clientWidth","adjustDimensions","stepWidth","stepHeight","drawStep","setTimeout","redrawStep","getPrevButton","getNextButton","getDoneButton","stepHolder","targetWidth","targetHeight","setStepStyle","getStepPosition","numberOfSteps","getNumberOfSteps","counterData","total","customContent","ctx","customPrevButton","customNextButton","customDoneButton","customCounter","close","isFirstStep","isLastStep","setStyleTop","setStyleBottom","setStyleRight","setStyleLeft","setStyleCenter","setPosition","topPosition","DISTANCE_FROM_TARGET","stepAbsoluteTop","arrowTopPosition","leftPosition","stepAbsoluteLeft","arrowLeftPosition","arrowSize","adjustLeftPosition","adjustRightPosition","arrowPosition","autofixTopPosition","adjustTopPosition","adjustBottomPosition","autofixRightPosition","autofixBottomPosition","autofixLeftPosition","showArrow","currentWindowWidth","newLeftPos","deltaLeftPosition","newTopPos","deltaTopPosition","positionAlreadyFixed","aspectRatio","calcHeight","newWidth","newHeight","subscription","unsubscribe","ViewChild","ElementRef","Injector","Renderer2","componentFactoryResolver","appRef","StepDrawerService","ref","resolveComponentFactory","create","attachView","hostView","domElem","rootNodes","instance","changeDetectorRef","detectChanges","stepInstance","refMap","detachView","destroy","ComponentFactoryResolver","ApplicationRef","SCROLLBAR_SIZE","backDropService","eventListener","stepDrawerService","ReplaySubject","initViewportPositions","subscribeToScrollEvents","winTopPosition","winBottomPosition","innerHeight","startListeningScrollEvents","redraw","currentStep","redrawTarget","getStepDefaultPosition","draw","stepsObserver","currentStepIndex","navigateToStepPage","showStep","startListeningResizeEvents","subscribeToStepsUpdates","asObservable","removeCurrentStep","notifyTourIsFinished","scrollTo","stopListeningResizeEvents","remove","emit","stepRoute","getStepRoute","navigate","updatedStep","action","initSteps","isParentScrollable","scrollIntoView","scrollIfElementBeyondOtherElements","scrollIfStepAndTargetAreNotVisible","notifyStepClicked","stepInfo","number","actionType","complete","getFirstScrollableParent","scrollWhenTargetOrStepAreHiddenBottom","scrollWhenTargetOrStepAreHiddenTop","totalTargetBottom","getMaxTargetAndStepBottomPosition","scrollBy","totalTargetTop","getMaxTargetAndStepTopPosition","min","isElementBeyondOthers","extendStatics","d","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","tryCatchTarget","errorObject","e","tryCatcher","apply","arguments","tryCatch","fn","isFunction","_enable_super_gross_mode_that_will_cause_bad_things","config","Promise","useDeprecatedSynchronousErrorHandling","value","stack","hostReportError","err","empty","closed","isArray","isObject","UnsubscriptionError","_super","errors","call","map","i","join","tslib_1.__extends","Subscription","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","len","flattenUnsubscriptionErrors","sub","concat","add","teardown","EMPTY","_addParent","tmp","subscriptionIndex","indexOf","splice","parent","reduce","errs","rxSubscriber","Symbol","for","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","emptyObserver","isTrustedSubscriber","trustedSubscriber","rxSubscriberSymbol","SafeSubscriber","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","_parentSubscriber","observerOrNext","context","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","obj","OuterSubscriber","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","notifyComplete","InnerSubscriber","toSubscriber","nextOrObserver","observable","noop","pipeFromArray","fns","input","_isScalar","_subscribe","lift","operator","source","sink","_trySubscribe","promiseCtor","getPromiseCtor","resolve","reject","Symbol_observable","pipe","operations","_i","toPromise","subscribeToArray","array","subscribeToPromise","promise","then","getSymbolIterator","iterator","subscribeToIterable","iterable","Symbol_iterator","item","return","subscribeToObservable","obs","TypeError","isArrayLike","isPromise","subscribeTo","subscribeToResult","outerSubscriber","AuditSubscriber","durationSelector","hasValue","throttled","duration","innerSubscription","clearThrottle","Action","scheduler","work","schedule","state","delay","AsyncAction","pending","id","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","Scheduler","SchedulerAction","now","Date","AsyncScheduler","delegate","active","scheduled","async","isNumeric","parseFloat","isScheduler","BufferSubscriber","closingNotifier","buffer","BufferCountSubscriber","bufferSize","BufferSkipCountSubscriber","startBufferEvery","buffers","count","Context","BufferTimeSubscriber","bufferTimeSpan","bufferCreationInterval","maxBufferSize","contexts","openContext","timespanOnly","timeSpanOnlyState","closeAction","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferClose","dispatchBufferCreation","filledBufferContext","context_1","onBufferFull","context_2","closeContext","prevContext","arg","BufferToggleSubscriber","openings","closingSelector","closeBuffer","openBuffer","trySubscribe","BufferWhenSubscriber","subscribing","closingSubscription","CatchSubscriber","caught","err2","fromArray","NONE","CombineLatestSubscriber","resultSelector","values","observables","toRespond","unused","oldVal","_tryResultSelector","slice","emptyScheduled","scalar","args","pop","MapSubscriber","project","thisArg","MergeMapSubscriber","concurrent","Number","POSITIVE_INFINITY","hasCompleted","_tryNext","_innerSub","ish","CountSubscriber","predicate","_tryPredicate","DebounceSubscriber","durationSubscription","emitValue","DebounceTimeSubscriber","dueTime","debouncedSubscription","lastValue","clearDebounce","dispatchNext","debouncedNext","DefaultIfEmptySubscriber","defaultValue","isEmpty","throwError","dispatch","_a","Notification","kind","observe","observer","do","accept","toObservable","createNext","undefinedValueNotification","createError","createComplete","completeNotification","DelaySubscriber","queue","time","notification","delay_1","_schedule","scheduleNotification","DelayMessage","DelayWhenSubscriber","delayDurationSelector","completed","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelayObservable","subscriptionDelay","SubscriptionDelaySubscriber","sourceSubscribed","subscribeToSource","DeMaterializeSubscriber","DistinctSubscriber","keySelector","flushes","Set","clear","_useKeySelector","_finalizeNext","key","has","DistinctUntilChangedSubscriber","compare","hasKey","Boolean","ArgumentOutOfRangeError","FilterSubscriber","TapSubscriber","_tapNext","_tapError","_tapComplete","EmptyError","TakeSubscriber","EverySubscriber","everyValueMatch","SwitchFirstSubscriber","hasSubscription","ExhaustMapSubscriber","tryNext","ExpandSubscriber","subscribeToProjection","finalize","callback","FinallyOperator","FinallySubscriber","FindValueSubscriber","yieldIndex","ObjectUnsubscribedError","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","hasError","thrownError","AnonymousSubject","copy","GroupBySubscriber","elementSelector","subjectSelector","groups","attemptedToUnsubscribe","_group","Map","group","set","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","delete","groupSubject","refCountSubscription","InnerRefCountSubscription","IgnoreElementsSubscriber","IsEmptySubscriber","TakeLastSubscriber","ring","idx","MapToSubscriber","MaterializeSubscriber","ScanSubscriber","accumulator","_seed","hasSeed","defineProperty","enumerable","configurable","seed","MergeScanSubscriber","acc","refCount","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","sharedConnection","_connection","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","ConnectableSubscriber","higherOrderRefCount","ObserveOnSubscriber","scheduleMessage","ObserveOnMessage","OnErrorResumeNextSubscriber","nextSources","subscribeToNextSource","PairwiseSubscriber","hasPrev","BehaviorSubject","_value","getValue","AsyncSubject","hasNext","QueueAction","QueueScheduler","windowTime","_events","_infiniteTimeWindow","_bufferSize","_windowTime","nextInfiniteTimeWindow","nextTimeWindow","ReplayEvent","_getNow","_trimBufferThenGetEvents","eventsCount","spliceCount","RaceSubscriber","hasFirst","RepeatSubscriber","RepeatWhenSubscriber","notifier","sourceIsBeingSubscribedTo","retries","subscribeToRetries","retriesSubscription","notifications","RetrySubscriber","RetryWhenSubscriber","SampleSubscriber","SampleTimeSubscriber","period","dispatchNotification","SequenceEqualSubscriber","compareTo","comparor","_b","_oneComplete","SequenceEqualCompareToSubscriber","checkValues","a","areEqual","nextB","SingleSubscriber","seenValue","applySingleValue","singleValue","SkipSubscriber","SkipLastSubscriber","_skipCount","_count","_ring","skipCount","currentIndex","oldValue","SkipUntilSubscriber","SkipWhileSubscriber","skipping","tryCallPredicate","nextHandle","tasksByHandle","runIfPresent","handle","cb","Immediate","setImmediate","clearImmediate","AsapAction","AsapScheduler","asap","SubscribeOnObservable","delayTime","SwitchMapSubscriber","TakeUntilSubscriber","TakeWhileSubscriber","nextOrComplete","predicateResult","ThrottleSubscriber","_leading","_trailing","_hasValue","_sendValue","_throttled","send","throttle","tryDurationSelector","throttlingDone","ThrottleTimeSubscriber","leading","trailing","_hasTrailingValue","_trailingValue","TimeoutError","TimeoutWithSubscriber","absoluteTimeout","waitFor","withObservable","scheduleTimeout","dispatchTimeout","WindowSubscriber","openWindow","prevWindow","newWindow","WindowCountSubscriber","windowSize","startWindowEvery","windows","c","window_1","CountedSubject","_numberOfNextedValues","WindowTimeSubscriber","windowTimeSpan","windowCreationInterval","maxWindowSize","dispatchWindowClose","dispatchWindowCreation","dispatchWindowTimeSpanOnly","numberOfNextedValues","closeWindow","window_2","timeSpanState","WindowToggleSubscriber","openSubscription","context_3","context_4","inner","unsubscribeClosingNotification","closingNotification","WithLatestFromSubscriber","found","_tryProject","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","_tryresultSelector","nextResult","isComplete","stepService","JoyrideService","tourInProgress","setOptions","tour$","startTour","JoyrideStepInfo","JoyrideButtonComponent","clicked","JoyrideCloseButtonComponent","Component","JoyrideArrowComponent","routerModuleForChild","RouterModule","forChild","JoyrideModule","ngModule","JoyrideModule_1","providers","NgModule","imports","CommonModule","declarations","entryComponents","exports"],"mappings":"uvCAIO,2BAeP,OAfO,gBCDMA,oBAAsB,UACtBC,sBAAwB,0CAErC,aAGYC,gBAAqBF,oBACrBE,yBAA8BD,sBAC9BC,kBAAuB,EACvBA,kBAAuB,EACvBA,qBAA0B,EAC3BA,mBAgDX,OA/CIC,uBAAA,SAAWC,GACPF,KAAKG,WAAaD,EAAQE,MAC1BJ,KAAKK,oBAAsBH,EAAQG,oBAAsBH,EAAQG,oBAAsBL,KAAKK,oBAC5FL,KAAKM,iBAA6C,IAAxBJ,EAAQI,YAA8BJ,EAAQI,YAAcN,KAAKM,YAC3FN,KAAKO,iBAA6C,IAAxBL,EAAQK,YAA8BL,EAAQK,YAAcP,KAAKO,YAC3FP,KAAKQ,oBAAmD,IAA3BN,EAAQM,eAAiCN,EAAQM,eAAiBR,KAAKQ,eACpGR,KAAKS,WAAaP,EAAQO,WAAaP,EAAQO,WAAaT,KAAKS,YAGrER,6BAAA,WACI,OAAOD,KAAKU,SAASV,KAAKS,aAG9BR,0BAAA,WACI,OAAOD,KAAKS,YAGhBR,mCAAA,WACI,OAAOD,KAAKK,qBAGhBJ,0BAAA,WACI,OAAOD,KAAKG,YAGhBF,2BAAA,WACI,OAAOD,KAAKM,aAGhBL,6BAAA,WACI,OAAOD,KAAKO,aAGhBN,gCAAA,WACI,OAAOD,KAAKQ,gBAGRP,qBAAR,SAAiBU,GAEbA,EAAMA,EAAIC,QADW,mCACa,SAACC,EAAQC,EAAQC,EAAQC,GACvD,OAAOF,EAAIA,EAAIC,EAAIA,EAAIC,EAAIA,IAG/B,IAAIC,EAAS,4CAA4CC,KAAKP,GAC9D,OAAOM,EACAE,SAASF,EAAO,GAAI,SAAQE,SAASF,EAAO,GAAI,SAAQE,SAASF,EAAO,GAAI,IAAQ,MArDtFhB,cADZmB,cACYnB,MCFPoB,gBAAkB,4CAQpB,WACqBC,GAAAtB,iBAAAsB,EAHrBtB,yBAA4C,IAAIuB,QAK5CvB,KAAKwB,iBACLxB,KAAKI,eAgEb,OA7DIqB,gBAAA,SAAIC,GACA,OAAO1B,KAAKI,MAAMsB,IAGtBD,yBAAA,SAAaC,GACT,IACIC,EADa3B,KAAKsB,YAAYM,gBACVF,GAExB,OADgBC,GAAUA,EAAOE,SAASR,iBAAmBM,EAAOG,MAAMT,iBAAiB,GAAK,IAIpGI,4BAAA,SAAgBM,GACZ,OAAO/B,KAAKgC,aAAaD,GAAQ,GAGrCN,oBAAA,SAAQQ,GAEJ,GADgBjC,KAAKwB,cAAcU,OAAO,SAAAH,GAAQ,OAAAA,EAAKI,OAASF,EAAUE,OAAMC,OAAS,EAEpF,CACD,IAAIC,EAAqBrC,KAAKwB,cAAcc,UAAU,SAAAP,GAAQ,OAAAA,EAAKI,OAASF,EAAUE,OACtFnC,KAAKwB,cAAca,GAAsBJ,OAH7BjC,KAAKwB,cAAce,KAAKN,IAO5CR,6BAAA,WAEI,OADiBzB,KAAKsB,YAAYM,gBAChBQ,QAGtBX,wBAAA,SAAYM,EAAmBS,GAC3B,IAAId,EAAQ1B,KAAKgC,aAAaD,GAC9B/B,KAAKI,MAAMsB,GAAOc,SAAWA,EAC7BxC,KAAKyC,oBAAoBC,KAAK1C,KAAKI,MAAMsB,KAG7CD,sBAAA,WAAA,WACIzB,KAAKI,SACLJ,KAAKwB,cAAcmB,QAAQ,SAACZ,GAAS,OAAAa,EAAKxC,MAAMmC,iBAAUR,MAC1D/B,KAAK6C,aAGDpB,sBAAR,WAAA,WACQqB,KACa9C,KAAKsB,YAAYM,gBAEvBe,QAAQ,SAAChB,GAChB,IAAII,EAAOa,EAAKxC,MAAM2C,KAAK,SAAChB,GAAS,OAAAA,EAAKI,OAASS,EAAKI,YAAYrB,KAChEI,GAAMe,EAAaP,KAAKR,KAGhC/B,KAAKI,MAAY0C,WAGbrB,yBAAR,SAAqBM,GACjB,OAAO/B,KAAKI,MAAMkC,UAAU,SAACW,GAAM,OAAAlB,EAAKI,KAAOJ,EAAKmB,QAAUD,EAAEd,KAAOc,EAAEC,SAGrEzB,wBAAR,SAAoBE,GAEhB,OADeA,GAAUA,EAAOE,SAASR,iBAAmBM,EAAOG,MAAMT,iBAAiB,GAAKM,GAtE1FF,cADZL,2EAOqCnB,uBAAAA,mCANzBwB,+BCRN,4DACP,OADkC0B,kBAAAC,gCCQ9B,WACiCC,GAAArD,gBAAAqD,EAHzBrD,mBAAqCsD,QAAUC,oBAC/CvD,iBAA+BwD,SAAUxD,KAAKyD,oBAa1D,OATIC,4BAAA,WACI,OAAIC,kBAAkB3D,KAAKqD,YAAoBO,OACnC5D,KAAK6D,YAGrBH,8BAAA,WACI,OAAIC,kBAAkB3D,KAAKqD,YAAoBG,SACnCxD,KAAKyD,cAdZC,cADZtC,aAMQ0C,UAAAC,OAAOC,uFAAiCC,QAAAA,oBALpCP,kCCDN,cAoCP,OA9BIQ,0BAAA,SAAcC,GACVnE,KAAKoE,YAAcD,GAGvBD,0BAAA,WACI,OAAOlE,KAAKoE,aAGhBF,0BAAA,SAAcC,GACVnE,KAAKqE,YAAcF,GAGvBD,0BAAA,WACI,OAAOlE,KAAKqE,aAGhBH,0BAAA,SAAcC,GACVnE,KAAKsE,YAAcH,GAGvBD,0BAAA,WACI,OAAOlE,KAAKsE,aAEhBJ,uBAAA,SAAWC,GACPnE,KAAKuE,SAAWJ,GAGpBD,uBAAA,WACI,OAAOlE,KAAKuE,UAlCPL,cADZ9C,cACY8C,MCkBAM,YAAc,0CAkDvB,WACqBC,EACTC,EACSC,EACAC,EACAC,EACYxB,GALZrD,2BAAAyE,EACTzE,sBAAA0E,EACS1E,gBAAA2E,EACA3E,YAAA4E,EACA5E,qBAAA6E,EACY7E,gBAAAqD,EArCjCrD,kBAAwBwE,YAqBxBxE,UAA2B,IAAI8E,aAG/B9E,UAA2B,IAAI8E,aAG/B9E,UAA2B,IAAI8E,aAY3B9E,KAAK+E,UAAY/E,KAAK2E,WAAWK,oDAuDzC,OApDIC,4BAAA,WACI,GAAKtB,kBAAkB3D,KAAKqD,YAA5B,CACIrD,KAAKkF,cAAclF,KAAK6E,gBAAgBM,cAAcnF,KAAKkF,cAC3DlF,KAAKoF,cAAcpF,KAAK6E,gBAAgBQ,cAAcrF,KAAKoF,cAC3DpF,KAAKsF,cAActF,KAAK6E,gBAAgBU,cAAcvF,KAAKsF,cAC3DtF,KAAKwF,iBAAiBxF,KAAK6E,gBAAgBY,WAAWzF,KAAKwF,iBAC/D,IAAIzD,EAAO,IAAI2D,YASf,GARA3D,EAAKS,SAAWxC,KAAK2F,aACrB5D,EAAK6D,oBAAsB5F,KAAK0E,iBAChC1E,KAAK6F,aAAa9D,GAClBA,EAAK+D,YAAc9F,KAAK8F,YACxB/D,EAAKgE,kBAAoB/F,KAAK+F,kBAC9BhE,EAAKiE,YAAchG,KAAK0C,KACxBX,EAAKkE,WAAajG,KAAKkG,KACvBnE,EAAKoE,SAAWnG,KAAKoG,MAChBpG,KAAKmC,KAAM,MAAM,IAAIkE,aAAa,gFACvCtE,EAAKI,KAAOnC,KAAKmC,KACjBJ,EAAKmB,MAAyC,MAAjClD,KAAK4E,OAAO0B,IAAIC,OAAO,EAAG,GAAavG,KAAK4E,OAAO0B,IAAIC,OAAO,GAAKvG,KAAK4E,OAAO0B,IAC5FvE,EAAKyE,kBAAoBxG,KAAK+E,UAAU0B,iBAAiBzG,KAAK0E,iBAAiBgC,QAAQC,eAAeC,UACtG7E,EAAK8E,yBACD7G,KAAK8G,eAAe9G,KAAK0E,iBAAiBgC,UAC1C1G,KAAK+G,iBAAiB/G,KAAK0E,iBAAiBgC,QAAQC,cAAcK,eAEtEhH,KAAKyE,sBAAsBwC,QAAQlF,KAG/BkD,2BAAR,SAAuByB,GACnB,MAA2E,UAApE1G,KAAK+E,UAAU0B,iBAAiBC,EAAQC,eAAenE,UAG1DyC,yBAAR,SAAqBlD,GACb/B,KAAKkH,iBAAiBC,WACtBpF,EAAKmF,MAAQlH,KAAKkH,MAElBnF,EAAKmF,MAAQE,GAAGpH,KAAKkH,OAErBlH,KAAKqH,gBAAgBF,WACrBpF,EAAKsF,KAAOrH,KAAKqH,KAEjBtF,EAAKsF,KAAOD,GAAGpH,KAAKqH,OAIpBpC,6BAAR,SAAyB0B,GACrB,IAAKA,IAAkBA,EAAcK,cAAe,OAAO,EAC3D,IAAIF,EAA2F,UAA1E9G,KAAK+E,UAAU0B,iBAAiBE,EAAcK,eAAexE,SAClF,MAA+B,SAA3BmE,EAAcW,SACPR,IAEPA,GACQ9G,KAAK+G,iBAAiBJ,EAAcK,gBAxGpDO,YADCC,MAAM,4EAIPD,YADCC,yEAIDD,YADCC,sEAIDD,YADCC,qEAIDD,YADCC,6EAIDD,YADCC,+DACaC,aAAAA,0DAGdF,YADCC,0EACmBvD,QAAAA,2DAGpBsD,YADCC,+DACcC,aAAAA,2DAGfF,YADCC,+DACcC,aAAAA,2DAGfF,YADCC,+DACcC,aAAAA,2DAGfF,YADCC,+DACiBC,aAAAA,8DAGlBF,YADCG,gEACM5C,cAAAA,oDAGPyC,YADCG,gEACM5C,cAAAA,oDAGPyC,YADCG,gEACM5C,cAAAA,oDAzCEG,cAHZ0C,WACGC,SAAU,+BAqDL9D,UAAAC,OAAOC,4EALgCvC,8BAAAA,qEACdoG,kBAAAA,yDACGnE,eAAAA,sDACJoE,QAAAA,+CACS5D,kBAAAA,oEACOD,QAAAA,oBAnDpCgB,iCCnBT,WAA6B8C,GAAA/H,gBAAA+H,EACzB/H,KAAKgI,0BAyGb,OAtGIC,+BAAA,SAAmBC,GACf,OAAOA,EAAWvB,cAAcwB,wBAAwBC,KAG5DH,gCAAA,SAAoBC,GAChB,OAAOA,EAAWvB,cAAcwB,wBAAwBE,MAG5DJ,kCAAA,SAAsBC,GAClB,IAAII,EAAgBtI,KAAKuI,mBACzB,OAAOL,EAAWvB,cAAcwB,wBAAwBC,IAAME,EAAcE,GAGhFP,mCAAA,SAAuBC,GACnB,IAAII,EAAgBtI,KAAKuI,mBACzB,OAAOL,EAAWvB,cAAcwB,wBAAwBE,KAAOC,EAAcG,GAGjFR,8BAAA,WACIjI,KAAK0I,eAAiB1I,KAAK2I,2BAG/BV,8BAAA,WACI,OAAOjI,KAAK0I,gBAGhBT,qCAAA,SAAyBW,GAAzB,WACUC,EAAQ,wBAERC,EAAQ,SAACF,EAAWG,GACtB,OAAAnG,EAAKmF,WAAW/C,kBACXyB,iBAAiBmC,EAAM,MACvBI,iBAAiBD,IAIpBE,EAAe,SAACL,GAClB,OAAQA,GAAQA,IAAShG,EAAKmF,WAAWmB,oBAAoB5F,KAHlD,SAACsF,GAAc,OAAAC,EAAMM,KAAKL,EAAMF,EAAM,YAAcE,EAAMF,EAAM,cAAgBE,EAAMF,EAAM,eAKjGQ,CAAOR,GACPA,EACAK,EAAaL,EAAKS,YAHlBzG,EAAKmF,WAAWmB,oBAAoB5F,MAM9C,OAAO2F,EAAaL,IAGxBX,iCAAA,SAAqBQ,EAAWD,GAC5BxI,KAAK+H,WAAWmB,oBAAoBI,kBAAkBb,EAAGD,IAG7DP,kCAAA,SAAsBC,EAAwBpB,EAAyByC,GACnE,IAAMC,EAAK1C,EAAiB9G,KAAKyJ,oBAAoBvB,GAAclI,KAAK0J,uBAAuBxB,GACzFyB,EAAK7C,EAAiB9G,KAAK4J,mBAAmB1B,GAAclI,KAAK6J,sBAAsB3B,GACvF4B,EAAKN,EAAKtB,EAAWvB,cAAcwB,wBAAwB4B,MAAQ,EACnEC,EAAKL,EAAKzB,EAAWvB,cAAcwB,wBAAwB8B,OAAS,EAEpEC,EAAYlK,KAAK+H,WAAWmB,oBAAoBI,kBAAkBE,EAAIG,GACtEQ,EAAYnK,KAAK+H,WAAWmB,oBAAoBI,kBAAkBQ,EAAIE,GAE5E,OACIhK,KAAKoK,8BAA8BF,EAAWX,KAAsBrB,EAAWvB,eAC/E3G,KAAKoK,8BAA8BD,EAAWZ,KAAsBrB,EAAWvB,eAI/EsB,oCAAR,WACI,IAAMoC,EAAcrK,KAAK+H,WAAWmB,oBACpC,OAAOoB,KAAKC,IACRF,EAAY/G,KAAKkH,aACjBH,EAAY9G,gBAAgBiH,aAC5BH,EAAY/G,KAAKmH,aACjBJ,EAAY9G,gBAAgBkH,aAC5BJ,EAAY/G,KAAKoH,aACjBL,EAAY9G,gBAAgBmH,eAI5BzC,6BAAR,WACI,IAAM0C,EAAe3K,KAAK+H,WAAW/C,kBAC/B4F,EAAe5K,KAAK+H,WAAWmB,oBAGrC,OAAgC,MAA5ByB,EAAaE,aAA8BpC,EAAGkC,EAAaE,YAAarC,EAAGmC,EAAaG,aAG7D,cAA3BF,EAAaG,YAETtC,EAAGmC,EAAarH,gBAAgByH,WAChCxC,EAAGoC,EAAarH,gBAAgB0H,YAI/BxC,EAAGmC,EAAatH,KAAK0H,WAAYxC,EAAGoC,EAAatH,KAAK2H,YAG3DhD,0CAAR,SAAsCiD,EAAqBC,GACvD,KAAOD,EAAS,IAAMA,EAAS,GAAGE,UAAUC,WAAWxJ,SAASsJ,IAC5DD,EAASI,QAEb,OAAOJ,EAAS,IA3GXjD,cADZ7G,2EAI4CsC,eAAAA,2BAHhCuE,wCCqBT,WACqBsD,EACAC,EACAC,GAFAzL,qBAAAuL,EACAvL,oBAAAwL,EACAxL,qBAAAyL,EANbzL,iBAAsB,EACtBA,iBAAsB,EAO1BA,KAAK0L,wBAkLb,OA/KYC,wBAAR,WACI3L,KAAK4L,SAAW5L,KAAKyL,gBAAgBI,eAAe,KAAM,OAG9DF,iBAAA,SAAK5J,GACD/B,KAAKkI,WAAanG,EAAK6D,oBACvB5F,KAAK8L,kBAAoB9L,KAAK+L,kBAAkBhK,GAChD/B,KAAKgM,mBAAqBhM,KAAKiM,mBAAmBlK,GAElD/B,KAAKkM,yBAA2BlM,KAAK4L,SAASO,cAAc,OAC5DnM,KAAK4L,SAASQ,SAASpM,KAAKkM,yBAA0B,sBACtDlM,KAAK4L,SAASS,SAASrM,KAAKkM,yBAA0B,WAAY,SAClElM,KAAK4L,SAASS,SAASrM,KAAKkM,yBAA0B,MAAO,OAC7DlM,KAAK4L,SAASS,SAASrM,KAAKkM,yBAA0B,OAAQ,OAC9DlM,KAAK4L,SAASS,SAASrM,KAAKkM,yBAA0B,QAAS,QAC/DlM,KAAK4L,SAASS,SAASrM,KAAKkM,yBAA0B,SAAU,QAChElM,KAAK4L,SAASS,SAASrM,KAAKkM,yBAA0B,UAAW,QAEjElM,KAAKsM,gBAAkBtM,KAAK4L,SAASO,cAAc,OACnDnM,KAAK4L,SAASQ,SAASpM,KAAKsM,gBAAiB,oBAC7CtM,KAAK4L,SAASS,SAASrM,KAAKsM,gBAAiB,WAAY,YACzDtM,KAAK4L,SAASS,SAASrM,KAAKsM,gBAAiB,SAAU,QACvDtM,KAAK4L,SAASS,SAASrM,KAAKsM,gBAAiB,UAAW,QACxDtM,KAAK4L,SAASS,SAASrM,KAAKsM,gBAAiB,iBAAkB,UAC/DtM,KAAK4L,SAASW,YAAYvM,KAAKkM,yBAA0BlM,KAAKsM,iBAE9DtM,KAAKwM,YAAcxM,KAAK4L,SAASO,cAAc,OAC/CnM,KAAK4L,SAASQ,SAASpM,KAAKwM,YAAa,oBACzCxM,KAAK4L,SAASQ,SAASpM,KAAKwM,YAAa,gBACzCxM,KAAK4L,SAASS,SAASrM,KAAKwM,YAAa,QAAS,QAClDxM,KAAK4L,SAASS,SAASrM,KAAKwM,YAAa,SAAUxM,KAAK8L,kBAAoB9L,KAAKyM,YAAc,MAC/FzM,KAAK4L,SAASS,SAASrM,KAAKwM,YAAa,cAAe,KACxDxM,KAAK4L,SAASS,SAASrM,KAAKwM,YAAa,mBAAoB,QAAQxM,KAAKwL,eAAekB,6BACzF1M,KAAK4L,SAASW,YAAYvM,KAAKsM,gBAAiBtM,KAAKwM,aAErDxM,KAAK2M,wBAA0B3M,KAAK4L,SAASO,cAAc,OAC3DnM,KAAK4L,SAASQ,SAASpM,KAAK2M,wBAAyB,6BACrD3M,KAAK4L,SAASS,SAASrM,KAAK2M,wBAAyB,SAAU3M,KAAKkI,WAAWxB,QAAQC,cAAc8D,aAAe,MACpHzK,KAAK4L,SAASS,SAASrM,KAAK2M,wBAAyB,QAAS,QAC9D3M,KAAK4L,SAASS,SAASrM,KAAK2M,wBAAyB,cAAe,KACpE3M,KAAK4L,SAASW,YAAYvM,KAAKsM,gBAAiBtM,KAAK2M,yBAErD3M,KAAK4M,sBAAwB5M,KAAK4L,SAASO,cAAc,OACzDnM,KAAK4L,SAASQ,SAASpM,KAAK4M,sBAAuB,2BACnD5M,KAAK4L,SAASS,SAASrM,KAAK4M,sBAAuB,UAAW,QAC9D5M,KAAK4L,SAASS,SAASrM,KAAK4M,sBAAuB,QAAS,QAC5D5M,KAAK4L,SAASS,SAASrM,KAAK4M,sBAAuB,SAAU,QAC7D5M,KAAK4L,SAASW,YAAYvM,KAAK2M,wBAAyB3M,KAAK4M,uBAE7D5M,KAAK6M,aAAe7M,KAAK4L,SAASO,cAAc,OAChDnM,KAAK4L,SAASQ,SAASpM,KAAK6M,aAAc,oBAC1C7M,KAAK4L,SAASQ,SAASpM,KAAK6M,aAAc,iBAC1C7M,KAAK4L,SAASS,SAASrM,KAAK6M,aAAc,cAAe,KACzD7M,KAAK4L,SAASS,SAASrM,KAAK6M,aAAc,QAAS7M,KAAKgM,mBAAqBhM,KAAK8M,YAAc,MAChG9M,KAAK4L,SAASS,SAASrM,KAAK6M,aAAc,mBAAoB,QAAQ7M,KAAKwL,eAAekB,6BAC1F1M,KAAK4L,SAASW,YAAYvM,KAAK4M,sBAAuB5M,KAAK6M,cAE3D7M,KAAK+M,eAAiB/M,KAAK4L,SAASO,cAAc,OAClDnM,KAAK4L,SAASQ,SAASpM,KAAK+M,eAAgB,mBAC5C/M,KAAK4L,SAASS,SAASrM,KAAK+M,eAAgB,cAAe,KAC3D/M,KAAK4L,SAASS,SAASrM,KAAK+M,eAAgB,QAAS/M,KAAKkI,WAAWxB,QAAQC,cAAcqG,YAAc,MACzGhN,KAAK4L,SAASW,YAAYvM,KAAK4M,sBAAuB5M,KAAK+M,gBAE3D/M,KAAKiN,cAAgBjN,KAAK4L,SAASO,cAAc,OACjDnM,KAAK4L,SAASQ,SAASpM,KAAKiN,cAAe,oBAC3CjN,KAAK4L,SAASQ,SAASpM,KAAKiN,cAAe,kBAC3CjN,KAAK4L,SAASS,SAASrM,KAAKiN,cAAe,QAAS,QACpDjN,KAAK4L,SAASS,SAASrM,KAAKiN,cAAe,mBAAoB,QAAQjN,KAAKwL,eAAekB,6BAC3F1M,KAAK4L,SAASW,YAAYvM,KAAK4M,sBAAuB5M,KAAKiN,eAE3DjN,KAAKkN,eAAiBlN,KAAK4L,SAASO,cAAc,OAClDnM,KAAK4L,SAASQ,SAASpM,KAAKkN,eAAgB,oBAC5ClN,KAAK4L,SAASQ,SAASpM,KAAKkN,eAAgB,mBAC5ClN,KAAK4L,SAASS,SAASrM,KAAKkN,eAAgB,QAAS,QACrDlN,KAAK4L,SAASS,SAASrM,KAAKkN,eAAgB,SAAU,QACtDlN,KAAK4L,SAASS,SAASrM,KAAKkN,eAAgB,mBAAoB,QAAQlN,KAAKwL,eAAekB,6BAC5F1M,KAAK4L,SAASW,YAAYvM,KAAKsM,gBAAiBtM,KAAKkN,gBAErDlN,KAAKmN,qBACLnN,KAAKoN,sBACLpN,KAAKqN,sBAAwBrN,KAAKkM,0BAGtCP,mBAAA,WACI3L,KAAKmN,sBAGTxB,yBAAA,SAAa5J,GACT/B,KAAKgM,mBAAqBhM,KAAKiM,mBAAmBlK,GAClD/B,KAAK8L,kBAAoB9L,KAAK+L,kBAAkBhK,GAChD/B,KAAKsN,qBAAqBvL,GAC1B/B,KAAKuN,uBAAuBxL,IAGxB4J,8BAAR,SAA0B5J,GACtB,IAAIyL,EAAWzL,EAAK6D,oBACpB,OAAO7D,EAAK8E,yBACN7G,KAAKuL,gBAAgB3B,mBAAmB4D,EAAS9G,SACjD1G,KAAKuL,gBAAgB1B,sBAAsB2D,EAAS9G,UAGtDiF,+BAAR,SAA2B5J,GACvB,IAAIyL,EAAWzL,EAAK6D,oBAEpB,OAAO7D,EAAK8E,yBACN7G,KAAKuL,gBAAgB9B,oBAAoB+D,EAAS9G,SAClD1G,KAAKuL,gBAAgB7B,uBAAuB8D,EAAS9G,UAE/DiF,mBAAA,SAAO5J,EAAmBqH,GAClBpJ,KAAKyM,cAAgBrD,EAAOqE,UAC5BzN,KAAKyM,YAAcrD,EAAOqE,QACtBzN,KAAKkI,YACLlI,KAAKsN,qBAAqBvL,IAG9B/B,KAAK8M,cAAgB1D,EAAOsE,UAC5B1N,KAAK8M,YAAc1D,EAAOsE,QACtB1N,KAAKkI,YACLlI,KAAKuN,uBAAuBxL,KAKhC4J,mCAAR,SAA+B5J,GAC3B,IAAI4L,EAAuB5L,EAAK8E,yBAA2B7G,KAAKgM,mBAAqBhM,KAAKgM,mBAAqBhM,KAAK8M,YAEhHa,GAAwB,GACxB3N,KAAK4L,SAASS,SAASrM,KAAK6M,aAAc,QAASc,EAAuB,MAC1E3N,KAAK4L,SAASS,SAASrM,KAAK+M,eAAgB,QAAS/M,KAAKkI,WAAWxB,QAAQC,cAAcqG,YAAc,OAEzGhN,KAAK4N,yBAAyBD,IAI9BhC,qCAAR,SAAiCgC,GAC7B3N,KAAK4L,SAASS,SAASrM,KAAK6M,aAAc,QAAS,OACnD,IAAIgB,EAAqB7N,KAAKkI,WAAWxB,QAAQC,cAAcqG,YAAcW,EACzEE,GAAsB,EACtB7N,KAAK4L,SAASS,SAASrM,KAAK+M,eAAgB,QAASc,EAAqB,MAE1E7N,KAAK4L,SAASS,SAASrM,KAAK+M,eAAgB,QAAS,QAIrDpB,iCAAR,SAA6B5J,GACzB,IAAI+L,EAAuB/L,EAAK8E,yBAA2B7G,KAAK8L,kBAAoB9L,KAAK8L,kBAAoB9L,KAAKyM,YAE9GqB,GAAwB,GACxB9N,KAAK4L,SAASS,SAASrM,KAAKwM,YAAa,SAAUsB,EAAuB,MAC1E9N,KAAK4L,SAASS,SAASrM,KAAK2M,wBAAyB,SAAU3M,KAAKkI,WAAWxB,QAAQC,cAAc8D,aAAe,OAEpHzK,KAAK+N,0BAA0BD,IAI/BnC,sCAAR,SAAkCmC,GAC9B9N,KAAK4L,SAASS,SAASrM,KAAKwM,YAAa,SAAU,OACnD,IAAIwB,EAAsBhO,KAAKkI,WAAWxB,QAAQC,cAAc8D,aAAeqD,EAC3EE,GAAuB,EACvBhO,KAAK4L,SAASS,SAASrM,KAAK2M,wBAAyB,SAAUqB,EAAsB,MAErFhO,KAAK4L,SAASS,SAASrM,KAAK2M,wBAAyB,SAAU,QAI/DhB,+BAAR,WACQ3L,KAAKqN,wBACLrN,KAAK4L,SAASqC,YAAYzK,SAASF,KAAMtD,KAAKqN,uBAC9CrN,KAAKqN,2BAAwBa,IAI7BvC,gCAAR,WACI3L,KAAK4L,SAASW,YAAY/I,SAASF,KAAMtD,KAAKkM,2BAvMzCP,cADZvK,2EAoByC6G,iBAAAA,wDACDhI,uBAAAA,8DACCkO,kBAAAA,8BArB7BxC,wBCAb,OAHO,gDAcH,WAA6BF,EAAoD1D,GAApD/H,qBAAAyL,EAAoDzL,gBAAA+H,EAHjF/H,iBAA+B,IAAIuB,QACnCvB,iBAA+B,IAAIuB,QAG/BvB,KAAK4L,SAAWH,EAAgBI,eAAe,KAAM,cAyB7D,OAtBIuC,uCAAA,WAAA,WACIpO,KAAKqO,eAAiBrO,KAAK4L,SAAS0C,OAAO,WAAY,SAAU,SAAAC,GAC7D3L,EAAK4L,YAAY9L,MACbgL,QAAS9K,EAAKmF,WAAW/C,kBAAkB6F,YAC3C4C,QAAS7K,EAAKmF,WAAW/C,kBAAkB8F,iBAKvDsD,uCAAA,WAAA,WACIpO,KAAKyO,eAAiBzO,KAAK4L,SAAS0C,OAAO,SAAU,SAAU,SAAAC,GAC3D3L,EAAK8L,YAAYhM,KAAK6L,MAI9BH,sCAAA,WACIpO,KAAKqO,kBAGTD,sCAAA,WACIpO,KAAKyO,kBAhCAL,cADZhN,2EASiD+M,kBAAAA,yDAA+CzK,eAAAA,2BARpF0K,MCPPO,QAAU,0CAKZ,WAA6BC,GAAA5O,mBAAA4O,QA0BjC,OAxBIC,kBAAA,SAAMC,EAAkBC,gBAAAA,MAChB/O,KAAK4O,cAAcI,kBACnBC,QAAQC,MAAMP,QAAUG,EAASC,IAIzCF,iBAAA,SAAKC,EAAkBC,gBAAAA,MACf/O,KAAK4O,cAAcI,kBACnBC,QAAQE,KAAKR,QAAUG,EAASC,IAIxCF,iBAAA,SAAKC,EAAkBC,gBAAAA,MACf/O,KAAK4O,cAAcI,kBACnBC,QAAQG,KAAKT,QAAUG,EAASC,IAIxCF,kBAAA,SAAMC,EAAkBC,gBAAAA,MAChB/O,KAAK4O,cAAcI,kBACnBC,QAAQI,MAAMV,QAAUG,EAASC,IAxBhCF,cADZzN,2EAG+CnB,uBAAAA,mCAFnC4O,MCiBPS,eAAiB,IACjBC,eAAiB,IACjBC,yBAA2B,GAC3BC,YAAc,IACdC,aAAe,MACRC,iCAAmC,EACnCC,kCAAoC,EAC3CC,oCAAsC,EACtCC,mCAAqC,kCAiDvC,WACYC,EACSC,EACAC,EACA1E,EACAK,EACAsE,EACA1E,EACA3G,GAPT7E,cAAA+P,EACS/P,2BAAAgQ,EACAhQ,0BAAAiQ,EACAjQ,qBAAAuL,EACAvL,cAAA4L,EACA5L,YAAAkQ,EACAlQ,oBAAAwL,EACAxL,qBAAA6E,EAhDrB7E,eAAoBsP,eACpBtP,gBAAqByP,YAGrBzP,gBAAqB,EAkBbA,eAAoBmQ,WAQpBnQ,gDA0VZ,OArUIoQ,qBAAA,WAAA,WAEIpQ,KAAKqQ,mBAAqBrQ,KAAK+P,SAASO,IAAIC,oBAE5CvQ,KAAK0I,eAAiB1I,KAAKuL,gBAAgBiF,oBAC3CxQ,KAAKyQ,cAAclO,KAAKvC,KAAK0Q,2BAC7B1Q,KAAKkH,MAAQlH,KAAK+B,KAAKmF,MACvBlH,KAAKqH,KAAOrH,KAAK+B,KAAKsF,KAEtBrH,KAAK2Q,qBAEL3Q,KAAK4Q,QAAU5Q,KAAK6Q,aACpB7Q,KAAK8Q,iBAAmB9Q,KAAKwL,eAAesF,mBAC5C9Q,KAAK+Q,oBAAsB/Q,KAAKwL,eAAeuF,sBAC/C/Q,KAAKS,WAAaT,KAAKwL,eAAewF,gBAElChR,KAAKqH,MAAMrH,KAAKqH,KAAK4J,UAAU,SAAAC,GAAO,OAAAtO,EAAKuO,YAAYD,KACvDlR,KAAKkH,OAAOlH,KAAKkH,MAAM+J,UAAU,SAAAC,GAAO,OAAAtO,EAAKuO,YAAYD,MAGjEd,4BAAA,WACI,GAAIpQ,KAAKoR,eACLpR,KAAK4L,SAASS,SAASrM,KAAKqR,cAAc1K,cAAe,YAAa6I,yBAA2B,MACjGxP,KAAKsR,2BACF,CACHtR,KAAK4L,SAASS,SAASrM,KAAKqR,cAAc1K,cAAe,YAAa4I,eAAiB,MACvF,IAAIgC,EAAavR,KAAKwR,2BAClBxR,KAAKqR,cAAc1K,cAAc8K,YACjCzR,KAAKqR,cAAc1K,cAAc+D,aACjCgF,cAEJ6B,EAAavR,KAAK0R,iBAAiBH,EAAWxH,MAAOwH,EAAWtH,QAChEjK,KAAK2R,UAAYJ,EAAWxH,MAC5B/J,KAAK4R,WAAaL,EAAWtH,OAC7BjK,KAAK4L,SAASS,SAASrM,KAAKqR,cAAc1K,cAAe,QAAS3G,KAAK2R,UAAY,MACnF3R,KAAK4L,SAASS,SAASrM,KAAKqR,cAAc1K,cAAe,SAAU3G,KAAK4R,WAAa,MAEzF5R,KAAK6R,YAGDzB,wBAAR,SAAoBc,GAApB,WACe,MAAPA,GAEAY,WAAW,WACPlP,EAAKmP,cACN,IAIH3B,yBAAR,WACI,OACIpQ,KAAK+B,KAAK+D,aACV9F,KAAK6E,gBAAgBgM,cACrB7Q,KAAK6E,gBAAgBmN,iBACrBhS,KAAK6E,gBAAgBoN,iBACrBjS,KAAK6E,gBAAgBqN,iBAIrB9B,qBAAR,WACI,IAAI5N,EAAWxC,KAAK+B,KAAK8E,yBAA2B,QAAU,WAC9D7G,KAAK4L,SAASS,SAASrM,KAAKmS,WAAWxL,cAAe,WAAYnE,GAClExC,KAAK4L,SAASS,SAASrM,KAAKmS,WAAWxL,cAAe,YAAa3G,KAAK+B,KAAKyE,mBAC7ExG,KAAKoS,YAAcpS,KAAK+B,KAAK6D,oBAAoBc,QAAQC,cAAcwB,wBAAwB4B,MAC/F/J,KAAKqS,aAAerS,KAAK+B,KAAK6D,oBAAoBc,QAAQC,cAAcwB,wBAAwB8B,OAChGjK,KAAKgM,mBACY,UAAbxJ,EACMxC,KAAKuL,gBAAgB9B,oBAAoBzJ,KAAK+B,KAAK6D,oBAAoBc,SACvE1G,KAAKuL,gBAAgB7B,uBAAuB1J,KAAK+B,KAAK6D,oBAAoBc,SACpF1G,KAAK8L,kBACY,UAAbtJ,EACMxC,KAAKuL,gBAAgB3B,mBAAmB5J,KAAK+B,KAAK6D,oBAAoBc,SACtE1G,KAAKuL,gBAAgB1B,sBAAsB7J,KAAK+B,KAAK6D,oBAAoBc,SACnF1G,KAAKsS,gBAGDlC,uBAAR,WACI,IAAIzK,EAAe3F,KAAKgQ,sBAAsBuC,gBAAgBvS,KAAK+B,MAC/DyQ,EAAgBxS,KAAKgQ,sBAAsByC,mBAE/C,OADAzS,KAAK0S,aAAgB3Q,KAAM4D,EAAcgN,MAAOH,GACzC7M,EAAe,IAAM6M,GAGxBpC,+BAAR,WACIpQ,KAAK4S,cAAgB5S,KAAK+B,KAAK+D,YAC/B9F,KAAK6S,IAAM7S,KAAK+B,KAAKgE,kBACrB/F,KAAK8S,iBAAmB9S,KAAK6E,gBAAgBmN,gBAC7ChS,KAAK+S,iBAAmB/S,KAAK6E,gBAAgBoN,gBAC7CjS,KAAKgT,iBAAmBhT,KAAK6E,gBAAgBqN,gBAC7ClS,KAAKiT,cAAgBjT,KAAK6E,gBAAgBgM,cAG9CT,iBAAA,WACIpQ,KAAKqQ,mBAAmBnK,QAG5BkK,iBAAA,WACIpQ,KAAKqQ,mBAAmB3N,QAG5B0N,kBAAA,WACIpQ,KAAKqQ,mBAAmB6C,SAG5B9C,wBAAA,WACI,OAAOpQ,KAAKqQ,mBAAmB8C,eAGnC/C,uBAAA,WACI,OAAOpQ,KAAKqQ,mBAAmB+C,cAG3BhD,yBAAR,WACI,OAAQpQ,KAAK+B,KAAKS,UACd,IAAK,MACDxC,KAAKqT,cACL,MAEJ,IAAK,SACDrT,KAAKsT,iBACL,MAEJ,IAAK,QACDtT,KAAKuT,gBACL,MAEJ,IAAK,OACDvT,KAAKwT,eACL,MAEJ,IAAK,SACDxT,KAAKyT,iBACL,MAEJ,QACIzT,KAAKsT,mBAKTlD,wBAAR,WACIpQ,KAAKgQ,sBAAsB0D,YAAY1T,KAAK+B,KAAM,OAClD/B,KAAK2T,YAAc3T,KAAK8L,kBAAoB8H,qBAAuB5T,KAAK4R,WACxE5R,KAAK6T,gBAAkB7T,KAAK8L,kBAAoB8H,qBAAuB5T,KAAK4R,WAC5E5R,KAAK8T,iBAAmB9T,KAAK4R,WAE7B5R,KAAK+T,aAAe/T,KAAKoS,YAAc,EAAIpS,KAAK2R,UAAY,EAAI3R,KAAKgM,mBACrEhM,KAAKgU,iBAAmBhU,KAAKoS,YAAc,EAAIpS,KAAK2R,UAAY,EAAI3R,KAAKgM,mBACzEhM,KAAKiU,kBAAoBjU,KAAK2R,UAAY,EAAI3R,KAAKkU,UACnDlU,KAAKmU,qBACLnU,KAAKoU,sBACLpU,KAAKqU,cAAgB,SACrBrU,KAAKsU,sBAGDlE,0BAAR,WACIpQ,KAAKgQ,sBAAsB0D,YAAY1T,KAAK+B,KAAM,SAClD/B,KAAK2T,YAAc3T,KAAK8L,kBAAoB9L,KAAKqS,aAAe,EAAIrS,KAAK4R,WAAa,EACtF5R,KAAK6T,gBAAkB7T,KAAK8L,kBAAoB9L,KAAKqS,aAAe,EAAIrS,KAAK4R,WAAa,EAC1F5R,KAAK8T,iBAAmB9T,KAAK4R,WAAa,EAAI5R,KAAKkU,UAEnDlU,KAAK+T,aAAe/T,KAAKgM,mBAAqBhM,KAAKoS,YAAcwB,qBACjE5T,KAAKgU,iBAAmBhU,KAAKgM,mBAAqBhM,KAAKoS,YAAcwB,qBACrE5T,KAAKiU,mBAAqBjU,KAAKkU,UAC/BlU,KAAKuU,oBACLvU,KAAKwU,uBACLxU,KAAKqU,cAAgB,OACrBrU,KAAKyU,wBAGDrE,2BAAR,WACIpQ,KAAKgQ,sBAAsB0D,YAAY1T,KAAK+B,KAAM,UAClD/B,KAAK2T,YAAc3T,KAAK8L,kBAAoB9L,KAAKqS,aAAeuB,qBAChE5T,KAAK6T,gBAAkB7T,KAAK8L,kBAAoB9L,KAAKqS,aAAeuB,qBACpE5T,KAAK8T,kBAAoB9T,KAAKkU,UAE9BlU,KAAKiU,kBAAoBjU,KAAK2R,UAAY,EAAI3R,KAAKkU,UACnDlU,KAAK+T,aAAe/T,KAAKoS,YAAc,EAAIpS,KAAK2R,UAAY,EAAI3R,KAAKgM,mBACrEhM,KAAKgU,iBAAmBhU,KAAKoS,YAAc,EAAIpS,KAAK2R,UAAY,EAAI3R,KAAKgM,mBACzEhM,KAAKmU,qBACLnU,KAAKoU,sBACLpU,KAAKqU,cAAgB,MACrBrU,KAAK0U,yBAGDtE,yBAAR,WACIpQ,KAAKgQ,sBAAsB0D,YAAY1T,KAAK+B,KAAM,QAClD/B,KAAK2T,YAAc3T,KAAK8L,kBAAoB9L,KAAKqS,aAAe,EAAIrS,KAAK4R,WAAa,EACtF5R,KAAK6T,gBAAkB7T,KAAK8L,kBAAoB9L,KAAKqS,aAAe,EAAIrS,KAAK4R,WAAa,EAC1F5R,KAAK8T,iBAAmB9T,KAAK4R,WAAa,EAAI5R,KAAKkU,UAEnDlU,KAAK+T,aAAe/T,KAAKgM,mBAAqBhM,KAAK2R,UAAYiC,qBAC/D5T,KAAKgU,iBAAmBhU,KAAKgM,mBAAqBhM,KAAK2R,UAAYiC,qBACnE5T,KAAKiU,kBAAoBjU,KAAK2R,UAC9B3R,KAAKuU,oBACLvU,KAAKwU,uBACLxU,KAAKqU,cAAgB,QACrBrU,KAAK2U,uBAGDvE,2BAAR,WACIpQ,KAAK4L,SAASS,SAASrM,KAAKmS,WAAWxL,cAAe,WAAY,SAClE3G,KAAK4L,SAASS,SAASrM,KAAKmS,WAAWxL,cAAe,MAAO,OAC7D3G,KAAK4L,SAASS,SAASrM,KAAKmS,WAAWxL,cAAe,OAAQ,OAE9D3G,KAAKsR,uBAELtR,KAAK4L,SAASS,SACVrM,KAAKmS,WAAWxL,cAChB,YACA,cAAc3G,KAAK2R,UAAY,UAAS3R,KAAK4R,WAAa,SAE9D5R,KAAK4U,WAAY,GAGbxE,+BAAR,WACQpQ,KAAK+T,aAAe,IACpB/T,KAAKiU,kBAAoBjU,KAAKiU,kBAAoBjU,KAAK+T,aAAenE,kCACtE5P,KAAK+T,aAAenE,oCAIpBQ,gCAAR,WACI,IAAIyE,EAAqBrR,SAASF,KAAKmO,YACvC,GAAIzR,KAAKgU,iBAAmBhU,KAAK2R,UAAYkD,EAAoB,CAC7D,IAAIC,EACA9U,KAAK+T,cAAgB/T,KAAKgU,iBAAmBhU,KAAK2R,UAAY7B,mCAAqC+E,GACnGE,EAAoBD,EAAa9U,KAAK+T,aAE1C/T,KAAK+T,aAAee,EACpB9U,KAAKiU,kBAAoBjU,KAAKiU,kBAAoBc,IAIlD3E,8BAAR,WACQpQ,KAAK6T,gBAAkB,IACvB7T,KAAK8T,iBAAmB9T,KAAK8T,iBAAmB9T,KAAK2T,YAAchE,iCACnE3P,KAAK2T,YAAchE,mCAInBS,iCAAR,WACI,GAAIpQ,KAAK6T,gBAAkB7T,KAAK4R,WAAa5R,KAAK0I,eAAgB,CAC9D,IAAIsM,EACAhV,KAAK2T,aAAe3T,KAAK6T,gBAAkB7T,KAAK4R,WAAa/B,oCAAsC7P,KAAK0I,gBACxGuM,EAAmBD,EAAYhV,KAAK2T,YAExC3T,KAAK2T,YAAcqB,EACnBhV,KAAK8T,iBAAmB9T,KAAK8T,iBAAmBmB,IAIhD7E,+BAAR,WACQpQ,KAAKkV,qBACLlV,KAAKkQ,OAAOd,KAAK,qEACVpP,KAAK8L,kBAAoB9L,KAAK4R,WAAa5R,KAAKkU,UAAY,IACnElU,KAAKkV,sBAAuB,EAC5BlV,KAAKuT,kBAILnD,iCAAR,WACQpQ,KAAKgM,mBAAqBhM,KAAKoS,YAAcpS,KAAK2R,UAAY3R,KAAKkU,UAAY1Q,SAASF,KAAKmO,aAC7FzR,KAAKsT,kBAILlD,kCAAR,WACQpQ,KAAK8L,kBAAoB9L,KAAK4R,WAAa5R,KAAKkU,UAAYlU,KAAKqS,aAAerS,KAAK0I,gBACrF1I,KAAKwT,gBAILpD,gCAAR,WACQpQ,KAAKgM,mBAAqBhM,KAAK2R,UAAY3R,KAAKkU,UAAY,GAC5DlU,KAAKqT,eAILjD,oCAAR,WAAA,WACI,OAAOpQ,KAAKiQ,qBAAqBvB,YAAYuC,UAAU,WACnDrO,EAAKmP,gBAIL3B,uBAAR,WACIpQ,KAAKsR,uBACLtR,KAAK6R,YAGDzB,uCAAR,SAAmCrG,EAAeE,EAAgBkL,GAC9D,IAAIC,GAAcrL,EAAQE,IAAW,EAAIkL,GAEzC,OACIpL,MAFYqL,EAAaD,EAGzBlL,OAAQmL,IAGRhF,6BAAR,SAAyBrG,EAAeE,GACpC,IACIoL,EAAWtL,EACXuL,EAAYrL,EAQhB,OAPIF,EAAQwF,eAER+F,EALOvL,EAAQE,GAIfoL,EAAW9F,gBAEJxF,EAAQuF,iBACf+F,EAAW/F,eACXgG,EAAYhG,eAAiBI,eAG7B3F,MAAOsL,EACPpL,OAAQqL,IAIRlF,iCAAR,WACIpQ,KAAK2R,UAAY3R,KAAKqR,cAAc1K,cAAc8K,YAClDzR,KAAK4R,WAAa5R,KAAKqR,cAAc1K,cAAc+D,cAGvD0F,wBAAA,WACIpQ,KAAKyQ,cAAc9N,QAAQ,SAAA4S,GACvBA,EAAaC,iBAjVZjO,YAARC,+DAAe9B,aAAAA,mDACS6B,YAAxBkO,UAAU,qEAA0BC,YAAAA,wDACTnO,YAA3BkO,UAAU,wEAAgCC,YAAAA,2DAvClCtF,yuIA0CauF,UAAAA,iDACsBlU,8BAAAA,qEACD2M,sBAAAA,6DACLnG,iBAAAA,wDACP2N,WAAAA,kDACF/G,eAAAA,sDACQ5O,uBAAAA,8DACCiE,kBAAAA,8BAjD7BkM,mCC9BT,WACqByF,EACTC,EACA/F,GAFS/P,8BAAA6V,EACT7V,YAAA8V,EACA9V,cAAA+P,EALJ/P,yBAuCZ,OA/BI+V,iBAAA,SAAKhU,GAGD,IAAMiU,EAA0ChW,KAAK6V,yBAChDI,wBAAwB7F,sBACxB8F,OAAOlW,KAAK+P,UAGjB/P,KAAK8V,OAAOK,WAAWH,EAAII,UAG3B,IAAMC,EAAWL,EAAII,SAChBE,UAAU,GAGf9S,SAASF,KAAKiJ,YAAY8J,GAE1B,IAAME,EAAiCP,EAAIO,SAC3CA,EAASxU,KAAOA,EAChBiU,EAAIQ,kBAAkBC,gBACtB1U,EAAK2U,aAAeH,EAEpBvW,KAAK2W,OAAO5U,EAAKI,MAAQ6T,GAI7BD,mBAAA,SAAOhU,GACH/B,KAAK8V,OAAOc,WAAW5W,KAAK2W,OAAO5U,EAAKI,MAAMiU,UAC9CpW,KAAK2W,OAAO5U,EAAKI,MAAM0U,WAtClBd,cADZ3U,2EAMkD0V,0BAAAA,iEAC3BC,gBAAAA,uDACEpB,UAAAA,sBAPbI,MCSPiB,eAAiB,GACVpD,qBAAuB,GACvBzD,WAAa,iCAoBtB,WACqB8G,EACAC,EACAlH,EACAzE,EACAxD,EACAoP,EACV3L,EACU5G,GAPA5E,qBAAAiX,EACAjX,mBAAAkX,EACAlX,2BAAAgQ,EACAhQ,qBAAAuL,EACAvL,gBAAA+H,EACA/H,uBAAAmX,EACVnX,oBAAAwL,EACUxL,YAAA4E,EAZb5E,oBAAyB,EACzBA,uBAA4B,EAC5BA,mBAAgD,IAAIoX,cAYxDpX,KAAKqX,wBACLrX,KAAKsX,0BACLtX,KAAK0Q,8CAuMb,OApMYH,kCAAR,WACIvQ,KAAKuX,eAAiB,EACtBvX,KAAKwX,kBAAoBxX,KAAK+H,WAAW/C,kBAAkByS,YAAcT,gBAGrEzG,oCAAR,WAAA,WACIvQ,KAAKkX,cAAcQ,6BACnB1X,KAAKkX,cAAc1I,YAAYyC,UAAU,SAAA7H,GACrCxG,EAAK2U,eAAiBnO,EAAOqE,QAC7B7K,EAAK4U,kBAAoB5U,EAAK2U,eAAiB3U,EAAKmF,WAAW/C,kBAAkByS,YAAcT,eAC/FpU,EAAKqU,gBAAgBU,OAAO/U,EAAKgV,YAAaxO,MAI9CmH,oCAAR,WAAA,WACIvQ,KAAKkX,cAAcxI,YAAYuC,UAAU,WACrCrO,EAAKqU,gBAAgBY,aAAajV,EAAKgV,gBAIvCrH,qBAAR,SAAiBxO,GACbA,EAAKS,SAAWT,EAAKS,WAAagC,YAAcxE,KAAKwL,eAAesM,yBAA2B/V,EAAKS,SACpGxC,KAAKmX,kBAAkBY,KAAKhW,IAGhCwO,sBAAA,WAQI,OAPAvQ,KAAKgY,cAAgB,IAAIZ,cACzBpX,KAAKiY,iBAAmB,EACxBjY,KAAKuL,gBAAgBvD,oBACrBhI,KAAKkY,qBACLlY,KAAKmY,SAAS,QACdnY,KAAKkX,cAAckB,6BACnBpY,KAAKqY,0BACErY,KAAKgY,cAAcM,gBAG9B/H,kBAAA,WACIvQ,KAAKuY,oBACLvY,KAAKwY,uBACLxY,KAAK+H,WAAW/C,kBAAkByT,SAAS,EAAG,GAC9CzY,KAAKkX,cAAcwB,4BACnB1Y,KAAKiX,gBAAgB0B,UAGzBpI,iBAAA,WACIvQ,KAAKuY,oBACLvY,KAAKiY,kBAAoB,EACzBjY,KAAK4X,YAAY3R,WAAW2S,OAC5B5Y,KAAKkY,qBACLlY,KAAKmY,SAAS,SAGlB5H,iBAAA,WACIvQ,KAAKuY,oBACLvY,KAAKiY,kBAAoB,EACzBjY,KAAK4X,YAAY5R,YAAY4S,OAC7B5Y,KAAKkY,qBACLlY,KAAKmY,SAAS,SAGlB5H,wBAAA,WACI,OAAiC,IAA1BvQ,KAAKiY,kBAGhB1H,uBAAA,WACI,OAAOvQ,KAAKiY,mBAAqBjY,KAAKgQ,sBAAsByC,mBAAqB,GAG7ElC,+BAAR,WACI,IAAIsI,EAAY7Y,KAAKgQ,sBAAsB8I,aAAa9Y,KAAKiY,kBACzDY,GACA7Y,KAAK4E,OAAOmU,UAAUF,KAItBtI,oCAAR,WAAA,WACIvQ,KAAKgQ,sBAAsBvN,oBAAoBwO,UAAU,SAAA+H,GACjDpW,EAAKgV,YAAYzV,OAAS6W,EAAY7W,OACtCS,EAAKgV,YAAcoB,MAKvBzI,qBAAR,SAAiB0I,GAAjB,WACInH,WAAW,WACPlP,EAAKoN,sBAAsBkJ,YAC3BtW,EAAKgV,YAAchV,EAAKoN,sBAAsBM,IAAI1N,EAAKqV,kBAEnDrV,EAAKuW,mBAAmBvW,EAAKgV,YAAYhS,oBAAoBc,QAAQC,gBACrE/D,EAAKgV,YAAYhS,oBAAoBc,QAAQC,cAAcyS,iBAE/DxW,EAAKyW,qCACLzW,EAAKqU,gBAAgBc,KAAKnV,EAAKgV,aAC/BhV,EAAKiP,SAASjP,EAAKgV,aACnBhV,EAAK0W,qCACL1W,EAAK2W,kBAAkBN,IACxB,IAGC1I,8BAAR,SAA0B0I,GACtB,IAAIO,GACAC,OAAQzZ,KAAKiY,iBACb9V,KAAMnC,KAAK4X,YAAYzV,KACvBe,MAAOlD,KAAK4X,YAAY1U,MACxBwW,WAAYT,GAEhBjZ,KAAKgY,cAActV,KAAK8W,IAGpBjJ,iCAAR,WACIvQ,KAAK4X,YAAYzR,SAASyS,OAC1B5Y,KAAKgY,cAAc2B,YAGfpJ,+BAAR,SAA2B5J,GACvB,OAAO3G,KAAKuL,gBAAgBqO,yBAAyBjT,KAAmB3G,KAAK+H,WAAWmB,oBAAoB5F,MAGxGiN,8BAAR,WACIvQ,KAAKmX,kBAAkBwB,OAAO3Y,KAAK4X,cAG/BrH,+CAAR,WACIvQ,KAAK6Z,wCACL7Z,KAAK8Z,sCAGDvJ,kDAAR,WACI,IAAIwJ,EAAoB/Z,KAAKga,oCACzBD,EAAoB/Z,KAAKwX,mBACzBxX,KAAK+H,WAAW/C,kBAAkBiV,SAAS,EAAGF,EAAoB/Z,KAAKwX,oBAIvEjH,+CAAR,WACI,IAAI2J,EAAiBla,KAAKma,iCACtBD,EAAiBla,KAAKuX,gBACtBvX,KAAK+H,WAAW/C,kBAAkBiV,SAAS,EAAGC,EAAiBla,KAAKuX,iBAIpEhH,8CAAR,WACI,IAAIzE,EAAoB9L,KAAKuL,gBAAgB1B,sBAAsB7J,KAAK4X,YAAYhS,oBAAoBc,SACxG,MAAkC,QAA9B1G,KAAK4X,YAAYpV,SACVsJ,EAAoB9L,KAAK4X,YAAYlB,aAAarE,aACpB,WAA9BrS,KAAK4X,YAAYpV,SAEpBsJ,EACA9L,KAAK4X,YAAYlB,aAAarE,aAC9BrS,KAAK4X,YAAYlB,aAAa9E,WAC9BzB,WACAyD,qBAEiC,UAA9B5T,KAAK4X,YAAYpV,UAAsD,SAA9BxC,KAAK4X,YAAYpV,SAC1D8H,KAAKC,IACRuB,EAAoB9L,KAAK4X,YAAYlB,aAAarE,aAClDvG,EAAoB9L,KAAK4X,YAAYlB,aAAarE,aAAe,EAAIrS,KAAK4X,YAAYlB,aAAa9E,WAAa,QAHjH,GAQHrB,2CAAR,WACI,IAAIzE,EAAoB9L,KAAKuL,gBAAgB1B,sBAAsB7J,KAAK4X,YAAYhS,oBAAoBc,SACxG,MAAkC,QAA9B1G,KAAK4X,YAAYpV,SACVsJ,GAAqB9L,KAAK4X,YAAYlB,aAAa9E,WAAazB,WAAayD,sBAC/C,WAA9B5T,KAAK4X,YAAYpV,SACjBsJ,EAC8B,UAA9B9L,KAAK4X,YAAYpV,UAAsD,SAA9BxC,KAAK4X,YAAYpV,SAC1D8H,KAAK8P,IACRtO,EACAA,EAAoB9L,KAAK4X,YAAYlB,aAAarE,aAAe,EAAIrS,KAAK4X,YAAYlB,aAAa9E,WAAa,QAHjH,GAQHrB,+CAAR,WAEQvQ,KAAKuL,gBAAgB8O,sBACjBra,KAAK4X,YAAYhS,oBAAoBc,QACrC1G,KAAK4X,YAAY/Q,yBACjB,aAGJ7G,KAAK+H,WAAW/C,kBAAkByT,SAAS,EAAG,GAI9CzY,KAAKuL,gBAAgB8O,sBACjBra,KAAK4X,YAAYhS,oBAAoBc,QACrC1G,KAAK4X,YAAY/Q,yBACjB,aAGJ7G,KAAK+H,WAAW/C,kBAAkByT,SAAS,EAAGzY,KAAK+H,WAAWmB,oBAAoB5F,KAAKkH,eAxNtF+F,cADZnP,2EAUyCuK,wBAAAA,+DACFyC,sBAAAA,6DACQ3M,8BAAAA,qEACNwG,iBAAAA,wDACLvE,eAAAA,sDACOqS,mBAAAA,0DACb9V,uBAAAA,8DACE6H,QAAAA,oBAhBpByI,MCZT+J,cAAgB,SAASC,EAAGvZ,GAI5B,OAHAsZ,cAAgBrW,OAAOuW,iBAChBC,wBAA2BC,OAAS,SAAUH,EAAGvZ,GAAKuZ,EAAEE,UAAYzZ,IACvE,SAAUuZ,EAAGvZ,GAAK,IAAK,IAAI2Z,KAAK3Z,EAAOA,EAAE4Z,eAAeD,KAAIJ,EAAEI,GAAK3Z,EAAE2Z,MACpDJ,EAAGvZ,IAG5B,SAAgBmC,YAAUoX,EAAGvZ,GAEzB,SAAS6Z,IAAO7a,KAAK8a,YAAcP,EADnCD,cAAcC,EAAGvZ,GAEjBuZ,EAAEQ,UAAkB,OAAN/Z,EAAaiD,OAAOiS,OAAOlV,IAAM6Z,EAAGE,UAAY/Z,EAAE+Z,UAAW,IAAIF,GCxBnF,ICAIG,eDAOC,aAAgBC,MCC3B,SAASC,aACL,IACI,OAAOH,eAAeI,MAAMpb,KAAMqb,WAEtC,MAAOH,GAEH,OADAD,YAAYC,EAAIA,EACTD,aAGf,SAAgBK,SAASC,GAErB,OADAP,eAAiBO,EACVJ,WCbX,SAAgBK,WAAW/S,GACvB,MAAoB,mBAANA,ECDlB,IAAIgT,qDAAsD,EAK/CC,QAKPC,aAASzN,EAST0N,0CAA0CC,GAClCA,IAC0B,IAAIzY,OACqG0Y,MAKvIL,oDAAsDI,GAE1DD,4CACI,OAAOH,sDCzBf,SAAgBM,gBAAgBC,GAC5BlK,WAAW,WAAc,MAAMkK,ICNnC,IAEWC,OACPC,QAAQ,EACRxZ,KAAM,SAAUmZ,KAChBxM,MAAO,SAAU2M,GACb,GAAIN,OAAOE,sCACP,MAAMI,EAGND,gBAAgBC,IAGxBrC,SAAU,cCbHwC,QAAUzB,MAAMyB,kBAAsB1T,GAAK,OAAOA,GAAyB,iBAAbA,EAAErG,QCA3E,SAAgBga,SAAS3T,GACrB,OAAY,MAALA,GAA0B,iBAANA,ECI/B,IAAI4T,oBAAqC,SAAUC,GAE/C,SAASD,EAAoBE,GACzB,IAAI3Z,EAAQ0Z,EAAOE,KAAKxc,KAAMuc,EAC1BA,EAAOna,OAAS,8CAAgDma,EAAOE,IAAI,SAAUT,EAAKU,GAAK,OAAOA,EAAI,EAAI,KAAOV,EAAI3Q,aAAesR,KAAK,QAAU,KAAO3c,KAIlK,OAHA4C,EAAM2Z,OAASA,EACf3Z,EAAMT,KAAO,sBACb8B,OAAOuW,eAAe5X,EAAOyZ,EAAoBtB,WAC1CnY,EAEX,OATAga,YAAkBP,EAAqBC,GAShCD,GACTjZ,OCEEyZ,aAA8B,WAK9B,SAASA,EAAarH,GAKlBxV,KAAKkc,QAAS,EAEdlc,KAAK8c,QAAU,KAEf9c,KAAK+c,SAAW,KAEhB/c,KAAKgd,eAAiB,KAClBxH,IACAxV,KAAKid,aAAezH,GAsJN,IAAUyG,EAIhC,OAjJAY,EAAa9B,UAAUvF,YAAc,WACjC,IACI+G,EADAW,GAAY,EAEhB,IAAIld,KAAKkc,OAAT,CAGA,IAAeY,EAAN9c,KAAmB8c,QAASC,EAA5B/c,KAA0C+c,SAAUE,EAApDjd,KAAsEid,aAAcD,EAApFhd,KAAwGgd,eACjHhd,KAAKkc,QAAS,EACdlc,KAAK8c,QAAU,KACf9c,KAAK+c,SAAW,KAGhB/c,KAAKgd,eAAiB,KAKtB,IAJA,IAAItb,GAAS,EACTyb,EAAMJ,EAAWA,EAAS3a,OAAS,EAGhC0a,GACHA,EAAQnE,OAAO3Y,MAGf8c,IAAYpb,EAAQyb,GAAOJ,EAASrb,IAAU,KAElD,GAAI8Z,WAAWyB,GACC3B,SAAS2B,GAAcT,KAAKxc,QAC1Bib,cACViC,GAAY,EACZX,EAASA,IAAWtB,YAAYC,aAAamB,oBACzCe,4BAA4BnC,YAAYC,EAAEqB,SAAWtB,YAAYC,KAG7E,GAAIiB,QAAQa,GAGR,IAFAtb,GAAS,EACTyb,EAAMH,EAAe5a,SACZV,EAAQyb,GAAK,CAClB,IAAIE,EAAML,EAAetb,GACzB,GAAI0a,SAASiB,GAET,GADY/B,SAAS+B,EAAI7H,aAAagH,KAAKa,KAC7BpC,YAAa,CACvBiC,GAAY,EACZX,EAASA,MACT,IAAIP,EAAMf,YAAYC,EAClBc,aAAeK,oBACfE,EAASA,EAAOe,OAAOF,4BAA4BpB,EAAIO,SAGvDA,EAAOha,KAAKyZ,IAMhC,GAAIkB,EACA,MAAM,IAAIb,oBAAoBE,KAqBtCM,EAAa9B,UAAUwC,IAAM,SAAUC,GACnC,IAAKA,GAAaA,IAAaX,EAAaY,MACxC,OAAOZ,EAAaY,MAExB,GAAID,IAAaxd,KACb,OAAOA,KAEX,IAAIuV,EAAeiI,EACnB,cAAeA,GACX,IAAK,WACDjI,EAAe,IAAIsH,EAAaW,GACpC,IAAK,SACD,GAAIjI,EAAa2G,QAA8C,mBAA7B3G,EAAaC,YAC3C,OAAOD,EAEN,GAAIvV,KAAKkc,OAEV,OADA3G,EAAaC,cACND,EAEN,GAAuC,mBAA5BA,EAAamI,WAA6C,CACtE,IAAIC,EAAMpI,GACVA,EAAe,IAAIsH,GACNG,gBAAkBW,GAEnC,MACJ,QACI,MAAM,IAAIva,MAAM,yBAA2Boa,EAAW,2BAK9D,OAHoBxd,KAAKgd,iBAAmBhd,KAAKgd,oBACnCza,KAAKgT,GACnBA,EAAamI,WAAW1d,MACjBuV,GAQXsH,EAAa9B,UAAUpC,OAAS,SAAUpD,GACtC,IAAI9E,EAAgBzQ,KAAKgd,eACzB,GAAIvM,EAAe,CACf,IAAImN,EAAoBnN,EAAcoN,QAAQtI,IACnB,IAAvBqI,GACAnN,EAAcqN,OAAOF,EAAmB,KAKpDf,EAAa9B,UAAU2C,WAAa,SAAUK,GAC1C,IAAejB,EAAN9c,KAAmB8c,QAASC,EAA5B/c,KAA0C+c,SAC9CD,GAAWA,IAAYiB,EAKlBhB,GAK6B,IAA9BA,EAASc,QAAQE,IAEtBhB,EAASxa,KAAKwb,GAJd/d,KAAK+c,UAAYgB,GALjB/d,KAAK8c,QAAUiB,GAavBlB,EAAaY,QAAmBxB,EAG9B,IAAIY,GAFIX,QAAS,EACRD,GAEJY,KAEX,SACSO,4BAA4Bb,GACjC,OAAOA,EAAOyB,OAAO,SAAUC,EAAMjC,GAAO,OAAOiC,EAAKX,OAAQtB,aAAeK,oBAAuBL,EAAIO,OAASP,QClMvH,IAAWkC,aAAkC,mBAAXC,QAA+C,mBAAfA,OAAOC,IACrDD,OAAOC,IAAI,gBACzB,iBCeFC,WAA4B,SAAU/B,GAUtC,SAAS+B,EAAWC,EAAmBjP,EAAOsK,GAC1C,IAAI/W,EAAQ0Z,EAAOE,KAAKxc,OAASA,KAKjC,OAJiB4C,EAAM2b,eAAiB,KACvB3b,EAAM4b,iBAAkB,EACxB5b,EAAM6b,oBAAqB,EAC5C7b,EAAM8b,WAAY,EACVrD,UAAUjZ,QACd,KAAK,EACDQ,EAAM+b,YAAcC,MACpB,MACJ,KAAK,EACD,IAAKN,EAAmB,CACpB1b,EAAM+b,YAAcC,MACpB,MAEJ,GAAiC,iBAAtBN,EAAgC,CAGvC,GAAIO,oBAAoBP,GAAoB,CACxC,IAAIQ,EAAoBR,EAAkBS,gBAC1Cnc,EAAM6b,mBAAqBK,EAAkBL,mBAC7C7b,EAAM+b,YAAcG,EACpBA,EAAkBvB,IAAI3a,QAGtBA,EAAM6b,oBAAqB,EAC3B7b,EAAM+b,YAAc,IAAIK,eAAepc,EAAO0b,GAElD,MAER,QACI1b,EAAM6b,oBAAqB,EAC3B7b,EAAM+b,YAAc,IAAIK,eAAepc,EAAO0b,EAAmBjP,EAAOsK,GAGhF,OAAO/W,EAuFX,OAnIAga,YAAkByB,EAAY/B,GA8C9B+B,EAAWtD,UAAUgE,cAAsB,WAAc,OAAO/e,MAahEqe,EAAWnI,OAAS,SAAUxT,EAAM2M,EAAOsK,GACvC,IAAIsF,EAAa,IAAIZ,EAAW3b,EAAM2M,EAAOsK,GAE7C,OADAsF,EAAWR,oBAAqB,EACzBQ,GASXZ,EAAWtD,UAAUrY,KAAO,SAAUmZ,GAC7B7b,KAAK0e,WACN1e,KAAKkf,MAAMrD,IAUnBwC,EAAWtD,UAAU1L,MAAQ,SAAU2M,GAC9Bhc,KAAK0e,YACN1e,KAAK0e,WAAY,EACjB1e,KAAKmf,OAAOnD,KASpBqC,EAAWtD,UAAUpB,SAAW,WACvB3Z,KAAK0e,YACN1e,KAAK0e,WAAY,EACjB1e,KAAKof,cAGbf,EAAWtD,UAAUvF,YAAc,WAC3BxV,KAAKkc,SAGTlc,KAAK0e,WAAY,EACjBpC,EAAOvB,UAAUvF,YAAYgH,KAAKxc,QAEtCqe,EAAWtD,UAAUmE,MAAQ,SAAUrD,GACnC7b,KAAK2e,YAAYjc,KAAKmZ,IAE1BwC,EAAWtD,UAAUoE,OAAS,SAAUnD,GACpChc,KAAK2e,YAAYtP,MAAM2M,GACvBhc,KAAKwV,eAET6I,EAAWtD,UAAUqE,UAAY,WAC7Bpf,KAAK2e,YAAYhF,WACjB3Z,KAAKwV,eAGT6I,EAAWtD,UAAUsE,uBAAyB,WAC1C,IAAevC,EAAN9c,KAAmB8c,QAASC,EAA5B/c,KAA0C+c,SAQnD,OAPA/c,KAAK8c,QAAU,KACf9c,KAAK+c,SAAW,KAChB/c,KAAKwV,cACLxV,KAAKkc,QAAS,EACdlc,KAAK0e,WAAY,EACjB1e,KAAK8c,QAAUA,EACf9c,KAAK+c,SAAWA,EACT/c,MAEJqe,GACTxB,cAOEmC,eAAgC,SAAU1C,GAE1C,SAAS0C,EAAeM,EAAmBC,EAAgBlQ,EAAOsK,GAC9D,IAEIjX,EAFAE,EAAQ0Z,EAAOE,KAAKxc,OAASA,KACjC4C,EAAM0c,kBAAoBA,EAE1B,IAAIE,EAAU5c,EAoBd,OAnBI4Y,WAAW+D,GACX7c,EAAO6c,EAEFA,IACL7c,EAAO6c,EAAe7c,KACtB2M,EAAQkQ,EAAelQ,MACvBsK,EAAW4F,EAAe5F,SACtB4F,IAAmBX,QAEfpD,YADJgE,EAAUvb,OAAOiS,OAAOqJ,IACD/J,cACnB5S,EAAM2a,IAAIiC,EAAQhK,YAAYiK,KAAKD,IAEvCA,EAAQhK,YAAc5S,EAAM4S,YAAYiK,KAAK7c,KAGrDA,EAAM8c,SAAWF,EACjB5c,EAAMsc,MAAQxc,EACdE,EAAMuc,OAAS9P,EACfzM,EAAMwc,UAAYzF,EACX/W,EA2GX,OApIAga,YAAkBoC,EAAgB1C,GA2BlC0C,EAAejE,UAAUrY,KAAO,SAAUmZ,GACtC,IAAK7b,KAAK0e,WAAa1e,KAAKkf,MAAO,CAC/B,IAAII,EAAoBtf,KAAKsf,kBACxB5D,OAAOE,uCAA0C0D,EAAkBb,mBAG/Dze,KAAK2f,gBAAgBL,EAAmBtf,KAAKkf,MAAOrD,IACzD7b,KAAKwV,cAHLxV,KAAK4f,aAAa5f,KAAKkf,MAAOrD,KAO1CmD,EAAejE,UAAU1L,MAAQ,SAAU2M,GACvC,IAAKhc,KAAK0e,UAAW,CACjB,IAAIY,EAAoBtf,KAAKsf,kBACzB1D,EAAwCF,OAAOE,sCACnD,GAAI5b,KAAKmf,OACAvD,GAA0C0D,EAAkBb,oBAK7Dze,KAAK2f,gBAAgBL,EAAmBtf,KAAKmf,OAAQnD,GACrDhc,KAAKwV,gBALLxV,KAAK4f,aAAa5f,KAAKmf,OAAQnD,GAC/Bhc,KAAKwV,oBAOR,GAAK8J,EAAkBb,mBAQpB7C,GACA0D,EAAkBf,eAAiBvC,EACnCsD,EAAkBd,iBAAkB,GAGpCzC,gBAAgBC,GAEpBhc,KAAKwV,kBAfuC,CAE5C,GADAxV,KAAKwV,cACDoG,EACA,MAAMI,EAEVD,gBAAgBC,MAc5BgD,EAAejE,UAAUpB,SAAW,WAChC,IAAI/W,EAAQ5C,KACZ,IAAKA,KAAK0e,UAAW,CACjB,IAAIY,EAAoBtf,KAAKsf,kBAC7B,GAAItf,KAAKof,UAAW,CAChB,IAAIS,EAAkB,WAAc,OAAOjd,EAAMwc,UAAU5C,KAAK5Z,EAAM8c,WACjEhE,OAAOE,uCAA0C0D,EAAkBb,oBAKpEze,KAAK2f,gBAAgBL,EAAmBO,GACxC7f,KAAKwV,gBALLxV,KAAK4f,aAAaC,GAClB7f,KAAKwV,oBAQTxV,KAAKwV,gBAIjBwJ,EAAejE,UAAU6E,aAAe,SAAUrE,EAAIM,GAClD,IACIN,EAAGiB,KAAKxc,KAAK0f,SAAU7D,GAE3B,MAAOG,GAEH,GADAhc,KAAKwV,cACDkG,OAAOE,sCACP,MAAMI,EAGND,gBAAgBC,KAI5BgD,EAAejE,UAAU4E,gBAAkB,SAAU5B,EAAQxC,EAAIM,GAC7D,IAAKH,OAAOE,sCACR,MAAM,IAAIxY,MAAM,YAEpB,IACImY,EAAGiB,KAAKxc,KAAK0f,SAAU7D,GAE3B,MAAOG,GACH,OAAIN,OAAOE,uCACPmC,EAAOQ,eAAiBvC,EACxB+B,EAAOS,iBAAkB,GAClB,IAGPzC,gBAAgBC,IACT,GAGf,OAAO,GAGXgD,EAAejE,UAAUkC,aAAe,WACpC,IAAIqC,EAAoBtf,KAAKsf,kBAC7Btf,KAAK0f,SAAW,KAChB1f,KAAKsf,kBAAoB,KACzBA,EAAkB9J,eAEfwJ,GACTX,YACF,SAASQ,oBAAoBiB,GACzB,OAAOA,aAAezB,YAAe,uBAAwByB,GAAOA,EAAIf,cC9R5E,IAAIgB,gBAAiC,SAAUzD,GAE3C,SAASyD,IACL,OAAkB,OAAXzD,GAAmBA,EAAOlB,MAAMpb,KAAMqb,YAAcrb,KAW/D,OAbA4c,YAAkBmD,EAAiBzD,GAInCyD,EAAgBhF,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GAC7FrgB,KAAK2e,YAAYjc,KAAKwd,IAE1BH,EAAgBhF,UAAUuF,YAAc,SAAUjR,EAAOgR,GACrDrgB,KAAK2e,YAAYtP,MAAMA,IAE3B0Q,EAAgBhF,UAAUwF,eAAiB,SAAUF,GACjDrgB,KAAK2e,YAAYhF,YAEdoG,GACT1B,YCfEmC,gBAAiC,SAAUlE,GAE3C,SAASkE,EAAgBzC,EAAQkC,EAAYE,GACzC,IAAIvd,EAAQ0Z,EAAOE,KAAKxc,OAASA,KAKjC,OAJA4C,EAAMmb,OAASA,EACfnb,EAAMqd,WAAaA,EACnBrd,EAAMud,WAAaA,EACnBvd,EAAMlB,MAAQ,EACPkB,EAaX,OApBAga,YAAkB4D,EAAiBlE,GASnCkE,EAAgBzF,UAAUmE,MAAQ,SAAUrD,GACxC7b,KAAK+d,OAAOiC,WAAWhgB,KAAKigB,WAAYpE,EAAO7b,KAAKmgB,WAAYngB,KAAK0B,QAAS1B,OAElFwgB,EAAgBzF,UAAUoE,OAAS,SAAU9P,GACzCrP,KAAK+d,OAAOuC,YAAYjR,EAAOrP,MAC/BA,KAAKwV,eAETgL,EAAgBzF,UAAUqE,UAAY,WAClCpf,KAAK+d,OAAOwC,eAAevgB,MAC3BA,KAAKwV,eAEFgL,GACTnC,YC7BF,SAGgBoC,aAAaC,EAAgBrR,EAAOsK,GAChD,GAAI+G,EAAgB,CAChB,GAAIA,aAA0BrC,WAC1B,OAAOqC,EAEX,GAAIA,EAAe3B,cACf,OAAO2B,EAAe3B,gBAG9B,OAAK2B,GAAmBrR,GAAUsK,EAG3B,IAAI0E,WAAWqC,EAAgBrR,EAAOsK,GAFlC,IAAI0E,WAAWO,OCZ9B,IAAW+B,WAA+B,mBAAXxC,QAAyBA,OAAOwC,YAAc,eCA7E,SAAgBC,QCShB,SAAgBC,cAAcC,GAC1B,OAAKA,EAGc,IAAfA,EAAI1e,OACG0e,EAAI,GAER,SAAeC,GAClB,OAAOD,EAAI9C,OAAO,SAAU9X,EAAMqV,GAAM,OAAOA,EAAGrV,IAAU6a,IANrDH,KCFf,IAAIzZ,aAA4B,WAQ5B,SAASA,EAAW8J,GAEhBjR,KAAKghB,WAAY,EACb/P,IACAjR,KAAKihB,WAAahQ,GA8P1B,OApPA9J,EAAW4T,UAAUmG,KAAO,SAAUC,GAClC,IAAIR,EAAa,IAAIxZ,EAGrB,OAFAwZ,EAAWS,OAASphB,KACpB2gB,EAAWQ,SAAWA,EACfR,GAoHXxZ,EAAW4T,UAAU9J,UAAY,SAAUsO,EAAgBlQ,EAAOsK,GAC9D,IAAIwH,EAAWnhB,KAAKmhB,SAChBE,EAAOZ,aAAalB,EAAgBlQ,EAAOsK,GAO/C,GANIwH,EACAA,EAAS3E,KAAK6E,EAAMrhB,KAAKohB,QAGzBC,EAAK9D,IAAIvd,KAAKohB,SAAWC,EAAK5C,mBAAqBze,KAAKihB,WAAWI,GAAQrhB,KAAKshB,cAAcD,IAE9F3F,OAAOE,uCACHyF,EAAK5C,qBACL4C,EAAK5C,oBAAqB,EACtB4C,EAAK7C,iBACL,MAAM6C,EAAK9C,eAIvB,OAAO8C,GAGXla,EAAW4T,UAAUuG,cAAgB,SAAUD,GAC3C,IACI,OAAOrhB,KAAKihB,WAAWI,GAE3B,MAAOrF,GACCN,OAAOE,wCACPyF,EAAK7C,iBAAkB,EACvB6C,EAAK9C,eAAiBvC,GAE1BqF,EAAKhS,MAAM2M,KAUnB7U,EAAW4T,UAAUpY,QAAU,SAAUD,EAAM6e,GAC3C,IAAI3e,EAAQ5C,KAEZ,OAAO,IADPuhB,EAAcC,eAAeD,IACN,SAAUE,EAASC,GAGtC,IAAInM,EACJA,EAAe3S,EAAMqO,UAAU,SAAU4K,GACrC,IACInZ,EAAKmZ,GAET,MAAOG,GACH0F,EAAO1F,GACHzG,GACAA,EAAaC,gBAGtBkM,EAAQD,MAInBta,EAAW4T,UAAUkG,WAAa,SAAUhC,GACxC,IAAImC,EAASphB,KAAKohB,OAClB,OAAOA,GAAUA,EAAOnQ,UAAUgO,IAOtC9X,EAAW4T,UAAU4G,YAAqB,WACtC,OAAO3hB,MAqBXmH,EAAW4T,UAAU6G,KAAO,WAExB,IADA,IAAIC,KACKC,EAAK,EAAGA,EAAKzG,UAAUjZ,OAAQ0f,IACpCD,EAAWC,GAAMzG,UAAUyG,GAE/B,OAA0B,IAAtBD,EAAWzf,OACJpC,KAEJ6gB,cAAcgB,EAAdhB,CAA0B7gB,OAGrCmH,EAAW4T,UAAUgH,UAAY,SAAUR,GACvC,IAAI3e,EAAQ5C,KAEZ,OAAO,IADPuhB,EAAcC,eAAeD,IACN,SAAUE,EAASC,GACtC,IAAI7F,EACJjZ,EAAMqO,UAAU,SAAUxI,GAAK,OAAOoT,EAAQpT,GAAM,SAAUuT,GAAO,OAAO0F,EAAO1F,IAAS,WAAc,OAAOyF,EAAQ5F,QAcjI1U,EAAW+O,OAAS,SAAUjF,GAC1B,OAAO,IAAI9J,EAAW8J,IAEnB9J,KAUX,SAASqa,eAAeD,GAIpB,GAHKA,IACDA,EAAc7F,OAAOC,SAAWA,UAE/B4F,EACD,MAAM,IAAIne,MAAM,yBAEpB,OAAOme,ECjSX,IAAWS,iBAAmB,SAAUC,GACpC,OAAO,SAAUhD,GACb,IAAK,IAAIvC,EAAI,EAAGS,EAAM8E,EAAM7f,OAAQsa,EAAIS,IAAQ8B,EAAW/C,OAAQQ,IAC/DuC,EAAWvc,KAAKuf,EAAMvF,IAErBuC,EAAW/C,QACZ+C,EAAWtF,aCTZuI,mBAAqB,SAAUC,GACtC,OAAO,SAAUlD,GAQb,OAPAkD,EAAQC,KAAK,SAAUvG,GACdoD,EAAW/C,SACZ+C,EAAWvc,KAAKmZ,GAChBoD,EAAWtF,aAEhB,SAAUqC,GAAO,OAAOiD,EAAW5P,MAAM2M,KACvCoG,KAAK,KAAMrG,iBACTkD,ICVf,SAAgBoD,oBACZ,MAAsB,mBAAXlE,QAA0BA,OAAOmE,SAGrCnE,OAAOmE,SAFH,aAIf,IAAWA,SAAyBD,oBCLzBE,oBAAsB,SAAUC,GACvC,OAAO,SAAUvD,GAEb,IADA,IAAIqD,EAAWE,EAASC,cACrB,CACC,IAAIC,EAAOJ,EAAS5f,OACpB,GAAIggB,EAAKtc,KAAM,CACX6Y,EAAWtF,WACX,MAGJ,GADAsF,EAAWvc,KAAKggB,EAAK7G,OACjBoD,EAAW/C,OACX,MAWR,MAP+B,mBAApBoG,EAASK,QAChB1D,EAAW1B,IAAI,WACP+E,EAASK,QACTL,EAASK,WAId1D,ICjBJ2D,sBAAwB,SAAU9C,GACzC,OAAO,SAAUb,GACb,IAAI4D,EAAM/C,EAAI6B,cACd,GAA6B,mBAAlBkB,EAAI5R,UAEX,MAAM,IAAI6R,UAAU,kEAGpB,OAAOD,EAAI5R,UAAUgO,KCdtB8D,qBAAyBta,GAAK,OAAOA,GAAyB,iBAAbA,EAAErG,QAAoC,mBAANqG,GCA5F,SAAgBua,UAAUnH,GACtB,OAAOA,GAAoC,mBAApBA,EAAM5K,WAAkD,mBAAf4K,EAAMuG,KCD1E,IAUWa,YAAc,SAAUhiB,GAC/B,GAAIA,aAAkBkG,aAClB,OAAO,SAAU8X,GACb,OAAIhe,EAAO+f,WACP/B,EAAWvc,KAAKzB,EAAO4a,YACvBoD,EAAWtF,YAIJ1Y,EAAOgQ,UAAUgO,IAI/B,GAAI8D,YAAY9hB,GACjB,OAAO+gB,iBAAiB/gB,GAEvB,GAAI+hB,UAAU/hB,GACf,OAAOihB,mBAAmBjhB,GAEzB,GAAIA,GAA6C,mBAA5BA,EAAOwhB,UAC7B,OAAOF,oBAAoBthB,GAE1B,GAAIA,GAA+C,mBAA9BA,EAAO0gB,YAC7B,OAAOiB,sBAAsB3hB,GAG7B,IAAI4a,EAAQO,SAASnb,GAAU,oBAAsB,IAAMA,EAAS,IAGpE,MAAM,IAAI6hB,UAFA,gBAAkBjH,EAAQ,8FCrC5C,SAEgBqH,kBAAkBC,EAAiBliB,EAAQgf,EAAYE,GACnE,IAAIxB,EAAc,IAAI6B,gBAAgB2C,EAAiBlD,EAAYE,GACnE,OAAO8C,YAAYhiB,EAAZgiB,CAAoBtE,GC4D/B,IAAIyE,gBAAiC,SAAU9G,GAE3C,SAAS8G,EAAgBzE,EAAa0E,GAClC,IAAIzgB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAG9C,OAFA4C,EAAMygB,iBAAmBA,EACzBzgB,EAAM0gB,UAAW,EACV1gB,EAwCX,OA7CAga,YAAkBwG,EAAiB9G,GAOnC8G,EAAgBrI,UAAUmE,MAAQ,SAAUrD,GAGxC,GAFA7b,KAAK6b,MAAQA,EACb7b,KAAKsjB,UAAW,GACXtjB,KAAKujB,UAAW,CACjB,IAAIC,EAAWlI,SAAStb,KAAKqjB,iBAAd/H,CAAgCO,GAC/C,GAAI2H,IAAavI,YACbjb,KAAK2e,YAAYtP,MAAM4L,YAAYC,OAElC,CACD,IAAIuI,EAAoBP,kBAAkBljB,KAAMwjB,IAC3CC,GAAqBA,EAAkBvH,OACxClc,KAAK0jB,gBAGL1jB,KAAKud,IAAIvd,KAAKujB,UAAYE,MAK1CL,EAAgBrI,UAAU2I,cAAgB,WACtC,IAAe7H,EAAN7b,KAAiB6b,MAAOyH,EAAxBtjB,KAAsCsjB,SAAUC,EAAhDvjB,KAA+DujB,UACpEA,IACAvjB,KAAK2Y,OAAO4K,GACZvjB,KAAKujB,UAAY,KACjBA,EAAU/N,eAEV8N,IACAtjB,KAAK6b,MAAQ,KACb7b,KAAKsjB,UAAW,EAChBtjB,KAAK2e,YAAYjc,KAAKmZ,KAG9BuH,EAAgBrI,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,GACjFpgB,KAAK0jB,iBAETN,EAAgBrI,UAAUwF,eAAiB,WACvCvgB,KAAK0jB,iBAEFN,GACTrD,iBC/FE4D,OAAwB,SAAUrH,GAElC,SAASqH,EAAOC,EAAWC,GACvB,OAAOvH,EAAOE,KAAKxc,OAASA,KAkBhC,OApBA4c,YAAkB+G,EAAQrH,GAc1BqH,EAAO5I,UAAU+I,SAAW,SAAUC,EAAOC,GAIzC,YAHc,IAAVA,IACAA,EAAQ,GAELhkB,MAEJ2jB,GACT9G,cC/BEoH,YAA6B,SAAU3H,GAEvC,SAAS2H,EAAYL,EAAWC,GAC5B,IAAIjhB,EAAQ0Z,EAAOE,KAAKxc,KAAM4jB,EAAWC,IAAS7jB,KAIlD,OAHA4C,EAAMghB,UAAYA,EAClBhhB,EAAMihB,KAAOA,EACbjhB,EAAMshB,SAAU,EACTthB,EA8HX,OApIAga,YAAkBqH,EAAa3H,GAQ/B2H,EAAYlJ,UAAU+I,SAAW,SAAUC,EAAOC,GAI9C,QAHc,IAAVA,IACAA,EAAQ,GAERhkB,KAAKkc,OACL,OAAOlc,KAGXA,KAAK+jB,MAAQA,EACb,IAAII,EAAKnkB,KAAKmkB,GACVP,EAAY5jB,KAAK4jB,UA+BrB,OATU,MAANO,IACAnkB,KAAKmkB,GAAKnkB,KAAKokB,eAAeR,EAAWO,EAAIH,IAIjDhkB,KAAKkkB,SAAU,EACflkB,KAAKgkB,MAAQA,EAEbhkB,KAAKmkB,GAAKnkB,KAAKmkB,IAAMnkB,KAAKqkB,eAAeT,EAAW5jB,KAAKmkB,GAAIH,GACtDhkB,MAEXikB,EAAYlJ,UAAUsJ,eAAiB,SAAUT,EAAWO,EAAIH,GAI5D,YAHc,IAAVA,IACAA,EAAQ,GAELM,YAAYV,EAAUW,MAAM9E,KAAKmE,EAAW5jB,MAAOgkB,IAE9DC,EAAYlJ,UAAUqJ,eAAiB,SAAUR,EAAWO,EAAIH,GAK5D,QAJc,IAAVA,IACAA,EAAQ,GAGE,OAAVA,GAAkBhkB,KAAKgkB,QAAUA,IAA0B,IAAjBhkB,KAAKkkB,QAC/C,OAAOC,EAIJK,cAAcL,IAMzBF,EAAYlJ,UAAU0J,QAAU,SAAUV,EAAOC,GAC7C,GAAIhkB,KAAKkc,OACL,OAAO,IAAI9Y,MAAM,gCAErBpD,KAAKkkB,SAAU,EACf,IAAI7U,EAAQrP,KAAK0kB,SAASX,EAAOC,GACjC,GAAI3U,EACA,OAAOA,GAEe,IAAjBrP,KAAKkkB,SAAgC,MAAXlkB,KAAKmkB,KAcpCnkB,KAAKmkB,GAAKnkB,KAAKokB,eAAepkB,KAAK4jB,UAAW5jB,KAAKmkB,GAAI,QAG/DF,EAAYlJ,UAAU2J,SAAW,SAAUX,EAAOC,GAC9C,IAAIW,GAAU,EACVC,OAAa1W,EACjB,IACIlO,KAAK6jB,KAAKE,GAEd,MAAO7I,GACHyJ,GAAU,EACVC,IAAe1J,GAAKA,GAAK,IAAI9X,MAAM8X,GAEvC,GAAIyJ,EAEA,OADA3kB,KAAKwV,cACEoP,GAIfX,EAAYlJ,UAAUkC,aAAe,WACjC,IAAIkH,EAAKnkB,KAAKmkB,GACVP,EAAY5jB,KAAK4jB,UACjBiB,EAAUjB,EAAUiB,QACpBnjB,EAAQmjB,EAAQhH,QAAQ7d,MAC5BA,KAAK6jB,KAAO,KACZ7jB,KAAK+jB,MAAQ,KACb/jB,KAAKkkB,SAAU,EACflkB,KAAK4jB,UAAY,MACF,IAAXliB,GACAmjB,EAAQ/G,OAAOpc,EAAO,GAEhB,MAANyiB,IACAnkB,KAAKmkB,GAAKnkB,KAAKokB,eAAeR,EAAWO,EAAI,OAEjDnkB,KAAKgkB,MAAQ,MAEVC,GACTN,QC3HEmB,UAA2B,WAC3B,SAASA,EAAUC,EAAiBC,QACpB,IAARA,IACAA,EAAMF,EAAUE,KAEpBhlB,KAAK+kB,gBAAkBA,EACvB/kB,KAAKglB,IAAMA,EA2Bf,OARAF,EAAU/J,UAAU+I,SAAW,SAAUD,EAAMG,EAAOD,GAIlD,YAHc,IAAVC,IACAA,EAAQ,GAEL,IAAIhkB,KAAK+kB,gBAAgB/kB,KAAM6jB,GAAMC,SAASC,EAAOC,IAGhEc,EAAUE,IAAMC,KAAKD,IAAMC,KAAKD,IAAM,WAAc,OAAQ,IAAIC,MACzDH,KCjDPI,eAAgC,SAAU5I,GAE1C,SAAS4I,EAAeH,EAAiBC,QACzB,IAARA,IACAA,EAAMF,UAAUE,KAEpB,IAAIpiB,EAAQ0Z,EAAOE,KAAKxc,KAAM+kB,EAAiB,WAC3C,OAAIG,EAAeC,UAAYD,EAAeC,WAAaviB,EAChDsiB,EAAeC,SAASH,MAGxBA,OAEThlB,KAiBN,OAhBA4C,EAAMiiB,WAONjiB,EAAMwiB,QAAS,EAQfxiB,EAAMyiB,eAAYnX,EACXtL,EAkCX,OA/DAga,YAAkBsI,EAAgB5I,GA+BlC4I,EAAenK,UAAU+I,SAAW,SAAUD,EAAMG,EAAOD,GAIvD,YAHc,IAAVC,IACAA,EAAQ,GAERkB,EAAeC,UAAYD,EAAeC,WAAanlB,KAChDklB,EAAeC,SAASrB,SAASD,EAAMG,EAAOD,GAG9CzH,EAAOvB,UAAU+I,SAAStH,KAAKxc,KAAM6jB,EAAMG,EAAOD,IAGjEmB,EAAenK,UAAUwJ,MAAQ,SAAUtL,GACvC,IAAI4L,EAAU7kB,KAAK6kB,QACnB,GAAI7kB,KAAKolB,OACLP,EAAQtiB,KAAK0W,OADjB,CAIA,IAAI5J,EACJrP,KAAKolB,QAAS,EACd,GACI,GAAI/V,EAAQ4J,EAAOwL,QAAQxL,EAAO8K,MAAO9K,EAAO+K,OAC5C,YAEC/K,EAAS4L,EAAQvZ,SAE1B,GADAtL,KAAKolB,QAAS,EACV/V,EAAO,CACP,KAAO4J,EAAS4L,EAAQvZ,SACpB2N,EAAOzD,cAEX,MAAMnG,KAGP6V,GACTJ,WCvBSQ,MAAsB,IAAIJ,eAAejB,aC5CpD,SACgBsB,UAAUrU,GAKtB,OAAQiL,QAAQjL,IAASA,EAAMsU,WAAWtU,GAAO,GAAM,ECN3D,SAAgBuU,YAAY5J,GACxB,OAAOA,GAAmC,mBAAnBA,EAAMiI,SCqDjC,IAAI4B,iBAAkC,SAAUpJ,GAE5C,SAASoJ,EAAiB/G,EAAagH,GACnC,IAAI/iB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAG9C,OAFA4C,EAAMgjB,UACNhjB,EAAM2a,IAAI2F,kBAAkBtgB,EAAO+iB,IAC5B/iB,EAUX,OAfAga,YAAkB8I,EAAkBpJ,GAOpCoJ,EAAiB3K,UAAUmE,MAAQ,SAAUrD,GACzC7b,KAAK4lB,OAAOrjB,KAAKsZ,IAErB6J,EAAiB3K,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GAC9F,IAAIuF,EAAS5lB,KAAK4lB,OAClB5lB,KAAK4lB,UACL5lB,KAAK2e,YAAYjc,KAAKkjB,IAEnBF,GACT3F,iBCCE8F,sBAAuC,SAAUvJ,GAEjD,SAASuJ,EAAsBlH,EAAamH,GACxC,IAAIljB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAG9C,OAFA4C,EAAMkjB,WAAaA,EACnBljB,EAAMgjB,UACChjB,EAiBX,OAtBAga,YAAkBiJ,EAAuBvJ,GAOzCuJ,EAAsB9K,UAAUmE,MAAQ,SAAUrD,GAC9C,IAAI+J,EAAS5lB,KAAK4lB,OAClBA,EAAOrjB,KAAKsZ,GACR+J,EAAOxjB,QAAUpC,KAAK8lB,aACtB9lB,KAAK2e,YAAYjc,KAAKkjB,GACtB5lB,KAAK4lB,YAGbC,EAAsB9K,UAAUqE,UAAY,WACxC,IAAIwG,EAAS5lB,KAAK4lB,OACdA,EAAOxjB,OAAS,GAChBpC,KAAK2e,YAAYjc,KAAKkjB,GAE1BtJ,EAAOvB,UAAUqE,UAAU5C,KAAKxc,OAE7B6lB,GACTxH,YAME0H,0BAA2C,SAAUzJ,GAErD,SAASyJ,EAA0BpH,EAAamH,EAAYE,GACxD,IAAIpjB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAK9C,OAJA4C,EAAMkjB,WAAaA,EACnBljB,EAAMojB,iBAAmBA,EACzBpjB,EAAMqjB,WACNrjB,EAAMsjB,MAAQ,EACPtjB,EA2BX,OAlCAga,YAAkBmJ,EAA2BzJ,GAS7CyJ,EAA0BhL,UAAUmE,MAAQ,SAAUrD,GAClD,IAAeiK,EAAN9lB,KAAsB8lB,WAAYE,EAAlChmB,KAAwDgmB,iBAAkBC,EAA1EjmB,KAAuFimB,QAASC,EAAhGlmB,KAA2GkmB,MACpHlmB,KAAKkmB,QACDA,EAAQF,GAAqB,GAC7BC,EAAQ1jB,SAEZ,IAAK,IAAIma,EAAIuJ,EAAQ7jB,OAAQsa,KAAM,CAC/B,IAAIkJ,EAASK,EAAQvJ,GACrBkJ,EAAOrjB,KAAKsZ,GACR+J,EAAOxjB,SAAW0jB,IAClBG,EAAQnI,OAAOpB,EAAG,GAClB1c,KAAK2e,YAAYjc,KAAKkjB,MAIlCG,EAA0BhL,UAAUqE,UAAY,WAE5C,IADA,IAAe6G,EAANjmB,KAAmBimB,QAAStH,EAA5B3e,KAA6C2e,YAC/CsH,EAAQ7jB,OAAS,GAAG,CACvB,IAAIwjB,EAASK,EAAQ3a,QACjBsa,EAAOxjB,OAAS,GAChBuc,EAAYjc,KAAKkjB,GAGzBtJ,EAAOvB,UAAUqE,UAAU5C,KAAKxc,OAE7B+lB,GACT1H,YC3DE8H,QAAyB,WAIzB,OAHA,WACInmB,KAAK4lB,cASTQ,qBAAsC,SAAU9J,GAEhD,SAAS8J,EAAqBzH,EAAa0H,EAAgBC,EAAwBC,EAAe3C,GAC9F,IAAIhhB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAC9C4C,EAAMyjB,eAAiBA,EACvBzjB,EAAM0jB,uBAAyBA,EAC/B1jB,EAAM2jB,cAAgBA,EACtB3jB,EAAMghB,UAAYA,EAClBhhB,EAAM4jB,YACN,IAAIhH,EAAU5c,EAAM6jB,cAEpB,GADA7jB,EAAM8jB,aAAyC,MAA1BJ,GAAkCA,EAAyB,EAC5E1jB,EAAM8jB,aAAc,CACpB,IAAIC,GAAsB1H,WAAYrc,EAAO4c,QAASA,EAAS6G,eAAgBA,GAC/EzjB,EAAM2a,IAAIiC,EAAQoH,YAAchD,EAAUE,SAAS+C,2BAA4BR,EAAgBM,QAE9F,CACD,IAAIG,GAAe7H,WAAYrc,EAAO4c,QAASA,GAC3CuH,GAAkBV,eAAgBA,EAAgBC,uBAAwBA,EAAwBrH,WAAYrc,EAAOghB,UAAWA,GACpIhhB,EAAM2a,IAAIiC,EAAQoH,YAAchD,EAAUE,SAASkD,oBAAqBX,EAAgBS,IACxFlkB,EAAM2a,IAAIqG,EAAUE,SAASmD,uBAAwBX,EAAwBS,IAEjF,OAAOnkB,EA2DX,OA/EAga,YAAkBwJ,EAAsB9J,GAsBxC8J,EAAqBrL,UAAUmE,MAAQ,SAAUrD,GAI7C,IAHA,IAEIqL,EAFAV,EAAWxmB,KAAKwmB,SAChBrJ,EAAMqJ,EAASpkB,OAEVsa,EAAI,EAAGA,EAAIS,EAAKT,IAAK,CAC1B,IAAIyK,EAAYX,EAAS9J,GACrBkJ,EAASuB,EAAUvB,OACvBA,EAAOrjB,KAAKsZ,GACR+J,EAAOxjB,QAAUpC,KAAKumB,gBACtBW,EAAsBC,GAG1BD,GACAlnB,KAAKonB,aAAaF,IAG1Bd,EAAqBrL,UAAUoE,OAAS,SAAUnD,GAC9Chc,KAAKwmB,SAASpkB,OAAS,EACvBka,EAAOvB,UAAUoE,OAAO3C,KAAKxc,KAAMgc,IAEvCoK,EAAqBrL,UAAUqE,UAAY,WAEvC,IADA,IAAeoH,EAANxmB,KAAoBwmB,SAAU7H,EAA9B3e,KAA+C2e,YACjD6H,EAASpkB,OAAS,GAAG,CACxB,IAAIilB,EAAYb,EAASlb,QACzBqT,EAAYjc,KAAK2kB,EAAUzB,QAE/BtJ,EAAOvB,UAAUqE,UAAU5C,KAAKxc,OAGpComB,EAAqBrL,UAAUkC,aAAe,WAC1Cjd,KAAKwmB,SAAW,MAEpBJ,EAAqBrL,UAAUqM,aAAe,SAAU5H,GACpDxf,KAAKsnB,aAAa9H,GAClB,IAAIoH,EAAcpH,EAAQoH,YAG1B,GAFAA,EAAYpR,cACZxV,KAAK2Y,OAAOiO,IACP5mB,KAAKkc,QAAUlc,KAAK0mB,aAAc,CACnClH,EAAUxf,KAAKymB,cACf,IAAIJ,EAAiBrmB,KAAKqmB,eACtBM,GAAsB1H,WAAYjf,KAAMwf,QAASA,EAAS6G,eAAgBA,GAC9ErmB,KAAKud,IAAIiC,EAAQoH,YAAc5mB,KAAK4jB,UAAUE,SAAS+C,2BAA4BR,EAAgBM,MAG3GP,EAAqBrL,UAAU0L,YAAc,WACzC,IAAIjH,EAAU,IAAI2G,QAElB,OADAnmB,KAAKwmB,SAASjkB,KAAKid,GACZA,GAEX4G,EAAqBrL,UAAUuM,aAAe,SAAU9H,GACpDxf,KAAK2e,YAAYjc,KAAK8c,EAAQoG,QAC9B,IAAIY,EAAWxmB,KAAKwmB,UACFA,EAAWA,EAAS3I,QAAQ2B,IAAY,IACvC,GACfgH,EAAS1I,OAAO0I,EAAS3I,QAAQ2B,GAAU,IAG5C4G,GACT/H,YACF,SAASwI,2BAA2B9C,GAChC,IAAI9E,EAAa8E,EAAM9E,WACnBsI,EAAcxD,EAAMvE,QACpB+H,GACAtI,EAAWqI,aAAaC,GAEvBtI,EAAW/C,SACZ6H,EAAMvE,QAAUP,EAAWwH,cAC3B1C,EAAMvE,QAAQoH,YAAc5mB,KAAK8jB,SAASC,EAAOA,EAAMsC,iBAG/D,SAASY,uBAAuBlD,GAC5B,IAAIuC,EAAyBvC,EAAMuC,uBAAwBD,EAAiBtC,EAAMsC,eAAgBpH,EAAa8E,EAAM9E,WAAY2E,EAAYG,EAAMH,UAC/IpE,EAAUP,EAAWwH,cAEpBxH,EAAW/C,SACZ+C,EAAW1B,IAAIiC,EAAQoH,YAAchD,EAAUE,SAASkD,oBAAqBX,GAAkBpH,WAAYA,EAAYO,QAASA,KAFvHxf,KAGF8jB,SAASC,EAAOuC,IAG/B,SAASU,oBAAoBQ,GACzB,IAAIvI,EAAauI,EAAIvI,WAAYO,EAAUgI,EAAIhI,QAC/CP,EAAWqI,aAAa9H,GCpI5B,IAAIiI,uBAAwC,SAAUnL,GAElD,SAASmL,EAAuB9I,EAAa+I,EAAUC,GACnD,IAAI/kB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAK9C,OAJA4C,EAAM8kB,SAAWA,EACjB9kB,EAAM+kB,gBAAkBA,EACxB/kB,EAAM4jB,YACN5jB,EAAM2a,IAAI2F,kBAAkBtgB,EAAO8kB,IAC5B9kB,EA4EX,OAnFAga,YAAkB6K,EAAwBnL,GAS1CmL,EAAuB1M,UAAUmE,MAAQ,SAAUrD,GAG/C,IAFA,IAAI2K,EAAWxmB,KAAKwmB,SAChBrJ,EAAMqJ,EAASpkB,OACVsa,EAAI,EAAGA,EAAIS,EAAKT,IACrB8J,EAAS9J,GAAGkJ,OAAOrjB,KAAKsZ,IAGhC4L,EAAuB1M,UAAUoE,OAAS,SAAUnD,GAEhD,IADA,IAAIwK,EAAWxmB,KAAKwmB,SACbA,EAASpkB,OAAS,GAAG,CACxB,IAAI+kB,EAAYX,EAASlb,QACzB6b,EAAU5R,aAAaC,cACvB2R,EAAUvB,OAAS,KACnBuB,EAAU5R,aAAe,KAE7BvV,KAAKwmB,SAAW,KAChBlK,EAAOvB,UAAUoE,OAAO3C,KAAKxc,KAAMgc,IAEvCyL,EAAuB1M,UAAUqE,UAAY,WAEzC,IADA,IAAIoH,EAAWxmB,KAAKwmB,SACbA,EAASpkB,OAAS,GAAG,CACxB,IAAIilB,EAAYb,EAASlb,QACzBtL,KAAK2e,YAAYjc,KAAK2kB,EAAUzB,QAChCyB,EAAU9R,aAAaC,cACvB6R,EAAUzB,OAAS,KACnByB,EAAU9R,aAAe,KAE7BvV,KAAKwmB,SAAW,KAChBlK,EAAOvB,UAAUqE,UAAU5C,KAAKxc,OAEpCynB,EAAuB1M,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GACpGJ,EAAajgB,KAAK4nB,YAAY3H,GAAcjgB,KAAK6nB,WAAW3H,IAEhEuH,EAAuB1M,UAAUwF,eAAiB,SAAUF,GACxDrgB,KAAK4nB,YAAYvH,EAASb,UAE9BiI,EAAuB1M,UAAU8M,WAAa,SAAUhM,GACpD,IACI,IACI8J,EADkB3lB,KAAK2nB,gBACWnL,KAAKxc,KAAM6b,GAC7C8J,GACA3lB,KAAK8nB,aAAanC,GAG1B,MAAO3J,GACHhc,KAAKmf,OAAOnD,KAGpByL,EAAuB1M,UAAU6M,YAAc,SAAUpI,GACrD,IAAIgH,EAAWxmB,KAAKwmB,SACpB,GAAIA,GAAYhH,EAAS,CACrB,IAAIoG,EAASpG,EAAQoG,OAAQrQ,EAAeiK,EAAQjK,aACpDvV,KAAK2e,YAAYjc,KAAKkjB,GACtBY,EAAS1I,OAAO0I,EAAS3I,QAAQ2B,GAAU,GAC3Cxf,KAAK2Y,OAAOpD,GACZA,EAAaC,gBAGrBiS,EAAuB1M,UAAU+M,aAAe,SAAUnC,GACtD,IAAIa,EAAWxmB,KAAKwmB,SAEhBjR,EAAe,IAAIsH,aACnB2C,GAAYoG,UAAgBrQ,aAAcA,GAC9CiR,EAASjkB,KAAKid,GACd,IAAIiE,EAAoBP,kBAAkBljB,KAAM2lB,EAAiBnG,IAC5DiE,GAAqBA,EAAkBvH,OACxClc,KAAK4nB,YAAYpI,IAGjBiE,EAAkBjE,QAAUA,EAC5Bxf,KAAKud,IAAIkG,GACTlO,EAAagI,IAAIkG,KAGlBgE,GACT1H,iBCzFEgI,qBAAsC,SAAUzL,GAEhD,SAASyL,EAAqBpJ,EAAagJ,GACvC,IAAI/kB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAI9C,OAHA4C,EAAM+kB,gBAAkBA,EACxB/kB,EAAMolB,aAAc,EACpBplB,EAAMilB,aACCjlB,EAoDX,OA1DAga,YAAkBmL,EAAsBzL,GAQxCyL,EAAqBhN,UAAUmE,MAAQ,SAAUrD,GAC7C7b,KAAK4lB,OAAOrjB,KAAKsZ,IAErBkM,EAAqBhN,UAAUqE,UAAY,WACvC,IAAIwG,EAAS5lB,KAAK4lB,OACdA,GACA5lB,KAAK2e,YAAYjc,KAAKkjB,GAE1BtJ,EAAOvB,UAAUqE,UAAU5C,KAAKxc,OAGpC+nB,EAAqBhN,UAAUkC,aAAe,WAC1Cjd,KAAK4lB,OAAS,KACd5lB,KAAKgoB,aAAc,GAEvBD,EAAqBhN,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GAClGrgB,KAAK6nB,cAETE,EAAqBhN,UAAUwF,eAAiB,WACxCvgB,KAAKgoB,YACLhoB,KAAK2Z,WAGL3Z,KAAK6nB,cAGbE,EAAqBhN,UAAU8M,WAAa,WACxC,IAAII,EAAsBjoB,KAAKioB,oBAC3BA,IACAjoB,KAAK2Y,OAAOsP,GACZA,EAAoBzS,eAExB,IAAIoQ,EAAS5lB,KAAK4lB,OACd5lB,KAAK4lB,QACL5lB,KAAK2e,YAAYjc,KAAKkjB,GAE1B5lB,KAAK4lB,UACL,IAAID,EAAkBrK,SAAStb,KAAK2nB,gBAAdrM,GAClBqK,IAAoB1K,YACpBjb,KAAKqP,MAAM4L,YAAYC,IAGvB+M,EAAsB,IAAIpL,aAC1B7c,KAAKioB,oBAAsBA,EAC3BjoB,KAAKud,IAAI0K,GACTjoB,KAAKgoB,aAAc,EACnBC,EAAoB1K,IAAI2F,kBAAkBljB,KAAM2lB,IAChD3lB,KAAKgoB,aAAc,IAGpBD,GACThI,iBC9FEmI,gBAAiC,SAAU5L,GAE3C,SAAS4L,EAAgBvJ,EAAa/W,EAAUugB,GAC5C,IAAIvlB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAG9C,OAFA4C,EAAMgF,SAAWA,EACjBhF,EAAMulB,OAASA,EACRvlB,EAqBX,OA1BAga,YAAkBsL,EAAiB5L,GAYnC4L,EAAgBnN,UAAU1L,MAAQ,SAAU2M,GACxC,IAAKhc,KAAK0e,UAAW,CACjB,IAAIzd,OAAS,EACb,IACIA,EAASjB,KAAK4H,SAASoU,EAAKhc,KAAKmoB,QAErC,MAAOC,GAEH,YADA9L,EAAOvB,UAAU1L,MAAMmN,KAAKxc,KAAMooB,GAGtCpoB,KAAKqf,yBACLrf,KAAKud,IAAI2F,kBAAkBljB,KAAMiB,MAGlCinB,GACTnI,iBCpDF,SAGgBsI,UAAUtH,EAAO6C,GAC7B,OAIW,IAAIzc,aAJVyc,EAIqB,SAAU3E,GAC5B,IAAI5B,EAAM,IAAIR,aACVH,EAAI,EAWR,OAVAW,EAAIE,IAAIqG,EAAUE,SAAS,WACnBpH,IAAMqE,EAAM3e,QAIhB6c,EAAWvc,KAAKqe,EAAMrE,MACjBuC,EAAW/C,QACZmB,EAAIE,IAAIvd,KAAK8jB,aALb7E,EAAWtF,cAQZ0D,GAhBW2E,iBAAiBjB,ICL/C,IAMIuH,QA8IAC,wBAAyC,SAAUjM,GAEnD,SAASiM,EAAwB5J,EAAa6J,GAC1C,IAAI5lB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAK9C,OAJA4C,EAAM4lB,eAAiBA,EACvB5lB,EAAMwiB,OAAS,EACfxiB,EAAM6lB,UACN7lB,EAAM8lB,eACC9lB,EAqDX,OA5DAga,YAAkB2L,EAAyBjM,GAS3CiM,EAAwBxN,UAAUmE,MAAQ,SAAUyB,GAChD3gB,KAAKyoB,OAAOlmB,KAAK+lB,MACjBtoB,KAAK0oB,YAAYnmB,KAAKoe,IAE1B4H,EAAwBxN,UAAUqE,UAAY,WAC1C,IAAIsJ,EAAc1oB,KAAK0oB,YACnBvL,EAAMuL,EAAYtmB,OACtB,GAAY,IAAR+a,EACAnd,KAAK2e,YAAYhF,eAEhB,CACD3Z,KAAKolB,OAASjI,EACdnd,KAAK2oB,UAAYxL,EACjB,IAAK,IAAIT,EAAI,EAAGA,EAAIS,EAAKT,IAAK,CAC1B,IAAIiE,EAAa+H,EAAYhM,GAC7B1c,KAAKud,IAAI2F,kBAAkBljB,KAAM2gB,EAAYA,EAAYjE,OAIrE6L,EAAwBxN,UAAUwF,eAAiB,SAAUqI,GAC9B,IAAtB5oB,KAAKolB,QAAU,IAChBplB,KAAK2e,YAAYhF,YAGzB4O,EAAwBxN,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GACrG,IAAIoI,EAASzoB,KAAKyoB,OACdI,EAASJ,EAAOtI,GAChBwI,EAAa3oB,KAAK2oB,UAEhBE,IAAWP,OAAStoB,KAAK2oB,UAAY3oB,KAAK2oB,UAD1C,EAENF,EAAOtI,GAAcD,EACH,IAAdyI,IACI3oB,KAAKwoB,eACLxoB,KAAK8oB,mBAAmBL,GAGxBzoB,KAAK2e,YAAYjc,KAAK+lB,EAAOM,WAIzCR,EAAwBxN,UAAU+N,mBAAqB,SAAUL,GAC7D,IAAIxnB,EACJ,IACIA,EAASjB,KAAKwoB,eAAepN,MAAMpb,KAAMyoB,GAE7C,MAAOzM,GAEH,YADAhc,KAAK2e,YAAYtP,MAAM2M,GAG3Bhc,KAAK2e,YAAYjc,KAAKzB,IAEnBsnB,GACTxI,iBC7MStC,MAAsB,IAAItW,aAAW,SAAU8X,GAAc,OAAOA,EAAWtF,aA6C1F,SAAgBsC,QAAM2H,GAClB,OAAOA,EAAYoF,eAAepF,GAAanG,MAEnD,SAAgBuL,eAAepF,GAC3B,OAAO,IAAIzc,aAAW,SAAU8X,GAAc,OAAO2E,EAAUE,SAAS,WAAc,OAAO7E,EAAWtF,eCtD5G,SACgBsP,OAAOpN,GACnB,IAAI5a,EAAS,IAAIkG,aAAW,SAAU8X,GAClCA,EAAWvc,KAAKmZ,GAChBoD,EAAWtF,aAIf,OAFA1Y,EAAO+f,WAAY,EACnB/f,EAAO4a,MAAQA,EACR5a,ECRX,SAIgBmG,OAEZ,IADA,IAAI8hB,KACKpH,EAAK,EAAGA,EAAKzG,UAAUjZ,OAAQ0f,IACpCoH,EAAKpH,GAAMzG,UAAUyG,GAEzB,IAAI8B,EAAYsF,EAAKA,EAAK9mB,OAAS,GAOnC,OANIqjB,YAAY7B,GACZsF,EAAKC,MAGLvF,OAAY1V,EAERgb,EAAK9mB,QACT,KAAK,EACD,OAAO6Z,QAAM2H,GACjB,KAAK,EACD,OAAOA,EAAYyE,UAAUa,EAAMtF,GAAaqF,OAAOC,EAAK,IAChE,QACI,OAAOb,UAAUa,EAAMtF,ICqCnC,IAAIwF,cAA+B,SAAU9M,GAEzC,SAAS8M,EAAczK,EAAa0K,EAASC,GACzC,IAAI1mB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAI9C,OAHA4C,EAAMymB,QAAUA,EAChBzmB,EAAMsjB,MAAQ,EACdtjB,EAAM0mB,QAAUA,GAAW1mB,EACpBA,EAeX,OArBAga,YAAkBwM,EAAe9M,GAUjC8M,EAAcrO,UAAUmE,MAAQ,SAAUrD,GACtC,IAAI5a,EACJ,IACIA,EAASjB,KAAKqpB,QAAQ7M,KAAKxc,KAAKspB,QAASzN,EAAO7b,KAAKkmB,SAEzD,MAAOlK,GAEH,YADAhc,KAAK2e,YAAYtP,MAAM2M,GAG3Bhc,KAAK2e,YAAYjc,KAAKzB,IAEnBmoB,GACT/K,YCMEkL,mBAAoC,SAAUjN,GAE9C,SAASiN,EAAmB5K,EAAa0K,EAASG,QAC3B,IAAfA,IACAA,EAAaC,OAAOC,mBAExB,IAAI9mB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAO9C,OANA4C,EAAMymB,QAAUA,EAChBzmB,EAAM4mB,WAAaA,EACnB5mB,EAAM+mB,cAAe,EACrB/mB,EAAMgjB,UACNhjB,EAAMwiB,OAAS,EACfxiB,EAAMlB,MAAQ,EACPkB,EA8CX,OA1DAga,YAAkB2M,EAAoBjN,GActCiN,EAAmBxO,UAAUmE,MAAQ,SAAUrD,GACvC7b,KAAKolB,OAASplB,KAAKwpB,WACnBxpB,KAAK4pB,SAAS/N,GAGd7b,KAAK4lB,OAAOrjB,KAAKsZ,IAGzB0N,EAAmBxO,UAAU6O,SAAW,SAAU/N,GAC9C,IAAI5a,EACAS,EAAQ1B,KAAK0B,QACjB,IACIT,EAASjB,KAAKqpB,QAAQxN,EAAOna,GAEjC,MAAOsa,GAEH,YADAhc,KAAK2e,YAAYtP,MAAM2M,GAG3Bhc,KAAKolB,SACLplB,KAAK6pB,UAAU5oB,EAAQ4a,EAAOna,IAElC6nB,EAAmBxO,UAAU8O,UAAY,SAAUC,EAAKjO,EAAOna,GAC3D1B,KAAKud,IAAI2F,kBAAkBljB,KAAM8pB,EAAKjO,EAAOna,KAEjD6nB,EAAmBxO,UAAUqE,UAAY,WACrCpf,KAAK2pB,cAAe,EACA,IAAhB3pB,KAAKolB,QAAuC,IAAvBplB,KAAK4lB,OAAOxjB,QACjCpC,KAAK2e,YAAYhF,YAGzB4P,EAAmBxO,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GAChGrgB,KAAK2e,YAAYjc,KAAKwd,IAE1BqJ,EAAmBxO,UAAUwF,eAAiB,SAAUF,GACpD,IAAIuF,EAAS5lB,KAAK4lB,OAClB5lB,KAAK2Y,OAAO0H,GACZrgB,KAAKolB,SACDQ,EAAOxjB,OAAS,EAChBpC,KAAKkf,MAAM0G,EAAOta,SAEG,IAAhBtL,KAAKolB,QAAgBplB,KAAK2pB,cAC/B3pB,KAAK2e,YAAYhF,YAGlB4P,GACTxJ,iBChFEgK,gBAAiC,SAAUzN,GAE3C,SAASyN,EAAgBpL,EAAaqL,EAAW5I,GAC7C,IAAIxe,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAK9C,OAJA4C,EAAMonB,UAAYA,EAClBpnB,EAAMwe,OAASA,EACfxe,EAAMsjB,MAAQ,EACdtjB,EAAMlB,MAAQ,EACPkB,EA2BX,OAlCAga,YAAkBmN,EAAiBzN,GASnCyN,EAAgBhP,UAAUmE,MAAQ,SAAUrD,GACpC7b,KAAKgqB,UACLhqB,KAAKiqB,cAAcpO,GAGnB7b,KAAKkmB,SAGb6D,EAAgBhP,UAAUkP,cAAgB,SAAUpO,GAChD,IAAI5a,EACJ,IACIA,EAASjB,KAAKgqB,UAAUnO,EAAO7b,KAAK0B,QAAS1B,KAAKohB,QAEtD,MAAOpF,GAEH,YADAhc,KAAK2e,YAAYtP,MAAM2M,GAGvB/a,GACAjB,KAAKkmB,SAGb6D,EAAgBhP,UAAUqE,UAAY,WAClCpf,KAAK2e,YAAYjc,KAAK1C,KAAKkmB,OAC3BlmB,KAAK2e,YAAYhF,YAEdoQ,GACT1L,YC1CE6L,mBAAoC,SAAU5N,GAE9C,SAAS4N,EAAmBvL,EAAa0E,GACrC,IAAIzgB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAI9C,OAHA4C,EAAMygB,iBAAmBA,EACzBzgB,EAAM0gB,UAAW,EACjB1gB,EAAMunB,qBAAuB,KACtBvnB,EAuDX,OA7DAga,YAAkBsN,EAAoB5N,GAQtC4N,EAAmBnP,UAAUmE,MAAQ,SAAUrD,GAC3C,IACI,IAAI5a,EAASjB,KAAKqjB,iBAAiB7G,KAAKxc,KAAM6b,GAC1C5a,GACAjB,KAAK4pB,SAAS/N,EAAO5a,GAG7B,MAAO+a,GACHhc,KAAK2e,YAAYtP,MAAM2M,KAG/BkO,EAAmBnP,UAAUqE,UAAY,WACrCpf,KAAKoqB,YACLpqB,KAAK2e,YAAYhF,YAErBuQ,EAAmBnP,UAAU6O,SAAW,SAAU/N,EAAO2H,GACrD,IAAIjO,EAAevV,KAAKmqB,qBACxBnqB,KAAK6b,MAAQA,EACb7b,KAAKsjB,UAAW,EACZ/N,IACAA,EAAaC,cACbxV,KAAK2Y,OAAOpD,KAEhBA,EAAe2N,kBAAkBljB,KAAMwjB,MAClBjO,EAAa2G,QAC9Blc,KAAKud,IAAIvd,KAAKmqB,qBAAuB5U,IAG7C2U,EAAmBnP,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GAChGrgB,KAAKoqB,aAETF,EAAmBnP,UAAUwF,eAAiB,WAC1CvgB,KAAKoqB,aAETF,EAAmBnP,UAAUqP,UAAY,WACrC,GAAIpqB,KAAKsjB,SAAU,CACf,IAAIzH,EAAQ7b,KAAK6b,MACbtG,EAAevV,KAAKmqB,qBACpB5U,IACAvV,KAAKmqB,qBAAuB,KAC5B5U,EAAaC,cACbxV,KAAK2Y,OAAOpD,IAOhBvV,KAAK6b,MAAQ,KACb7b,KAAKsjB,UAAW,EAChBhH,EAAOvB,UAAUmE,MAAM1C,KAAKxc,KAAM6b,KAGnCqO,GACTnK,iBCvDEsK,uBAAwC,SAAU/N,GAElD,SAAS+N,EAAuB1L,EAAa2L,EAAS1G,GAClD,IAAIhhB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAM9C,OALA4C,EAAM0nB,QAAUA,EAChB1nB,EAAMghB,UAAYA,EAClBhhB,EAAM2nB,sBAAwB,KAC9B3nB,EAAM4nB,UAAY,KAClB5nB,EAAM0gB,UAAW,EACV1gB,EAkCX,OA1CAga,YAAkByN,EAAwB/N,GAU1C+N,EAAuBtP,UAAUmE,MAAQ,SAAUrD,GAC/C7b,KAAKyqB,gBACLzqB,KAAKwqB,UAAY3O,EACjB7b,KAAKsjB,UAAW,EAChBtjB,KAAKud,IAAIvd,KAAKuqB,sBAAwBvqB,KAAK4jB,UAAUE,SAAS4G,aAAc1qB,KAAKsqB,QAAStqB,QAE9FqqB,EAAuBtP,UAAUqE,UAAY,WACzCpf,KAAK2qB,gBACL3qB,KAAK2e,YAAYhF,YAErB0Q,EAAuBtP,UAAU4P,cAAgB,WAE7C,GADA3qB,KAAKyqB,gBACDzqB,KAAKsjB,SAAU,CACf,IAAIkH,EAAYxqB,KAAKwqB,UAMrBxqB,KAAKwqB,UAAY,KACjBxqB,KAAKsjB,UAAW,EAChBtjB,KAAK2e,YAAYjc,KAAK8nB,KAG9BH,EAAuBtP,UAAU0P,cAAgB,WAC7C,IAAIF,EAAwBvqB,KAAKuqB,sBACH,OAA1BA,IACAvqB,KAAK2Y,OAAO4R,GACZA,EAAsB/U,cACtBxV,KAAKuqB,sBAAwB,OAG9BF,GACThM,YACF,SAASqM,aAAazL,GAClBA,EAAW0L,gBC/Df,IAAIC,yBAA0C,SAAUtO,GAEpD,SAASsO,EAAyBjM,EAAakM,GAC3C,IAAIjoB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAG9C,OAFA4C,EAAMioB,aAAeA,EACrBjoB,EAAMkoB,SAAU,EACTloB,EAYX,OAjBAga,YAAkBgO,EAA0BtO,GAO5CsO,EAAyB7P,UAAUmE,MAAQ,SAAUrD,GACjD7b,KAAK8qB,SAAU,EACf9qB,KAAK2e,YAAYjc,KAAKmZ,IAE1B+O,EAAyB7P,UAAUqE,UAAY,WACvCpf,KAAK8qB,SACL9qB,KAAK2e,YAAYjc,KAAK1C,KAAK6qB,cAE/B7qB,KAAK2e,YAAYhF,YAEdiR,GACTvM,YC3BF,SAAgB0M,WAAW1b,EAAOuU,GAC9B,OAIW,IAAIzc,aAJVyc,EAIqB,SAAU3E,GAAc,OAAO2E,EAAUE,SAASkH,WAAU,GAAK3b,MAAOA,EAAO4P,WAAYA,KAH3F,SAAUA,GAAc,OAAOA,EAAW5P,MAAMA,KAM9E,SAAS2b,WAASC,GACd,IAAI5b,EAAQ4b,EAAG5b,MAAoB4b,EAAGhM,WAC3B5P,MAAMA,GCtCrB,IAAI6b,aAA8B,WAC9B,SAASA,EAAaC,EAAMtP,EAAOxM,GAC/BrP,KAAKmrB,KAAOA,EACZnrB,KAAK6b,MAAQA,EACb7b,KAAKqP,MAAQA,EACbrP,KAAKsjB,SAAoB,MAAT6H,EAyGpB,OAlGAD,EAAanQ,UAAUqQ,QAAU,SAAUC,GACvC,OAAQrrB,KAAKmrB,MACT,IAAK,IACD,OAAOE,EAAS3oB,MAAQ2oB,EAAS3oB,KAAK1C,KAAK6b,OAC/C,IAAK,IACD,OAAOwP,EAAShc,OAASgc,EAAShc,MAAMrP,KAAKqP,OACjD,IAAK,IACD,OAAOgc,EAAS1R,UAAY0R,EAAS1R,aAWjDuR,EAAanQ,UAAUuQ,GAAK,SAAU5oB,EAAM2M,EAAOsK,GAE/C,OADW3Z,KAAKmrB,MAEZ,IAAK,IACD,OAAOzoB,GAAQA,EAAK1C,KAAK6b,OAC7B,IAAK,IACD,OAAOxM,GAASA,EAAMrP,KAAKqP,OAC/B,IAAK,IACD,OAAOsK,GAAYA,MAY/BuR,EAAanQ,UAAUwQ,OAAS,SAAU7K,EAAgBrR,EAAOsK,GAC7D,OAAI+G,GAAiD,mBAAxBA,EAAehe,KACjC1C,KAAKorB,QAAQ1K,GAGb1gB,KAAKsrB,GAAG5K,EAAgBrR,EAAOsK,IAQ9CuR,EAAanQ,UAAUyQ,aAAe,WAElC,OADWxrB,KAAKmrB,MAEZ,IAAK,IACD,OAAO/jB,KAAGpH,KAAK6b,OACnB,IAAK,IACD,OAAOkP,WAAW/qB,KAAKqP,OAC3B,IAAK,IACD,OAAO4M,UAEf,MAAM,IAAI7Y,MAAM,uCAUpB8nB,EAAaO,WAAa,SAAU5P,GAChC,YAAqB,IAAVA,EACA,IAAIqP,EAAa,IAAKrP,GAE1BqP,EAAaQ,4BAUxBR,EAAaS,YAAc,SAAU3P,GACjC,OAAO,IAAIkP,EAAa,SAAKhd,EAAW8N,IAO5CkP,EAAaU,eAAiB,WAC1B,OAAOV,EAAaW,sBAExBX,EAAaW,qBAAuB,IAAIX,EAAa,KACrDA,EAAaQ,2BAA6B,IAAIR,EAAa,SAAKhd,GACzDgd,KC5DPY,gBAAiC,SAAUxP,GAE3C,SAASwP,EAAgBnN,EAAaqF,EAAOJ,GACzC,IAAIhhB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAM9C,OALA4C,EAAMohB,MAAQA,EACdphB,EAAMghB,UAAYA,EAClBhhB,EAAMmpB,SACNnpB,EAAMwiB,QAAS,EACfxiB,EAAM+hB,SAAU,EACT/hB,EA+CX,OAvDAga,YAAkBkP,EAAiBxP,GAUnCwP,EAAgBd,SAAW,SAAUjH,GAKjC,IAJA,IAAI3C,EAAS2C,EAAM3C,OACf2K,EAAQ3K,EAAO2K,MACfnI,EAAYG,EAAMH,UAClBjF,EAAcoF,EAAMpF,YACjBoN,EAAM3pB,OAAS,GAAM2pB,EAAM,GAAGC,KAAOpI,EAAUoB,OAAU,GAC5D+G,EAAMzgB,QAAQ2gB,aAAab,QAAQzM,GAEvC,GAAIoN,EAAM3pB,OAAS,EAAG,CAClB,IAAI8pB,EAAU5hB,KAAKC,IAAI,EAAGwhB,EAAM,GAAGC,KAAOpI,EAAUoB,OACpDhlB,KAAK8jB,SAASC,EAAOmI,QAGrBlsB,KAAKwV,cACL4L,EAAOgE,QAAS,GAGxB0G,EAAgB/Q,UAAUoR,UAAY,SAAUvI,GAC5C5jB,KAAKolB,QAAS,EACdplB,KAAKud,IAAIqG,EAAUE,SAASgI,EAAgBd,SAAUhrB,KAAKgkB,OACvD5C,OAAQphB,KAAM2e,YAAa3e,KAAK2e,YAAaiF,UAAWA,MAGhEkI,EAAgB/Q,UAAUqR,qBAAuB,SAAUH,GACvD,IAAqB,IAAjBjsB,KAAK2kB,QAAT,CAGA,IAAIf,EAAY5jB,KAAK4jB,UACjB9U,EAAU,IAAIud,aAAazI,EAAUoB,MAAQhlB,KAAKgkB,MAAOiI,GAC7DjsB,KAAK+rB,MAAMxpB,KAAKuM,IACI,IAAhB9O,KAAKolB,QACLplB,KAAKmsB,UAAUvI,KAGvBkI,EAAgB/Q,UAAUmE,MAAQ,SAAUrD,GACxC7b,KAAKosB,qBAAqBlB,aAAaO,WAAW5P,KAEtDiQ,EAAgB/Q,UAAUoE,OAAS,SAAUnD,GACzChc,KAAK2kB,SAAU,EACf3kB,KAAK+rB,SACL/rB,KAAK2e,YAAYtP,MAAM2M,IAE3B8P,EAAgB/Q,UAAUqE,UAAY,WAClCpf,KAAKosB,qBAAqBlB,aAAaU,mBAEpCE,GACTzN,YACEgO,aAA8B,WAK9B,OAJA,SAAsBL,EAAMC,GACxBjsB,KAAKgsB,KAAOA,EACZhsB,KAAKisB,aAAeA,MCvDxBK,oBAAqC,SAAUhQ,GAE/C,SAASgQ,EAAoB3N,EAAa4N,GACtC,IAAI3pB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAK9C,OAJA4C,EAAM2pB,sBAAwBA,EAC9B3pB,EAAM4pB,WAAY,EAClB5pB,EAAM6pB,8BACN7pB,EAAM6lB,UACC7lB,EAwDX,OA/DAga,YAAkB0P,EAAqBhQ,GASvCgQ,EAAoBvR,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GACjGrgB,KAAK2e,YAAYjc,KAAKud,GACtBjgB,KAAK0sB,mBAAmBrM,GACxBrgB,KAAK2sB,eAETL,EAAoBvR,UAAUuF,YAAc,SAAUjR,EAAOgR,GACzDrgB,KAAKmf,OAAO9P,IAEhBid,EAAoBvR,UAAUwF,eAAiB,SAAUF,GACrD,IAAIxE,EAAQ7b,KAAK0sB,mBAAmBrM,GAChCxE,GACA7b,KAAK2e,YAAYjc,KAAKmZ,GAE1B7b,KAAK2sB,eAETL,EAAoBvR,UAAUmE,MAAQ,SAAUrD,GAC5C,IACI,IAAI+Q,EAAgB5sB,KAAKusB,sBAAsB1Q,GAC3C+Q,GACA5sB,KAAK6sB,SAASD,EAAe/Q,GAGrC,MAAOG,GACHhc,KAAK2e,YAAYtP,MAAM2M,KAG/BsQ,EAAoBvR,UAAUqE,UAAY,WACtCpf,KAAKwsB,WAAY,EACjBxsB,KAAK2sB,eAETL,EAAoBvR,UAAU2R,mBAAqB,SAAUnX,GACzDA,EAAaC,cACb,IAAIsX,EAAkB9sB,KAAKysB,2BAA2B5O,QAAQtI,GAC1DsG,EAAQ,KAMZ,OALyB,IAArBiR,IACAjR,EAAQ7b,KAAKyoB,OAAOqE,GACpB9sB,KAAKysB,2BAA2B3O,OAAOgP,EAAiB,GACxD9sB,KAAKyoB,OAAO3K,OAAOgP,EAAiB,IAEjCjR,GAEXyQ,EAAoBvR,UAAU8R,SAAW,SAAUD,EAAe/Q,GAC9D,IAAIkR,EAAuB7J,kBAAkBljB,KAAM4sB,EAAe/Q,GAC9DkR,IAAyBA,EAAqB7Q,SAC9Clc,KAAKud,IAAIwP,GACT/sB,KAAKysB,2BAA2BlqB,KAAKwqB,IAEzC/sB,KAAKyoB,OAAOlmB,KAAKsZ,IAErByQ,EAAoBvR,UAAU4R,YAAc,WACpC3sB,KAAKwsB,WAAwD,IAA3CxsB,KAAKysB,2BAA2BrqB,QAClDpC,KAAK2e,YAAYhF,YAGlB2S,GACTvM,iBAMEiN,4BAA6C,SAAU1Q,GAEvD,SAAS0Q,EAA4B5L,EAAQ6L,GACzC,IAAIrqB,EAAQ0Z,EAAOE,KAAKxc,OAASA,KAGjC,OAFA4C,EAAMwe,OAASA,EACfxe,EAAMqqB,kBAAoBA,EACnBrqB,EAMX,OAXAga,YAAkBoQ,EAA6B1Q,GAQ/C0Q,EAA4BjS,UAAUkG,WAAa,SAAUhC,GACzDjf,KAAKitB,kBAAkBhc,UAAU,IAAIic,4BAA4BjO,EAAYjf,KAAKohB,UAE/E4L,GACT7lB,cAME+lB,4BAA6C,SAAU5Q,GAEvD,SAAS4Q,EAA4BnP,EAAQqD,GACzC,IAAIxe,EAAQ0Z,EAAOE,KAAKxc,OAASA,KAIjC,OAHA4C,EAAMmb,OAASA,EACfnb,EAAMwe,OAASA,EACfxe,EAAMuqB,kBAAmB,EAClBvqB,EAmBX,OAzBAga,YAAkBsQ,EAA6B5Q,GAQ/C4Q,EAA4BnS,UAAUmE,MAAQ,SAAU0J,GACpD5oB,KAAKotB,qBAETF,EAA4BnS,UAAUoE,OAAS,SAAUnD,GACrDhc,KAAKwV,cACLxV,KAAK+d,OAAO1O,MAAM2M,IAEtBkR,EAA4BnS,UAAUqE,UAAY,WAC9Cpf,KAAKotB,qBAETF,EAA4BnS,UAAUqS,kBAAoB,WACjDptB,KAAKmtB,mBACNntB,KAAKmtB,kBAAmB,EACxBntB,KAAKwV,cACLxV,KAAKohB,OAAOnQ,UAAUjR,KAAK+d,UAG5BmP,GACT7O,YClIEgP,wBAAyC,SAAU/Q,GAEnD,SAAS+Q,EAAwB1O,GAC7B,OAAOrC,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAK7C,OAPA4c,YAAkByQ,EAAyB/Q,GAI3C+Q,EAAwBtS,UAAUmE,MAAQ,SAAUrD,GAChDA,EAAMuP,QAAQprB,KAAK2e,cAEhB0O,GACThP,YCHEiP,mBAAoC,SAAUhR,GAE9C,SAASgR,EAAmB3O,EAAa4O,EAAaC,GAClD,IAAI5qB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAM9C,OALA4C,EAAM2qB,YAAcA,EACpB3qB,EAAM6lB,OAAS,IAAIgF,IACfD,GACA5qB,EAAM2a,IAAI2F,kBAAkBtgB,EAAO4qB,IAEhC5qB,EAmCX,OA3CAga,YAAkB0Q,EAAoBhR,GAUtCgR,EAAmBvS,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GAChGrgB,KAAKyoB,OAAOiF,SAEhBJ,EAAmBvS,UAAUuF,YAAc,SAAUjR,EAAOgR,GACxDrgB,KAAKmf,OAAO9P,IAEhBie,EAAmBvS,UAAUmE,MAAQ,SAAUrD,GACvC7b,KAAKutB,YACLvtB,KAAK2tB,gBAAgB9R,GAGrB7b,KAAK4tB,cAAc/R,EAAOA,IAGlCyR,EAAmBvS,UAAU4S,gBAAkB,SAAU9R,GACrD,IAAIgS,EACAlP,EAAc3e,KAAK2e,YACvB,IACIkP,EAAM7tB,KAAKutB,YAAY1R,GAE3B,MAAOG,GAEH,YADA2C,EAAYtP,MAAM2M,GAGtBhc,KAAK4tB,cAAcC,EAAKhS,IAE5ByR,EAAmBvS,UAAU6S,cAAgB,SAAUC,EAAKhS,GACxD,IAAI4M,EAASzoB,KAAKyoB,OACbA,EAAOqF,IAAID,KACZpF,EAAOlL,IAAIsQ,GACX7tB,KAAK2e,YAAYjc,KAAKmZ,KAGvByR,GACTvN,iBCjDEgO,+BAAgD,SAAUzR,GAE1D,SAASyR,EAA+BpP,EAAaqP,EAAST,GAC1D,IAAI3qB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAM9C,OALA4C,EAAM2qB,YAAcA,EACpB3qB,EAAMqrB,QAAS,EACQ,mBAAZD,IACPprB,EAAMorB,QAAUA,GAEbprB,EA6BX,OArCAga,YAAkBmR,EAAgCzR,GAUlDyR,EAA+BhT,UAAUiT,QAAU,SAAUvlB,EAAGD,GAC5D,OAAOC,IAAMD,GAEjBulB,EAA+BhT,UAAUmE,MAAQ,SAAUrD,GACvD,IACIgS,EAAMhS,EACV,GAFkB7b,KAAKutB,cAGnBM,EAAMvS,SAAStb,KAAKutB,YAAdjS,CAA2BO,MACrBZ,YACR,OAAOjb,KAAK2e,YAAYtP,MAAM4L,YAAYC,GAGlD,IAAIja,GAAS,EACb,GAAIjB,KAAKiuB,QAEL,IADAhtB,EAASqa,SAAStb,KAAKguB,QAAd1S,CAAuBtb,KAAK6tB,IAAKA,MAC3B5S,YACX,OAAOjb,KAAK2e,YAAYtP,MAAM4L,YAAYC,QAI9Clb,KAAKiuB,QAAS,GAEM,IAApBC,QAAQjtB,KACRjB,KAAK6tB,IAAMA,EACX7tB,KAAK2e,YAAYjc,KAAKmZ,KAGvBkS,GACT1P,YC1FE8P,wBAAyC,SAAU7R,GAEnD,SAAS6R,IACL,IAAIvrB,EAAQ0Z,EAAOE,KAAKxc,KAAM,0BAA4BA,KAG1D,OAFA4C,EAAMT,KAAO,0BACb8B,OAAOuW,eAAe5X,EAAOurB,EAAwBpT,WAC9CnY,EAEX,OAPAga,YAAkBuR,EAAyB7R,GAOpC6R,GACT/qB,OC0CEgrB,iBAAkC,SAAU9R,GAE5C,SAAS8R,EAAiBzP,EAAaqL,EAAWV,GAC9C,IAAI1mB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAI9C,OAHA4C,EAAMonB,UAAYA,EAClBpnB,EAAM0mB,QAAUA,EAChB1mB,EAAMsjB,MAAQ,EACPtjB,EAiBX,OAvBAga,YAAkBwR,EAAkB9R,GAUpC8R,EAAiBrT,UAAUmE,MAAQ,SAAUrD,GACzC,IAAI5a,EACJ,IACIA,EAASjB,KAAKgqB,UAAUxN,KAAKxc,KAAKspB,QAASzN,EAAO7b,KAAKkmB,SAE3D,MAAOlK,GAEH,YADAhc,KAAK2e,YAAYtP,MAAM2M,GAGvB/a,GACAjB,KAAK2e,YAAYjc,KAAKmZ,IAGvBuS,GACT/P,YCpBEgQ,cAA+B,SAAU/R,GAEzC,SAAS+R,EAAc1P,EAAaY,EAAgBlQ,EAAOsK,GACvD,IAAI/W,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAgB9C,OAfA4C,EAAM0rB,SAAW1N,KACjBhe,EAAM2rB,UAAY3N,KAClBhe,EAAM4rB,aAAe5N,KACrBhe,EAAM2rB,UAAYlf,GAASuR,KAC3Bhe,EAAM4rB,aAAe7U,GAAYiH,KAC7BpF,WAAW+D,IACX3c,EAAM8c,SAAW9c,EACjBA,EAAM0rB,SAAW/O,GAEZA,IACL3c,EAAM8c,SAAWH,EACjB3c,EAAM0rB,SAAW/O,EAAe7c,MAAQke,KACxChe,EAAM2rB,UAAYhP,EAAelQ,OAASuR,KAC1Che,EAAM4rB,aAAejP,EAAe5F,UAAYiH,MAE7Che,EAgCX,OAlDAga,YAAkByR,EAAe/R,GAoBjC+R,EAActT,UAAUmE,MAAQ,SAAUrD,GACtC,IACI7b,KAAKsuB,SAAS9R,KAAKxc,KAAK0f,SAAU7D,GAEtC,MAAOG,GAEH,YADAhc,KAAK2e,YAAYtP,MAAM2M,GAG3Bhc,KAAK2e,YAAYjc,KAAKmZ,IAE1BwS,EAActT,UAAUoE,OAAS,SAAUnD,GACvC,IACIhc,KAAKuuB,UAAU/R,KAAKxc,KAAK0f,SAAU1D,GAEvC,MAAOA,GAEH,YADAhc,KAAK2e,YAAYtP,MAAM2M,GAG3Bhc,KAAK2e,YAAYtP,MAAM2M,IAE3BqS,EAActT,UAAUqE,UAAY,WAChC,IACIpf,KAAKwuB,aAAahS,KAAKxc,KAAK0f,UAEhC,MAAO1D,GAEH,YADAhc,KAAK2e,YAAYtP,MAAM2M,GAG3B,OAAOhc,KAAK2e,YAAYhF,YAErB0U,GACThQ,YC5GEoQ,WAA4B,SAAUnS,GAEtC,SAASmS,IACL,IAAI7rB,EAAQ0Z,EAAOE,KAAKxc,KAAM,4BAA8BA,KAG5D,OAFA4C,EAAMT,KAAO,aACb8B,OAAOuW,eAAe5X,EAAO6rB,EAAW1T,WACjCnY,EAEX,OAPAga,YAAkB6R,EAAYnS,GAOvBmS,GACTrrB,OC4CEsrB,eAAgC,SAAUpS,GAE1C,SAASoS,EAAe/P,EAAahM,GACjC,IAAI/P,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAG9C,OAFA4C,EAAM+P,MAAQA,EACd/P,EAAMsjB,MAAQ,EACPtjB,EAaX,OAlBAga,YAAkB8R,EAAgBpS,GAOlCoS,EAAe3T,UAAUmE,MAAQ,SAAUrD,GACvC,IAAIlJ,EAAQ3S,KAAK2S,MACbuT,IAAUlmB,KAAKkmB,MACfA,GAASvT,IACT3S,KAAK2e,YAAYjc,KAAKmZ,GAClBqK,IAAUvT,IACV3S,KAAK2e,YAAYhF,WACjB3Z,KAAKwV,iBAIVkZ,GACTrQ,YCjDEsQ,gBAAiC,SAAUrS,GAE3C,SAASqS,EAAgBhQ,EAAaqL,EAAWV,EAASlI,GACtD,IAAIxe,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAM9C,OALA4C,EAAMonB,UAAYA,EAClBpnB,EAAM0mB,QAAUA,EAChB1mB,EAAMwe,OAASA,EACfxe,EAAMlB,MAAQ,EACdkB,EAAM0mB,QAAUA,GAAW1mB,EACpBA,EAsBX,OA9BAga,YAAkB+R,EAAiBrS,GAUnCqS,EAAgB5T,UAAUwF,eAAiB,SAAUqO,GACjD5uB,KAAK2e,YAAYjc,KAAKksB,GACtB5uB,KAAK2e,YAAYhF,YAErBgV,EAAgB5T,UAAUmE,MAAQ,SAAUrD,GACxC,IAAI5a,GAAS,EACb,IACIA,EAASjB,KAAKgqB,UAAUxN,KAAKxc,KAAKspB,QAASzN,EAAO7b,KAAK0B,QAAS1B,KAAKohB,QAEzE,MAAOpF,GAEH,YADAhc,KAAK2e,YAAYtP,MAAM2M,GAGtB/a,GACDjB,KAAKugB,gBAAe,IAG5BoO,EAAgB5T,UAAUqE,UAAY,WAClCpf,KAAKugB,gBAAe,IAEjBoO,GACTtQ,YCbEwQ,sBAAuC,SAAUvS,GAEjD,SAASuS,EAAsBlQ,GAC3B,IAAI/b,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAG9C,OAFA4C,EAAM+mB,cAAe,EACrB/mB,EAAMksB,iBAAkB,EACjBlsB,EAqBX,OA1BAga,YAAkBiS,EAAuBvS,GAOzCuS,EAAsB9T,UAAUmE,MAAQ,SAAUrD,GACzC7b,KAAK8uB,kBACN9uB,KAAK8uB,iBAAkB,EACvB9uB,KAAKud,IAAI2F,kBAAkBljB,KAAM6b,MAGzCgT,EAAsB9T,UAAUqE,UAAY,WACxCpf,KAAK2pB,cAAe,EACf3pB,KAAK8uB,iBACN9uB,KAAK2e,YAAYhF,YAGzBkV,EAAsB9T,UAAUwF,eAAiB,SAAUF,GACvDrgB,KAAK2Y,OAAO0H,GACZrgB,KAAK8uB,iBAAkB,EACnB9uB,KAAK2pB,cACL3pB,KAAK2e,YAAYhF,YAGlBkV,GACT9O,iBChBEgP,qBAAsC,SAAUzS,GAEhD,SAASyS,EAAqBpQ,EAAa0K,GACvC,IAAIzmB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAK9C,OAJA4C,EAAMymB,QAAUA,EAChBzmB,EAAMksB,iBAAkB,EACxBlsB,EAAM+mB,cAAe,EACrB/mB,EAAMlB,MAAQ,EACPkB,EAsCX,OA7CAga,YAAkBmS,EAAsBzS,GASxCyS,EAAqBhU,UAAUmE,MAAQ,SAAUrD,GACxC7b,KAAK8uB,iBACN9uB,KAAKgvB,QAAQnT,IAGrBkT,EAAqBhU,UAAUiU,QAAU,SAAUnT,GAC/C,IAAIna,EAAQ1B,KAAK0B,QACbid,EAAc3e,KAAK2e,YACvB,IACI,IAAI1d,EAASjB,KAAKqpB,QAAQxN,EAAOna,GACjC1B,KAAK8uB,iBAAkB,EACvB9uB,KAAKud,IAAI2F,kBAAkBljB,KAAMiB,EAAQ4a,EAAOna,IAEpD,MAAOsa,GACH2C,EAAYtP,MAAM2M,KAG1B+S,EAAqBhU,UAAUqE,UAAY,WACvCpf,KAAK2pB,cAAe,EACf3pB,KAAK8uB,iBACN9uB,KAAK2e,YAAYhF,YAGzBoV,EAAqBhU,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GAClGrgB,KAAK2e,YAAYjc,KAAKwd,IAE1B6O,EAAqBhU,UAAUuF,YAAc,SAAUtE,GACnDhc,KAAK2e,YAAYtP,MAAM2M,IAE3B+S,EAAqBhU,UAAUwF,eAAiB,SAAUF,GACtDrgB,KAAK2Y,OAAO0H,GACZrgB,KAAK8uB,iBAAkB,EACnB9uB,KAAK2pB,cACL3pB,KAAK2e,YAAYhF,YAGlBoV,GACThP,iBCnCEkP,iBAAkC,SAAU3S,GAE5C,SAAS2S,EAAiBtQ,EAAa0K,EAASG,EAAY5F,GACxD,IAAIhhB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAU9C,OATA4C,EAAMymB,QAAUA,EAChBzmB,EAAM4mB,WAAaA,EACnB5mB,EAAMghB,UAAYA,EAClBhhB,EAAMlB,MAAQ,EACdkB,EAAMwiB,OAAS,EACfxiB,EAAM+mB,cAAe,EACjBH,EAAaC,OAAOC,oBACpB9mB,EAAMgjB,WAEHhjB,EAuDX,OAnEAga,YAAkBqS,EAAkB3S,GAcpC2S,EAAiBjE,SAAW,SAAUxD,GAClC,IAAIvI,EAAauI,EAAIvI,WAAYhe,EAASumB,EAAIvmB,OAAQ4a,EAAQ2L,EAAI3L,MAAOna,EAAQ8lB,EAAI9lB,MACrFud,EAAWiQ,sBAAsBjuB,EAAQ4a,EAAOna,IAEpDutB,EAAiBlU,UAAUmE,MAAQ,SAAUrD,GACzC,IAAI8C,EAAc3e,KAAK2e,YACvB,GAAIA,EAAYzC,OACZlc,KAAKof,gBADT,CAIA,IAAI1d,EAAQ1B,KAAK0B,QACjB,GAAI1B,KAAKolB,OAASplB,KAAKwpB,WAAY,CAC/B7K,EAAYjc,KAAKmZ,GACjB,IAAI5a,EAASqa,SAAStb,KAAKqpB,QAAd/N,CAAuBO,EAAOna,GAC3C,GAAIT,IAAWga,YACX0D,EAAYtP,MAAM4L,YAAYC,QAE7B,GAAKlb,KAAK4jB,UAGV,CACD,IAAIG,GAAU9E,WAAYjf,KAAMiB,OAAQA,EAAQ4a,MAAOA,EAAOna,MAAOA,GACrE1B,KAAKud,IAAIvd,KAAK4jB,UAAUE,SAASmL,EAAiBjE,SAAU,EAAGjH,SAJ/D/jB,KAAKkvB,sBAAsBjuB,EAAQ4a,EAAOna,QAQ9C1B,KAAK4lB,OAAOrjB,KAAKsZ,KAGzBoT,EAAiBlU,UAAUmU,sBAAwB,SAAUjuB,EAAQ4a,EAAOna,GACxE1B,KAAKolB,SACLplB,KAAKud,IAAI2F,kBAAkBljB,KAAMiB,EAAQ4a,EAAOna,KAEpDutB,EAAiBlU,UAAUqE,UAAY,WACnCpf,KAAK2pB,cAAe,EAChB3pB,KAAK2pB,cAAgC,IAAhB3pB,KAAKolB,QAC1BplB,KAAK2e,YAAYhF,YAGzBsV,EAAiBlU,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GAC9FrgB,KAAKkf,MAAMgB,IAEf+O,EAAiBlU,UAAUwF,eAAiB,SAAUF,GAClD,IAAIuF,EAAS5lB,KAAK4lB,OAClB5lB,KAAK2Y,OAAO0H,GACZrgB,KAAKolB,SACDQ,GAAUA,EAAOxjB,OAAS,GAC1BpC,KAAKkf,MAAM0G,EAAOta,SAElBtL,KAAK2pB,cAAgC,IAAhB3pB,KAAKolB,QAC1BplB,KAAK2e,YAAYhF,YAGlBsV,GACTlP,iBCxIF,SAAgBoP,SAASC,GACrB,OAAO,SAAUhO,GAAU,OAAOA,EAAOF,KAAK,IAAImO,gBAAgBD,KAEtE,IAAIC,gBAAiC,WACjC,SAASA,EAAgBD,GACrBpvB,KAAKovB,SAAWA,EAKpB,OAHAC,EAAgBtU,UAAUyB,KAAO,SAAUyC,EAAYmC,GACnD,OAAOA,EAAOnQ,UAAU,IAAIqe,kBAAkBrQ,EAAYjf,KAAKovB,YAE5DC,KAOPC,kBAAmC,SAAUhT,GAE7C,SAASgT,EAAkB3Q,EAAayQ,GACpC,IAAIxsB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAE9C,OADA4C,EAAM2a,IAAI,IAAIV,aAAauS,IACpBxsB,EAEX,OANAga,YAAkB0S,EAAmBhT,GAM9BgT,GACTjR,YCuBEkR,oBAAqC,SAAUjT,GAE/C,SAASiT,EAAoB5Q,EAAaqL,EAAW5I,EAAQoO,EAAYlG,GACrE,IAAI1mB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAM9C,OALA4C,EAAMonB,UAAYA,EAClBpnB,EAAMwe,OAASA,EACfxe,EAAM4sB,WAAaA,EACnB5sB,EAAM0mB,QAAUA,EAChB1mB,EAAMlB,MAAQ,EACPkB,EAuBX,OA/BAga,YAAkB2S,EAAqBjT,GAUvCiT,EAAoBxU,UAAUwF,eAAiB,SAAU1E,GACrD,IAAI8C,EAAc3e,KAAK2e,YACvBA,EAAYjc,KAAKmZ,GACjB8C,EAAYhF,YAEhB4V,EAAoBxU,UAAUmE,MAAQ,SAAUrD,GAC5C,IAAemO,EAANhqB,KAAqBgqB,UAAWV,EAAhCtpB,KAA6CspB,QAClD5nB,EAAQ1B,KAAK0B,QACjB,IACiBsoB,EAAUxN,KAAK8M,GAAWtpB,KAAM6b,EAAOna,EAAO1B,KAAKohB,SAE5DphB,KAAKugB,eAAevgB,KAAKwvB,WAAa9tB,EAAQma,GAGtD,MAAOG,GACHhc,KAAK2e,YAAYtP,MAAM2M,KAG/BuT,EAAoBxU,UAAUqE,UAAY,WACtCpf,KAAKugB,eAAevgB,KAAKwvB,YAAc,OAAIthB,IAExCqhB,GACTlR,YClFEoR,wBAAyC,SAAUnT,GAEnD,SAASmT,IACL,IAAI7sB,EAAQ0Z,EAAOE,KAAKxc,KAAM,wBAA0BA,KAGxD,OAFA4C,EAAMT,KAAO,0BACb8B,OAAOuW,eAAe5X,EAAO6sB,EAAwB1U,WAC9CnY,EAEX,OAPAga,YAAkB6S,EAAyBnT,GAOpCmT,GACTrsB,OCZEssB,oBAAqC,SAAUpT,GAE/C,SAASoT,EAAoBC,EAAS1Q,GAClC,IAAIrc,EAAQ0Z,EAAOE,KAAKxc,OAASA,KAIjC,OAHA4C,EAAM+sB,QAAUA,EAChB/sB,EAAMqc,WAAaA,EACnBrc,EAAMsZ,QAAS,EACRtZ,EAkBX,OAxBAga,YAAkB8S,EAAqBpT,GAQvCoT,EAAoB3U,UAAUvF,YAAc,WACxC,IAAIxV,KAAKkc,OAAT,CAGAlc,KAAKkc,QAAS,EACd,IAAIyT,EAAU3vB,KAAK2vB,QACfC,EAAYD,EAAQC,UAExB,GADA5vB,KAAK2vB,QAAU,KACVC,GAAkC,IAArBA,EAAUxtB,SAAgButB,EAAQjR,YAAaiR,EAAQzT,OAAzE,CAGA,IAAI2T,EAAkBD,EAAU/R,QAAQ7d,KAAKif,aACpB,IAArB4Q,GACAD,EAAU9R,OAAO+R,EAAiB,MAGnCH,GACT7S,cCvBEiT,kBAAmC,SAAUxT,GAE7C,SAASwT,EAAkBnR,GACvB,IAAI/b,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAE9C,OADA4C,EAAM+b,YAAcA,EACb/b,EAEX,OANAga,YAAkBkT,EAAmBxT,GAM9BwT,GACTzR,YAKE9c,UAAyB,SAAU+a,GAEnC,SAAS/a,IACL,IAAIqB,EAAQ0Z,EAAOE,KAAKxc,OAASA,KAMjC,OALA4C,EAAMgtB,aACNhtB,EAAMsZ,QAAS,EACftZ,EAAM8b,WAAY,EAClB9b,EAAMmtB,UAAW,EACjBntB,EAAMotB,YAAc,KACbptB,EA4FX,OApGAga,YAAkBrb,EAAS+a,GAU3B/a,EAAQwZ,UAAUgE,cAAsB,WACpC,OAAO,IAAI+Q,kBAAkB9vB,OAEjCuB,EAAQwZ,UAAUmG,KAAO,SAAUC,GAC/B,IAAIwO,EAAU,IAAIM,iBAAiBjwB,KAAMA,MAEzC,OADA2vB,EAAQxO,SAAWA,EACZwO,GAEXpuB,EAAQwZ,UAAUrY,KAAO,SAAUmZ,GAC/B,GAAI7b,KAAKkc,OACL,MAAM,IAAIuT,wBAEd,IAAKzvB,KAAK0e,UAIN,IAHA,IAAIkR,EAAY5vB,KAAK4vB,UACjBzS,EAAMyS,EAAUxtB,OAChB8tB,EAAON,EAAU7G,QACZrM,EAAI,EAAGA,EAAIS,EAAKT,IACrBwT,EAAKxT,GAAGha,KAAKmZ,IAIzBta,EAAQwZ,UAAU1L,MAAQ,SAAU2M,GAChC,GAAIhc,KAAKkc,OACL,MAAM,IAAIuT,wBAEdzvB,KAAK+vB,UAAW,EAChB/vB,KAAKgwB,YAAchU,EACnBhc,KAAK0e,WAAY,EAIjB,IAHA,IAAIkR,EAAY5vB,KAAK4vB,UACjBzS,EAAMyS,EAAUxtB,OAChB8tB,EAAON,EAAU7G,QACZrM,EAAI,EAAGA,EAAIS,EAAKT,IACrBwT,EAAKxT,GAAGrN,MAAM2M,GAElBhc,KAAK4vB,UAAUxtB,OAAS,GAE5Bb,EAAQwZ,UAAUpB,SAAW,WACzB,GAAI3Z,KAAKkc,OACL,MAAM,IAAIuT,wBAEdzvB,KAAK0e,WAAY,EAIjB,IAHA,IAAIkR,EAAY5vB,KAAK4vB,UACjBzS,EAAMyS,EAAUxtB,OAChB8tB,EAAON,EAAU7G,QACZrM,EAAI,EAAGA,EAAIS,EAAKT,IACrBwT,EAAKxT,GAAG/C,WAEZ3Z,KAAK4vB,UAAUxtB,OAAS,GAE5Bb,EAAQwZ,UAAUvF,YAAc,WAC5BxV,KAAK0e,WAAY,EACjB1e,KAAKkc,QAAS,EACdlc,KAAK4vB,UAAY,MAGrBruB,EAAQwZ,UAAUuG,cAAgB,SAAUrC,GACxC,GAAIjf,KAAKkc,OACL,MAAM,IAAIuT,wBAGV,OAAOnT,EAAOvB,UAAUuG,cAAc9E,KAAKxc,KAAMif,IAIzD1d,EAAQwZ,UAAUkG,WAAa,SAAUhC,GACrC,GAAIjf,KAAKkc,OACL,MAAM,IAAIuT,wBAET,OAAIzvB,KAAK+vB,UACV9Q,EAAW5P,MAAMrP,KAAKgwB,aACfnT,aAAaY,OAEfzd,KAAK0e,WACVO,EAAWtF,WACJkD,aAAaY,QAGpBzd,KAAK4vB,UAAUrtB,KAAK0c,GACb,IAAIyQ,oBAAoB1vB,KAAMif,KAG7C1d,EAAQwZ,UAAUzC,aAAe,WAC7B,IAAIqI,EAAa,IAAIxZ,aAErB,OADAwZ,EAAWS,OAASphB,KACb2gB,GAGXpf,EAAQ2U,OAAS,SAAUyI,EAAayC,GACpC,OAAO,IAAI6O,iBAAiBtR,EAAayC,IAEtC7f,GACT4F,cAKE8oB,iBAAkC,SAAU3T,GAE5C,SAAS2T,EAAiBtR,EAAayC,GACnC,IAAIxe,EAAQ0Z,EAAOE,KAAKxc,OAASA,KAGjC,OAFA4C,EAAM+b,YAAcA,EACpB/b,EAAMwe,OAASA,EACRxe,EA8BX,OAnCAga,YAAkBqT,EAAkB3T,GAOpC2T,EAAiBlV,UAAUrY,KAAO,SAAUmZ,GACxC,IAAI8C,EAAc3e,KAAK2e,YACnBA,GAAeA,EAAYjc,MAC3Bic,EAAYjc,KAAKmZ,IAGzBoU,EAAiBlV,UAAU1L,MAAQ,SAAU2M,GACzC,IAAI2C,EAAc3e,KAAK2e,YACnBA,GAAeA,EAAYtP,OAC3BrP,KAAK2e,YAAYtP,MAAM2M,IAG/BiU,EAAiBlV,UAAUpB,SAAW,WAClC,IAAIgF,EAAc3e,KAAK2e,YACnBA,GAAeA,EAAYhF,UAC3B3Z,KAAK2e,YAAYhF,YAIzBsW,EAAiBlV,UAAUkG,WAAa,SAAUhC,GAE9C,OADajf,KAAKohB,OAEPphB,KAAKohB,OAAOnQ,UAAUgO,GAGtBpC,aAAaY,OAGrBwS,GACT1uB,WCxEE4uB,kBAAmC,SAAU7T,GAE7C,SAAS6T,EAAkBxR,EAAa4O,EAAa6C,EAAiB/M,EAAkBgN,GACpF,IAAIztB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAQ9C,OAPA4C,EAAM2qB,YAAcA,EACpB3qB,EAAMwtB,gBAAkBA,EACxBxtB,EAAMygB,iBAAmBA,EACzBzgB,EAAMytB,gBAAkBA,EACxBztB,EAAM0tB,OAAS,KACf1tB,EAAM2tB,wBAAyB,EAC/B3tB,EAAMsjB,MAAQ,EACPtjB,EAmFX,OA7FAga,YAAkBuT,EAAmB7T,GAYrC6T,EAAkBpV,UAAUmE,MAAQ,SAAUrD,GAC1C,IAAIgS,EACJ,IACIA,EAAM7tB,KAAKutB,YAAY1R,GAE3B,MAAOG,GAEH,YADAhc,KAAKqP,MAAM2M,GAGfhc,KAAKwwB,OAAO3U,EAAOgS,IAEvBsC,EAAkBpV,UAAUyV,OAAS,SAAU3U,EAAOgS,GAClD,IAAIyC,EAAStwB,KAAKswB,OACbA,IACDA,EAAStwB,KAAKswB,OAAS,IAAIG,KAE/B,IACI/pB,EADAgqB,EAAQJ,EAAOhgB,IAAIud,GAEvB,GAAI7tB,KAAKowB,gBACL,IACI1pB,EAAU1G,KAAKowB,gBAAgBvU,GAEnC,MAAOG,GACHhc,KAAKqP,MAAM2M,QAIftV,EAAUmV,EAEd,IAAK6U,EAAO,CACRA,EAAS1wB,KAAKqwB,gBAAkBrwB,KAAKqwB,kBAAoB,IAAI9uB,UAC7D+uB,EAAOK,IAAI9C,EAAK6C,GAChB,IAAIE,EAAoB,IAAIC,kBAAkBhD,EAAK6C,EAAO1wB,MAE1D,GADAA,KAAK2e,YAAYjc,KAAKkuB,GAClB5wB,KAAKqjB,iBAAkB,CACvB,IAAIG,OAAW,EACf,IACIA,EAAWxjB,KAAKqjB,iBAAiB,IAAIwN,kBAAkBhD,EAAK6C,IAEhE,MAAO1U,GAEH,YADAhc,KAAKqP,MAAM2M,GAGfhc,KAAKud,IAAIiG,EAASvS,UAAU,IAAI6f,wBAAwBjD,EAAK6C,EAAO1wB,SAGvE0wB,EAAMxU,QACPwU,EAAMhuB,KAAKgE,IAGnBypB,EAAkBpV,UAAUoE,OAAS,SAAUnD,GAC3C,IAAIsU,EAAStwB,KAAKswB,OACdA,IACAA,EAAO3tB,QAAQ,SAAU+tB,EAAO7C,GAC5B6C,EAAMrhB,MAAM2M,KAEhBsU,EAAO5C,SAEX1tB,KAAK2e,YAAYtP,MAAM2M,IAE3BmU,EAAkBpV,UAAUqE,UAAY,WACpC,IAAIkR,EAAStwB,KAAKswB,OACdA,IACAA,EAAO3tB,QAAQ,SAAU+tB,EAAO7C,GAC5B6C,EAAM/W,aAEV2W,EAAO5C,SAEX1tB,KAAK2e,YAAYhF,YAErBwW,EAAkBpV,UAAUgW,YAAc,SAAUlD,GAChD7tB,KAAKswB,OAAOU,OAAOnD,IAEvBsC,EAAkBpV,UAAUvF,YAAc,WACjCxV,KAAKkc,SACNlc,KAAKuwB,wBAAyB,EACX,IAAfvwB,KAAKkmB,OACL5J,EAAOvB,UAAUvF,YAAYgH,KAAKxc,QAIvCmwB,GACT9R,YAMEyS,wBAAyC,SAAUxU,GAEnD,SAASwU,EAAwBjD,EAAK6C,EAAO3S,GACzC,IAAInb,EAAQ0Z,EAAOE,KAAKxc,KAAM0wB,IAAU1wB,KAIxC,OAHA4C,EAAMirB,IAAMA,EACZjrB,EAAM8tB,MAAQA,EACd9tB,EAAMmb,OAASA,EACRnb,EAaX,OAnBAga,YAAkBkU,EAAyBxU,GAQ3CwU,EAAwB/V,UAAUmE,MAAQ,SAAUrD,GAChD7b,KAAK2Z,YAGTmX,EAAwB/V,UAAUkC,aAAe,WAC7C,IAAec,EAAN/d,KAAkB+d,OAAQ8P,EAA1B7tB,KAAmC6tB,IAC5C7tB,KAAK6tB,IAAM7tB,KAAK+d,OAAS,KACrBA,GACAA,EAAOgT,YAAYlD,IAGpBiD,GACTzS,YASEwS,kBAAmC,SAAUvU,GAG7C,SAASuU,EAAkBhD,EAAKoD,EAAcC,GAC1C,IAAItuB,EAAQ0Z,EAAOE,KAAKxc,OAASA,KAIjC,OAHA4C,EAAMirB,IAAMA,EACZjrB,EAAMquB,aAAeA,EACrBruB,EAAMsuB,qBAAuBA,EACtBtuB,EAYX,OAnBAga,YAAkBiU,EAAmBvU,GAUrCuU,EAAkB9V,UAAUkG,WAAa,SAAUhC,GAC/C,IAAI1J,EAAe,IAAIsH,aACRqU,EAANlxB,KAAgCkxB,qBAAsBD,EAAtDjxB,KAAwEixB,aAKjF,OAJIC,IAAyBA,EAAqBhV,QAC9C3G,EAAagI,IAAI,IAAI4T,0BAA0BD,IAEnD3b,EAAagI,IAAI0T,EAAahgB,UAAUgO,IACjC1J,GAEJsb,GACT1pB,cAOEgqB,0BAA2C,SAAU7U,GAErD,SAAS6U,EAA0BpT,GAC/B,IAAInb,EAAQ0Z,EAAOE,KAAKxc,OAASA,KAGjC,OAFA4C,EAAMmb,OAASA,EACfA,EAAOmI,QACAtjB,EAYX,OAjBAga,YAAkBuU,EAA2B7U,GAO7C6U,EAA0BpW,UAAUvF,YAAc,WAC9C,IAAIuI,EAAS/d,KAAK+d,OACbA,EAAO7B,QAAWlc,KAAKkc,SACxBI,EAAOvB,UAAUvF,YAAYgH,KAAKxc,MAClC+d,EAAOmI,OAAS,EACK,IAAjBnI,EAAOmI,OAAenI,EAAOwS,wBAC7BxS,EAAOvI,gBAIZ2b,GACTtU,cCnPEuU,yBAA0C,SAAU9U,GAEpD,SAAS8U,IACL,OAAkB,OAAX9U,GAAmBA,EAAOlB,MAAMpb,KAAMqb,YAAcrb,KAK/D,OAPA4c,YAAkBwU,EAA0B9U,GAI5C8U,EAAyBrW,UAAUmE,MAAQ,SAAU0J,KAG9CwI,GACT/S,YCrBEgT,kBAAmC,SAAU/U,GAE7C,SAAS+U,EAAkB1S,GACvB,OAAOrC,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAa7C,OAfA4c,YAAkByU,EAAmB/U,GAIrC+U,EAAkBtW,UAAUwF,eAAiB,SAAUuK,GACnD,IAAInM,EAAc3e,KAAK2e,YACvBA,EAAYjc,KAAKooB,GACjBnM,EAAYhF,YAEhB0X,EAAkBtW,UAAUmE,MAAQ,SAAUrD,GAC1C7b,KAAKugB,gBAAe,IAExB8Q,EAAkBtW,UAAUqE,UAAY,WACpCpf,KAAKugB,gBAAe,IAEjB8Q,GACThT,YCgCEiT,mBAAoC,SAAUhV,GAE9C,SAASgV,EAAmB3S,EAAahM,GACrC,IAAI/P,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAI9C,OAHA4C,EAAM+P,MAAQA,EACd/P,EAAM2uB,KAAO,IAAI7W,MACjB9X,EAAMsjB,MAAQ,EACPtjB,EA2BX,OAjCAga,YAAkB0U,EAAoBhV,GAQtCgV,EAAmBvW,UAAUmE,MAAQ,SAAUrD,GAC3C,IAAI0V,EAAOvxB,KAAKuxB,KACZ5e,EAAQ3S,KAAK2S,MACbuT,EAAQlmB,KAAKkmB,QACbqL,EAAKnvB,OAASuQ,EACd4e,EAAKhvB,KAAKsZ,GAIV0V,EADYrL,EAAQvT,GACNkJ,GAGtByV,EAAmBvW,UAAUqE,UAAY,WACrC,IAAIT,EAAc3e,KAAK2e,YACnBuH,EAAQlmB,KAAKkmB,MACjB,GAAIA,EAAQ,EAGR,IAFA,IAAIvT,EAAQ3S,KAAKkmB,OAASlmB,KAAK2S,MAAQ3S,KAAK2S,MAAQ3S,KAAKkmB,MACrDqL,EAAOvxB,KAAKuxB,KACP7U,EAAI,EAAGA,EAAI/J,EAAO+J,IAAK,CAC5B,IAAI8U,EAAOtL,IAAWvT,EACtBgM,EAAYjc,KAAK6uB,EAAKC,IAG9B7S,EAAYhF,YAET2X,GACTjT,YCzDEoT,gBAAiC,SAAUnV,GAE3C,SAASmV,EAAgB9S,EAAa9C,GAClC,IAAIjZ,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAE9C,OADA4C,EAAMiZ,MAAQA,EACPjZ,EAKX,OATAga,YAAkB6U,EAAiBnV,GAMnCmV,EAAgB1W,UAAUmE,MAAQ,SAAUzW,GACxCzI,KAAK2e,YAAYjc,KAAK1C,KAAK6b,QAExB4V,GACTpT,YCSEqT,sBAAuC,SAAUpV,GAEjD,SAASoV,EAAsB/S,GAC3B,OAAOrC,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAe7C,OAjBA4c,YAAkB8U,EAAuBpV,GAIzCoV,EAAsB3W,UAAUmE,MAAQ,SAAUrD,GAC9C7b,KAAK2e,YAAYjc,KAAKwoB,aAAaO,WAAW5P,KAElD6V,EAAsB3W,UAAUoE,OAAS,SAAUnD,GAC/C,IAAI2C,EAAc3e,KAAK2e,YACvBA,EAAYjc,KAAKwoB,aAAaS,YAAY3P,IAC1C2C,EAAYhF,YAEhB+X,EAAsB3W,UAAUqE,UAAY,WACxC,IAAIT,EAAc3e,KAAK2e,YACvBA,EAAYjc,KAAKwoB,aAAaU,kBAC9BjN,EAAYhF,YAET+X,GACTrT,YCXEsT,eAAgC,SAAUrV,GAE1C,SAASqV,EAAehT,EAAaiT,EAAaC,EAAOC,GACrD,IAAIlvB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAK9C,OAJA4C,EAAMgvB,YAAcA,EACpBhvB,EAAMivB,MAAQA,EACdjvB,EAAMkvB,QAAUA,EAChBlvB,EAAMlB,MAAQ,EACPkB,EAkCX,OAzCAga,YAAkB+U,EAAgBrV,GASlCrY,OAAO8tB,eAAeJ,EAAe5W,UAAW,QAC5CzK,IAAK,WACD,OAAOtQ,KAAK6xB,OAEhBlB,IAAK,SAAU9U,GACX7b,KAAK8xB,SAAU,EACf9xB,KAAK6xB,MAAQhW,GAEjBmW,YAAY,EACZC,cAAc,IAElBN,EAAe5W,UAAUmE,MAAQ,SAAUrD,GACvC,GAAK7b,KAAK8xB,QAKN,OAAO9xB,KAAK4pB,SAAS/N,GAJrB7b,KAAKkyB,KAAOrW,EACZ7b,KAAK2e,YAAYjc,KAAKmZ,IAM9B8V,EAAe5W,UAAU6O,SAAW,SAAU/N,GAC1C,IACI5a,EADAS,EAAQ1B,KAAK0B,QAEjB,IACIT,EAASjB,KAAK4xB,YAAY5xB,KAAKkyB,KAAMrW,EAAOna,GAEhD,MAAOsa,GACHhc,KAAK2e,YAAYtP,MAAM2M,GAE3Bhc,KAAKkyB,KAAOjxB,EACZjB,KAAK2e,YAAYjc,KAAKzB,IAEnB0wB,GACTtT,YCzDE8T,oBAAqC,SAAU7V,GAE/C,SAAS6V,EAAoBxT,EAAaiT,EAAaQ,EAAK5I,GACxD,IAAI5mB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAS9C,OARA4C,EAAMgvB,YAAcA,EACpBhvB,EAAMwvB,IAAMA,EACZxvB,EAAM4mB,WAAaA,EACnB5mB,EAAM0gB,UAAW,EACjB1gB,EAAM+mB,cAAe,EACrB/mB,EAAMgjB,UACNhjB,EAAMwiB,OAAS,EACfxiB,EAAMlB,MAAQ,EACPkB,EAmDX,OA9DAga,YAAkBuV,EAAqB7V,GAavC6V,EAAoBpX,UAAUmE,MAAQ,SAAUrD,GAC5C,GAAI7b,KAAKolB,OAASplB,KAAKwpB,WAAY,CAC/B,IAAI9nB,EAAQ1B,KAAK0B,QACbooB,EAAMxO,SAAStb,KAAK4xB,YAAdtW,CAA2Btb,KAAKoyB,IAAKvW,GAC3C8C,EAAc3e,KAAK2e,YACnBmL,IAAQ7O,YACR0D,EAAYtP,MAAM4L,YAAYC,IAG9Blb,KAAKolB,SACLplB,KAAK6pB,UAAUC,EAAKjO,EAAOna,SAI/B1B,KAAK4lB,OAAOrjB,KAAKsZ,IAGzBsW,EAAoBpX,UAAU8O,UAAY,SAAUC,EAAKjO,EAAOna,GAC5D1B,KAAKud,IAAI2F,kBAAkBljB,KAAM8pB,EAAKjO,EAAOna,KAEjDywB,EAAoBpX,UAAUqE,UAAY,WACtCpf,KAAK2pB,cAAe,EACA,IAAhB3pB,KAAKolB,QAAuC,IAAvBplB,KAAK4lB,OAAOxjB,UACX,IAAlBpC,KAAKsjB,UACLtjB,KAAK2e,YAAYjc,KAAK1C,KAAKoyB,KAE/BpyB,KAAK2e,YAAYhF,aAGzBwY,EAAoBpX,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GACjG,IAAI1B,EAAc3e,KAAK2e,YACvB3e,KAAKoyB,IAAMlS,EACXlgB,KAAKsjB,UAAW,EAChB3E,EAAYjc,KAAKwd,IAErBiS,EAAoBpX,UAAUwF,eAAiB,SAAUF,GACrD,IAAIuF,EAAS5lB,KAAK4lB,OAClB5lB,KAAK2Y,OAAO0H,GACZrgB,KAAKolB,SACDQ,EAAOxjB,OAAS,EAChBpC,KAAKkf,MAAM0G,EAAOta,SAEG,IAAhBtL,KAAKolB,QAAgBplB,KAAK2pB,gBACT,IAAlB3pB,KAAKsjB,UACLtjB,KAAK2e,YAAYjc,KAAK1C,KAAKoyB,KAE/BpyB,KAAK2e,YAAYhF,aAGlBwY,GACTpS,iBC3HF,SAEgBsS,WACZ,OAAO,SAAkCjR,GACrC,OAAOA,EAAOF,KAAK,IAAIoR,iBAAiBlR,KAGhD,IAAIkR,iBAAkC,WAClC,SAASA,EAAiBC,GACtBvyB,KAAKuyB,YAAcA,EAYvB,OAVAD,EAAiBvX,UAAUyB,KAAO,SAAUyC,EAAYmC,GACpD,IAAImR,EAAcvyB,KAAKuyB,YACvBA,EAAYC,YACZ,IAAIC,EAAa,IAAIC,mBAAmBzT,EAAYsT,GAChDhd,EAAe6L,EAAOnQ,UAAUwhB,GAIpC,OAHKA,EAAWvW,SACZuW,EAAWE,WAAaJ,EAAYK,WAEjCrd,GAEJ+c,KAEPI,mBAAoC,SAAUpW,GAE9C,SAASoW,EAAmB/T,EAAa4T,GACrC,IAAI3vB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAE9C,OADA4C,EAAM2vB,YAAcA,EACb3vB,EAiDX,OArDAga,YAAkB8V,EAAoBpW,GAMtCoW,EAAmB3X,UAAUkC,aAAe,WACxC,IAAIsV,EAAcvyB,KAAKuyB,YACvB,GAAKA,EAAL,CAIAvyB,KAAKuyB,YAAc,KACnB,IAAIF,EAAWE,EAAYC,UAC3B,GAAIH,GAAY,EACZryB,KAAK2yB,WAAa,UAItB,GADAJ,EAAYC,UAAYH,EAAW,EAC/BA,EAAW,EACXryB,KAAK2yB,WAAa,SADtB,CA2BA,IAAIA,EAAa3yB,KAAK2yB,WAClBE,EAAmBN,EAAYO,YACnC9yB,KAAK2yB,WAAa,MACdE,GAAsBF,GAAcE,IAAqBF,GACzDE,EAAiBrd,oBAzCjBxV,KAAK2yB,WAAa,MA4CnBD,GACTrU,YCrEE0U,sBAAuC,SAAUzW,GAEjD,SAASyW,EAAsB3R,EAAQ4R,GACnC,IAAIpwB,EAAQ0Z,EAAOE,KAAKxc,OAASA,KAMjC,OALA4C,EAAMwe,OAASA,EACfxe,EAAMowB,eAAiBA,EACvBpwB,EAAM4vB,UAAY,EAElB5vB,EAAMqwB,aAAc,EACbrwB,EAiCX,OAzCAga,YAAkBmW,EAAuBzW,GAWzCyW,EAAsBhY,UAAUkG,WAAa,SAAUhC,GACnD,OAAOjf,KAAKkzB,aAAajiB,UAAUgO,IAEvC8T,EAAsBhY,UAAUmY,WAAa,WACzC,IAAIvD,EAAU3vB,KAAKmzB,SAInB,OAHKxD,IAAWA,EAAQjR,YACpB1e,KAAKmzB,SAAWnzB,KAAKgzB,kBAElBhzB,KAAKmzB,UAEhBJ,EAAsBhY,UAAU6X,QAAU,WACtC,IAAID,EAAa3yB,KAAK8yB,YActB,OAbKH,IACD3yB,KAAKizB,aAAc,GACnBN,EAAa3yB,KAAK8yB,YAAc,IAAIjW,cACzBU,IAAIvd,KAAKohB,OACfnQ,UAAU,IAAImiB,sBAAsBpzB,KAAKkzB,aAAclzB,QACxD2yB,EAAWzW,QACXlc,KAAK8yB,YAAc,KACnBH,EAAa9V,aAAaY,OAG1Bzd,KAAK8yB,YAAcH,GAGpBA,GAEXI,EAAsBhY,UAAUsX,SAAW,WACvC,OAAOgB,UAAAA,CAAsBrzB,OAE1B+yB,GACT5rB,cAcEisB,sBAAuC,SAAU9W,GAEjD,SAAS8W,EAAsBzU,EAAa4T,GACxC,IAAI3vB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAE9C,OADA4C,EAAM2vB,YAAcA,EACb3vB,EAwBX,OA5BAga,YAAkBwW,EAAuB9W,GAMzC8W,EAAsBrY,UAAUoE,OAAS,SAAUnD,GAC/Chc,KAAKid,eACLX,EAAOvB,UAAUoE,OAAO3C,KAAKxc,KAAMgc,IAEvCoX,EAAsBrY,UAAUqE,UAAY,WACxCpf,KAAKuyB,YAAYU,aAAc,EAC/BjzB,KAAKid,eACLX,EAAOvB,UAAUqE,UAAU5C,KAAKxc,OAEpCozB,EAAsBrY,UAAUkC,aAAe,WAC3C,IAAIsV,EAAcvyB,KAAKuyB,YACvB,GAAIA,EAAa,CACbvyB,KAAKuyB,YAAc,KACnB,IAAII,EAAaJ,EAAYO,YAC7BP,EAAYC,UAAY,EACxBD,EAAYY,SAAW,KACvBZ,EAAYO,YAAc,KACtBH,GACAA,EAAWnd,gBAIhB4d,GACTtD,mBAiBE4C,qBAAoC,SAAUpW,GAE9C,SAASoW,EAAmB/T,EAAa4T,GACrC,IAAI3vB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAE9C,OADA4C,EAAM2vB,YAAcA,EACb3vB,EAiDX,OArDAga,YAAkB8V,EAAoBpW,GAMtCoW,EAAmB3X,UAAUkC,aAAe,WACxC,IAAIsV,EAAcvyB,KAAKuyB,YACvB,GAAKA,EAAL,CAIAvyB,KAAKuyB,YAAc,KACnB,IAAIF,EAAWE,EAAYC,UAC3B,GAAIH,GAAY,EACZryB,KAAK2yB,WAAa,UAItB,GADAJ,EAAYC,UAAYH,EAAW,EAC/BA,EAAW,EACXryB,KAAK2yB,WAAa,SADtB,CA2BA,IAAIA,EAAa3yB,KAAK2yB,WAClBE,EAAmBN,EAAYO,YACnC9yB,KAAK2yB,WAAa,MACdE,GAAsBF,GAAcE,IAAqBF,GACzDE,EAAiBrd,oBAzCjBxV,KAAK2yB,WAAa,MA4CnBD,GACTrU,YC5FEiV,oBAAqC,SAAUhX,GAE/C,SAASgX,EAAoB3U,EAAaiF,EAAWI,QACnC,IAAVA,IACAA,EAAQ,GAEZ,IAAIphB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAG9C,OAFA4C,EAAMghB,UAAYA,EAClBhhB,EAAMohB,MAAQA,EACPphB,EAoBX,OA5BAga,YAAkB0W,EAAqBhX,GAWvCgX,EAAoBtI,SAAW,SAAUxD,GACrC,IAAIyE,EAAezE,EAAIyE,aAActN,EAAc6I,EAAI7I,YACvDsN,EAAab,QAAQzM,GACrB3e,KAAKwV,eAET8d,EAAoBvY,UAAUwY,gBAAkB,SAAUtH,GACtDjsB,KAAKud,IAAIvd,KAAK4jB,UAAUE,SAASwP,EAAoBtI,SAAUhrB,KAAKgkB,MAAO,IAAIwP,iBAAiBvH,EAAcjsB,KAAK2e,gBAEvH2U,EAAoBvY,UAAUmE,MAAQ,SAAUrD,GAC5C7b,KAAKuzB,gBAAgBrI,aAAaO,WAAW5P,KAEjDyX,EAAoBvY,UAAUoE,OAAS,SAAUnD,GAC7Chc,KAAKuzB,gBAAgBrI,aAAaS,YAAY3P,KAElDsX,EAAoBvY,UAAUqE,UAAY,WACtCpf,KAAKuzB,gBAAgBrI,aAAaU,mBAE/B0H,GACTjV,YAEEmV,iBAAkC,WAKlC,OAJA,SAA0BvH,EAActN,GACpC3e,KAAKisB,aAAeA,EACpBjsB,KAAK2e,YAAcA,MCZvB8U,4BAA6C,SAAUnX,GAEvD,SAASmX,EAA4B9U,EAAa+U,GAC9C,IAAI9wB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAG9C,OAFA4C,EAAM+b,YAAcA,EACpB/b,EAAM8wB,YAAcA,EACb9wB,EAuBX,OA5BAga,YAAkB6W,EAA6BnX,GAO/CmX,EAA4B1Y,UAAUuF,YAAc,SAAUjR,EAAOgR,GACjErgB,KAAK2zB,yBAETF,EAA4B1Y,UAAUwF,eAAiB,SAAUF,GAC7DrgB,KAAK2zB,yBAETF,EAA4B1Y,UAAUoE,OAAS,SAAUnD,GACrDhc,KAAK2zB,yBAETF,EAA4B1Y,UAAUqE,UAAY,WAC9Cpf,KAAK2zB,yBAETF,EAA4B1Y,UAAU4Y,sBAAwB,WAC1D,IAAIjxB,EAAO1C,KAAK0zB,YAAYpoB,QACxB5I,EACA1C,KAAKud,IAAI2F,kBAAkBljB,KAAM0C,IAGjC1C,KAAK2e,YAAYhF,YAGlB8Z,GACT1T,iBC5EE6T,mBAAoC,SAAUtX,GAE9C,SAASsX,EAAmBjV,GACxB,IAAI/b,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAE9C,OADA4C,EAAMixB,SAAU,EACTjxB,EAWX,OAfAga,YAAkBgX,EAAoBtX,GAMtCsX,EAAmB7Y,UAAUmE,MAAQ,SAAUrD,GACvC7b,KAAK6zB,QACL7zB,KAAK2e,YAAYjc,MAAM1C,KAAKkG,KAAM2V,IAGlC7b,KAAK6zB,SAAU,EAEnB7zB,KAAKkG,KAAO2V,GAET+X,GACTvV,YChEEyV,gBAAiC,SAAUxX,GAE3C,SAASwX,EAAgBC,GACrB,IAAInxB,EAAQ0Z,EAAOE,KAAKxc,OAASA,KAEjC,OADA4C,EAAMmxB,OAASA,EACRnxB,EA+BX,OAnCAga,YAAkBkX,EAAiBxX,GAMnCrY,OAAO8tB,eAAe+B,EAAgB/Y,UAAW,SAC7CzK,IAAK,WACD,OAAOtQ,KAAKg0B,YAEhBhC,YAAY,EACZC,cAAc,IAGlB6B,EAAgB/Y,UAAUkG,WAAa,SAAUhC,GAC7C,IAAI1J,EAAe+G,EAAOvB,UAAUkG,WAAWzE,KAAKxc,KAAMif,GAI1D,OAHI1J,IAAiBA,EAAa2G,QAC9B+C,EAAWvc,KAAK1C,KAAK+zB,QAElBxe,GAEXue,EAAgB/Y,UAAUiZ,SAAW,WACjC,GAAIh0B,KAAK+vB,SACL,MAAM/vB,KAAKgwB,YAEV,GAAIhwB,KAAKkc,OACV,MAAM,IAAIuT,wBAGV,OAAOzvB,KAAK+zB,QAGpBD,EAAgB/Y,UAAUrY,KAAO,SAAUmZ,GACvCS,EAAOvB,UAAUrY,KAAK8Z,KAAKxc,KAAMA,KAAK+zB,OAASlY,IAE5CiY,GACTvyB,WCrCE0yB,aAA8B,SAAU3X,GAExC,SAAS2X,IACL,IAAIrxB,EAAmB,OAAX0Z,GAAmBA,EAAOlB,MAAMpb,KAAMqb,YAAcrb,KAIhE,OAHA4C,EAAMiZ,MAAQ,KACdjZ,EAAMsxB,SAAU,EAChBtxB,EAAM+mB,cAAe,EACd/mB,EAiCX,OAvCAga,YAAkBqX,EAAc3X,GAShC2X,EAAalZ,UAAUkG,WAAa,SAAUhC,GAC1C,OAAIjf,KAAK+vB,UACL9Q,EAAW5P,MAAMrP,KAAKgwB,aACfnT,aAAaY,OAEfzd,KAAK2pB,cAAgB3pB,KAAKk0B,SAC/BjV,EAAWvc,KAAK1C,KAAK6b,OACrBoD,EAAWtF,WACJkD,aAAaY,OAEjBnB,EAAOvB,UAAUkG,WAAWzE,KAAKxc,KAAMif,IAElDgV,EAAalZ,UAAUrY,KAAO,SAAUmZ,GAC/B7b,KAAK2pB,eACN3pB,KAAK6b,MAAQA,EACb7b,KAAKk0B,SAAU,IAGvBD,EAAalZ,UAAU1L,MAAQ,SAAUA,GAChCrP,KAAK2pB,cACNrN,EAAOvB,UAAU1L,MAAMmN,KAAKxc,KAAMqP,IAG1C4kB,EAAalZ,UAAUpB,SAAW,WAC9B3Z,KAAK2pB,cAAe,EAChB3pB,KAAKk0B,SACL5X,EAAOvB,UAAUrY,KAAK8Z,KAAKxc,KAAMA,KAAK6b,OAE1CS,EAAOvB,UAAUpB,SAAS6C,KAAKxc,OAE5Bi0B,GACT1yB,WCxCE4yB,YAA6B,SAAU7X,GAEvC,SAAS6X,EAAYvQ,EAAWC,GAC5B,IAAIjhB,EAAQ0Z,EAAOE,KAAKxc,KAAM4jB,EAAWC,IAAS7jB,KAGlD,OAFA4C,EAAMghB,UAAYA,EAClBhhB,EAAMihB,KAAOA,EACNjhB,EAgCX,OArCAga,YAAkBuX,EAAa7X,GAO/B6X,EAAYpZ,UAAU+I,SAAW,SAAUC,EAAOC,GAI9C,YAHc,IAAVA,IACAA,EAAQ,GAERA,EAAQ,EACD1H,EAAOvB,UAAU+I,SAAStH,KAAKxc,KAAM+jB,EAAOC,IAEvDhkB,KAAKgkB,MAAQA,EACbhkB,KAAK+jB,MAAQA,EACb/jB,KAAK4jB,UAAUW,MAAMvkB,MACdA,OAEXm0B,EAAYpZ,UAAU0J,QAAU,SAAUV,EAAOC,GAC7C,OAAQA,EAAQ,GAAKhkB,KAAKkc,OACtBI,EAAOvB,UAAU0J,QAAQjI,KAAKxc,KAAM+jB,EAAOC,GAC3ChkB,KAAK0kB,SAASX,EAAOC,IAE7BmQ,EAAYpZ,UAAUsJ,eAAiB,SAAUT,EAAWO,EAAIH,GAO5D,YANc,IAAVA,IACAA,EAAQ,GAKG,OAAVA,GAAkBA,EAAQ,GAAiB,OAAVA,GAAkBhkB,KAAKgkB,MAAQ,EAC1D1H,EAAOvB,UAAUsJ,eAAe7H,KAAKxc,KAAM4jB,EAAWO,EAAIH,GAG9DJ,EAAUW,MAAMvkB,OAEpBm0B,GACTlQ,aC5CEmQ,eAAgC,SAAU9X,GAE1C,SAAS8X,IACL,OAAkB,OAAX9X,GAAmBA,EAAOlB,MAAMpb,KAAMqb,YAAcrb,KAE/D,OAJA4c,YAAkBwX,EAAgB9X,GAI3B8X,GACTlP,gBCuDS6G,MAAsB,IAAIqI,eAAeD,aCrDhD/c,gBAA+B,SAAUkF,GAEzC,SAASlF,EAAc0O,EAAYuO,EAAYzQ,QACxB,IAAfkC,IACAA,EAAa2D,OAAOC,wBAEL,IAAf2K,IACAA,EAAa5K,OAAOC,mBAExB,IAAI9mB,EAAQ0Z,EAAOE,KAAKxc,OAASA,KAajC,OAZA4C,EAAMghB,UAAYA,EAClBhhB,EAAM0xB,WACN1xB,EAAM2xB,qBAAsB,EAC5B3xB,EAAM4xB,YAAc1O,EAAa,EAAI,EAAIA,EACzCljB,EAAM6xB,YAAcJ,EAAa,EAAI,EAAIA,EACrCA,IAAe5K,OAAOC,mBACtB9mB,EAAM2xB,qBAAsB,EAC5B3xB,EAAMF,KAAOE,EAAM8xB,wBAGnB9xB,EAAMF,KAAOE,EAAM+xB,eAEhB/xB,EAmFX,OAxGAga,YAAkBxF,EAAekF,GAuBjClF,EAAc2D,UAAU2Z,uBAAyB,SAAU7Y,GACvD,IAAIyY,EAAUt0B,KAAKs0B,QACnBA,EAAQ/xB,KAAKsZ,GAGTyY,EAAQlyB,OAASpC,KAAKw0B,aACtBF,EAAQhpB,QAEZgR,EAAOvB,UAAUrY,KAAK8Z,KAAKxc,KAAM6b,IAErCzE,EAAc2D,UAAU4Z,eAAiB,SAAU9Y,GAC/C7b,KAAKs0B,QAAQ/xB,KAAK,IAAIqyB,YAAY50B,KAAK60B,UAAWhZ,IAClD7b,KAAK80B,2BACLxY,EAAOvB,UAAUrY,KAAK8Z,KAAKxc,KAAM6b,IAGrCzE,EAAc2D,UAAUkG,WAAa,SAAUhC,GAE3C,IAII1J,EAJAgf,EAAsBv0B,KAAKu0B,oBAC3BD,EAAUC,EAAsBv0B,KAAKs0B,QAAUt0B,KAAK80B,2BACpDlR,EAAY5jB,KAAK4jB,UACjBzG,EAAMmX,EAAQlyB,OAElB,GAAIpC,KAAKkc,OACL,MAAM,IAAIuT,wBAYd,GAVSzvB,KAAK0e,WAAa1e,KAAK+vB,SAC5Bxa,EAAesH,aAAaY,OAG5Bzd,KAAK4vB,UAAUrtB,KAAK0c,GACpB1J,EAAe,IAAIma,oBAAoB1vB,KAAMif,IAE7C2E,GACA3E,EAAW1B,IAAI0B,EAAa,IAAIqU,oBAAoBrU,EAAY2E,IAEhE2Q,EACA,IAAK,IAAI7X,EAAI,EAAGA,EAAIS,IAAQ8B,EAAW/C,OAAQQ,IAC3CuC,EAAWvc,KAAK4xB,EAAQ5X,SAI5B,IAASA,EAAI,EAAGA,EAAIS,IAAQ8B,EAAW/C,OAAQQ,IAC3CuC,EAAWvc,KAAK4xB,EAAQ5X,GAAGb,OASnC,OANI7b,KAAK+vB,SACL9Q,EAAW5P,MAAMrP,KAAKgwB,aAEjBhwB,KAAK0e,WACVO,EAAWtF,WAERpE,GAEX6B,EAAc2D,UAAU8Z,QAAU,WAC9B,OAAQ70B,KAAK4jB,WAAamI,OAAO/G,OAErC5N,EAAc2D,UAAU+Z,yBAA2B,WAU/C,IATA,IAAI9P,EAAMhlB,KAAK60B,UACXL,EAAcx0B,KAAKw0B,YACnBC,EAAcz0B,KAAKy0B,YACnBH,EAAUt0B,KAAKs0B,QACfS,EAAcT,EAAQlyB,OACtB4yB,EAAc,EAIXA,EAAcD,KACZ/P,EAAMsP,EAAQU,GAAahJ,KAAQyI,IAGxCO,IAQJ,OANID,EAAcP,IACdQ,EAAc1qB,KAAKC,IAAIyqB,EAAaD,EAAcP,IAElDQ,EAAc,GACdV,EAAQxW,OAAO,EAAGkX,GAEfV,GAEJld,GACT7V,WAEEqzB,YAA6B,WAK7B,OAJA,SAAqB5I,EAAMnQ,GACvB7b,KAAKgsB,KAAOA,EACZhsB,KAAK6b,MAAQA,MCrFjBoZ,eAAgC,SAAU3Y,GAE1C,SAAS2Y,EAAetW,GACpB,IAAI/b,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAI9C,OAHA4C,EAAMsyB,UAAW,EACjBtyB,EAAM8lB,eACN9lB,EAAM6N,iBACC7N,EAqCX,OA3CAga,YAAkBqY,EAAgB3Y,GAQlC2Y,EAAela,UAAUmE,MAAQ,SAAUyB,GACvC3gB,KAAK0oB,YAAYnmB,KAAKoe,IAE1BsU,EAAela,UAAUqE,UAAY,WACjC,IAAIsJ,EAAc1oB,KAAK0oB,YACnBvL,EAAMuL,EAAYtmB,OACtB,GAAY,IAAR+a,EACAnd,KAAK2e,YAAYhF,eAEhB,CACD,IAAK,IAAI+C,EAAI,EAAGA,EAAIS,IAAQnd,KAAKk1B,SAAUxY,IAAK,CAC5C,IAAIiE,EAAa+H,EAAYhM,GACzBnH,EAAe2N,kBAAkBljB,KAAM2gB,EAAYA,EAAYjE,GAC/D1c,KAAKyQ,eACLzQ,KAAKyQ,cAAclO,KAAKgT,GAE5BvV,KAAKud,IAAIhI,GAEbvV,KAAK0oB,YAAc,OAG3BuM,EAAela,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GAC5F,IAAKrgB,KAAKk1B,SAAU,CAChBl1B,KAAKk1B,UAAW,EAChB,IAAK,IAAIxY,EAAI,EAAGA,EAAI1c,KAAKyQ,cAAcrO,OAAQsa,IAC3C,GAAIA,IAAMyD,EAAY,CAClB,IAAI5K,EAAevV,KAAKyQ,cAAciM,GACtCnH,EAAaC,cACbxV,KAAK2Y,OAAOpD,GAGpBvV,KAAKyQ,cAAgB,KAEzBzQ,KAAK2e,YAAYjc,KAAKwd,IAEnB+U,GACTlV,iBCnCEoV,iBAAkC,SAAU7Y,GAE5C,SAAS6Y,EAAiBxW,EAAauH,EAAO9E,GAC1C,IAAIxe,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAG9C,OAFA4C,EAAMsjB,MAAQA,EACdtjB,EAAMwe,OAASA,EACRxe,EAcX,OAnBAga,YAAkBuY,EAAkB7Y,GAOpC6Y,EAAiBpa,UAAUpB,SAAW,WAClC,IAAK3Z,KAAK0e,UAAW,CACjB,IAAe0C,EAANphB,KAAkBohB,OAAQ8E,EAA1BlmB,KAAqCkmB,MAC9C,GAAc,IAAVA,EACA,OAAO5J,EAAOvB,UAAUpB,SAAS6C,KAAKxc,MAEjCkmB,GAAS,IACdlmB,KAAKkmB,MAAQA,EAAQ,GAEzB9E,EAAOnQ,UAAUjR,KAAKqf,4BAGvB8V,GACT9W,YC9BE+W,qBAAsC,SAAU9Y,GAEhD,SAAS8Y,EAAqBzW,EAAa0W,EAAUjU,GACjD,IAAIxe,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAI9C,OAHA4C,EAAMyyB,SAAWA,EACjBzyB,EAAMwe,OAASA,EACfxe,EAAM0yB,2BAA4B,EAC3B1yB,EAsDX,OA5DAga,YAAkBwY,EAAsB9Y,GAQxC8Y,EAAqBra,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GAClGrgB,KAAKs1B,2BAA4B,EACjCt1B,KAAKohB,OAAOnQ,UAAUjR,OAE1Bo1B,EAAqBra,UAAUwF,eAAiB,SAAUF,GACtD,IAAuC,IAAnCrgB,KAAKs1B,0BACL,OAAOhZ,EAAOvB,UAAUpB,SAAS6C,KAAKxc,OAG9Co1B,EAAqBra,UAAUpB,SAAW,WAEtC,GADA3Z,KAAKs1B,2BAA4B,GAC5Bt1B,KAAK0e,UAAW,CAIjB,GAHK1e,KAAKu1B,SACNv1B,KAAKw1B,sBAEJx1B,KAAKy1B,qBAAuBz1B,KAAKy1B,oBAAoBvZ,OACtD,OAAOI,EAAOvB,UAAUpB,SAAS6C,KAAKxc,MAE1CA,KAAKqf,yBACLrf,KAAK01B,cAAchzB,SAI3B0yB,EAAqBra,UAAUkC,aAAe,WAC1C,IAAeyY,EAAN11B,KAAyB01B,cAAeD,EAAxCz1B,KAAiEy1B,oBACtEC,IACAA,EAAclgB,cACdxV,KAAK01B,cAAgB,MAErBD,IACAA,EAAoBjgB,cACpBxV,KAAKy1B,oBAAsB,MAE/Bz1B,KAAKu1B,QAAU,MAGnBH,EAAqBra,UAAUsE,uBAAyB,WACpD,IAAIpC,EAAejd,KAAKid,aAIxB,OAHAjd,KAAKid,aAAe,KACpBX,EAAOvB,UAAUsE,uBAAuB7C,KAAKxc,MAC7CA,KAAKid,aAAeA,EACbjd,MAEXo1B,EAAqBra,UAAUya,mBAAqB,WAChDx1B,KAAK01B,cAAgB,IAAIn0B,UACzB,IAAIg0B,EAAUja,SAAStb,KAAKq1B,SAAd/Z,CAAwBtb,KAAK01B,eAC3C,GAAIH,IAAYta,YACZ,OAAOqB,EAAOvB,UAAUpB,SAAS6C,KAAKxc,MAE1CA,KAAKu1B,QAAUA,EACfv1B,KAAKy1B,oBAAsBvS,kBAAkBljB,KAAMu1B,IAEhDH,GACTrV,iBC5DE4V,gBAAiC,SAAUrZ,GAE3C,SAASqZ,EAAgBhX,EAAauH,EAAO9E,GACzC,IAAIxe,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAG9C,OAFA4C,EAAMsjB,MAAQA,EACdtjB,EAAMwe,OAASA,EACRxe,EAcX,OAnBAga,YAAkB+Y,EAAiBrZ,GAOnCqZ,EAAgB5a,UAAU1L,MAAQ,SAAU2M,GACxC,IAAKhc,KAAK0e,UAAW,CACjB,IAAe0C,EAANphB,KAAkBohB,OAAQ8E,EAA1BlmB,KAAqCkmB,MAC9C,GAAc,IAAVA,EACA,OAAO5J,EAAOvB,UAAU1L,MAAMmN,KAAKxc,KAAMgc,GAEpCkK,GAAS,IACdlmB,KAAKkmB,MAAQA,EAAQ,GAEzB9E,EAAOnQ,UAAUjR,KAAKqf,4BAGvBsW,GACTtX,YCtBEuX,oBAAqC,SAAUtZ,GAE/C,SAASsZ,EAAoBjX,EAAa0W,EAAUjU,GAChD,IAAIxe,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAG9C,OAFA4C,EAAMyyB,SAAWA,EACjBzyB,EAAMwe,OAASA,EACRxe,EA8CX,OAnDAga,YAAkBgZ,EAAqBtZ,GAOvCsZ,EAAoB7a,UAAU1L,MAAQ,SAAU2M,GAC5C,IAAKhc,KAAK0e,UAAW,CACjB,IAAInC,EAASvc,KAAKuc,OACdgZ,EAAUv1B,KAAKu1B,QACfE,EAAsBz1B,KAAKy1B,oBAC/B,GAAKF,EASDv1B,KAAKuc,OAAS,KACdvc,KAAKy1B,oBAAsB,SAVjB,CAGV,GAFAlZ,EAAS,IAAIhb,WACbg0B,EAAUja,SAAStb,KAAKq1B,SAAd/Z,CAAwBiB,MAClBtB,YACZ,OAAOqB,EAAOvB,UAAU1L,MAAMmN,KAAKxc,KAAMib,YAAYC,GAEzDua,EAAsBvS,kBAAkBljB,KAAMu1B,GAMlDv1B,KAAKqf,yBACLrf,KAAKuc,OAASA,EACdvc,KAAKu1B,QAAUA,EACfv1B,KAAKy1B,oBAAsBA,EAC3BlZ,EAAO7Z,KAAKsZ,KAIpB4Z,EAAoB7a,UAAUkC,aAAe,WACzC,IAAeV,EAANvc,KAAkBuc,OAAQkZ,EAA1Bz1B,KAAmDy1B,oBACxDlZ,IACAA,EAAO/G,cACPxV,KAAKuc,OAAS,MAEdkZ,IACAA,EAAoBjgB,cACpBxV,KAAKy1B,oBAAsB,MAE/Bz1B,KAAKu1B,QAAU,MAEnBK,EAAoB7a,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GACjG,IAAIpD,EAAejd,KAAKid,aACxBjd,KAAKid,aAAe,KACpBjd,KAAKqf,yBACLrf,KAAKid,aAAeA,EACpBjd,KAAKohB,OAAOnQ,UAAUjR,OAEnB41B,GACT7V,iBClCE8V,iBAAkC,SAAUvZ,GAE5C,SAASuZ,IACL,IAAIjzB,EAAmB,OAAX0Z,GAAmBA,EAAOlB,MAAMpb,KAAMqb,YAAcrb,KAEhE,OADA4C,EAAM0gB,UAAW,EACV1gB,EAkBX,OAtBAga,YAAkBiZ,EAAkBvZ,GAMpCuZ,EAAiB9a,UAAUmE,MAAQ,SAAUrD,GACzC7b,KAAK6b,MAAQA,EACb7b,KAAKsjB,UAAW,GAEpBuS,EAAiB9a,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GAC9FrgB,KAAKoqB,aAETyL,EAAiB9a,UAAUwF,eAAiB,WACxCvgB,KAAKoqB,aAETyL,EAAiB9a,UAAUqP,UAAY,WAC/BpqB,KAAKsjB,WACLtjB,KAAKsjB,UAAW,EAChBtjB,KAAK2e,YAAYjc,KAAK1C,KAAK6b,SAG5Bga,GACT9V,iBCrBE+V,qBAAsC,SAAUxZ,GAEhD,SAASwZ,EAAqBnX,EAAaoX,EAAQnS,GAC/C,IAAIhhB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAK9C,OAJA4C,EAAMmzB,OAASA,EACfnzB,EAAMghB,UAAYA,EAClBhhB,EAAM0gB,UAAW,EACjB1gB,EAAM2a,IAAIqG,EAAUE,SAASkS,qBAAsBD,GAAU9W,WAAYrc,EAAOmzB,OAAQA,KACjFnzB,EAYX,OAnBAga,YAAkBkZ,EAAsBxZ,GASxCwZ,EAAqB/a,UAAUmE,MAAQ,SAAUrD,GAC7C7b,KAAKwqB,UAAY3O,EACjB7b,KAAKsjB,UAAW,GAEpBwS,EAAqB/a,UAAUiF,WAAa,WACpChgB,KAAKsjB,WACLtjB,KAAKsjB,UAAW,EAChBtjB,KAAK2e,YAAYjc,KAAK1C,KAAKwqB,aAG5BsL,GACTzX,YACF,SAAS2X,qBAAqBjS,GAC1B,IAAI9E,EAAa8E,EAAM9E,WAAY8W,EAAShS,EAAMgS,OAClD9W,EAAWe,aACXhgB,KAAK8jB,SAASC,EAAOgS,GCVzB,IAAIE,wBAAyC,SAAU3Z,GAEnD,SAAS2Z,EAAwBtX,EAAauX,EAAWC,GACrD,IAAIvzB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAO9C,OANA4C,EAAMszB,UAAYA,EAClBtzB,EAAMuzB,SAAWA,EACjBvzB,EAAMqoB,MACNroB,EAAMwzB,MACNxzB,EAAMyzB,cAAe,EACrBzzB,EAAM2a,IAAI2Y,EAAUjlB,UAAU,IAAIqlB,iCAAiC3X,EAAa/b,KACzEA,EAqDX,OA9DAga,YAAkBqZ,EAAyB3Z,GAW3C2Z,EAAwBlb,UAAUmE,MAAQ,SAAUrD,GAC5C7b,KAAKq2B,cAAmC,IAAnBr2B,KAAKo2B,GAAGh0B,OAC7BpC,KAAK4Y,MAAK,IAGV5Y,KAAKirB,GAAG1oB,KAAKsZ,GACb7b,KAAKu2B,gBAGbN,EAAwBlb,UAAUqE,UAAY,WACtCpf,KAAKq2B,aACLr2B,KAAK4Y,KAAwB,IAAnB5Y,KAAKirB,GAAG7oB,QAAmC,IAAnBpC,KAAKo2B,GAAGh0B,QAG1CpC,KAAKq2B,cAAe,GAG5BJ,EAAwBlb,UAAUwb,YAAc,WAE5C,IADA,IAAetL,EAANjrB,KAAcirB,GAAImL,EAAlBp2B,KAA0Bo2B,GAAID,EAA9Bn2B,KAA4Cm2B,SAC9ClL,EAAG7oB,OAAS,GAAKg0B,EAAGh0B,OAAS,GAAG,CACnC,IAAIo0B,EAAIvL,EAAG3f,QACPtK,EAAIo1B,EAAG9qB,QACPmrB,GAAW,EACXN,GACAM,EAAWnb,SAAS6a,EAAT7a,CAAmBkb,EAAGx1B,MAChBia,aACbjb,KAAK2e,YAAYtP,MAAM4L,YAAYC,GAIvCub,EAAWD,IAAMx1B,EAEhBy1B,GACDz2B,KAAK4Y,MAAK,KAItBqd,EAAwBlb,UAAUnC,KAAO,SAAUiD,GAC/C,IAAI8C,EAAc3e,KAAK2e,YACvBA,EAAYjc,KAAKmZ,GACjB8C,EAAYhF,YAEhBsc,EAAwBlb,UAAU2b,MAAQ,SAAU7a,GAC5C7b,KAAKq2B,cAAmC,IAAnBr2B,KAAKirB,GAAG7oB,OAC7BpC,KAAK4Y,MAAK,IAGV5Y,KAAKo2B,GAAG7zB,KAAKsZ,GACb7b,KAAKu2B,gBAGNN,GACT5X,YAEEiY,iCAAkD,SAAUha,GAE5D,SAASga,EAAiC3X,EAAaZ,GACnD,IAAInb,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAE9C,OADA4C,EAAMmb,OAASA,EACRnb,EAWX,OAfAga,YAAkB0Z,EAAkCha,GAMpDga,EAAiCvb,UAAUmE,MAAQ,SAAUrD,GACzD7b,KAAK+d,OAAO2Y,MAAM7a,IAEtBya,EAAiCvb,UAAUoE,OAAS,SAAUnD,GAC1Dhc,KAAK+d,OAAO1O,MAAM2M,IAEtBsa,EAAiCvb,UAAUqE,UAAY,WACnDpf,KAAK+d,OAAOqB,aAETkX,GACTjY,YCxHEsY,iBAAkC,SAAUra,GAE5C,SAASqa,EAAiBhY,EAAaqL,EAAW5I,GAC9C,IAAIxe,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAK9C,OAJA4C,EAAMonB,UAAYA,EAClBpnB,EAAMwe,OAASA,EACfxe,EAAMg0B,WAAY,EAClBh0B,EAAMlB,MAAQ,EACPkB,EAwCX,OA/CAga,YAAkB+Z,EAAkBra,GASpCqa,EAAiB5b,UAAU8b,iBAAmB,SAAUhb,GAChD7b,KAAK42B,UACL52B,KAAK2e,YAAYtP,MAAM,4CAGvBrP,KAAK42B,WAAY,EACjB52B,KAAK82B,YAAcjb,IAG3B8a,EAAiB5b,UAAUmE,MAAQ,SAAUrD,GACzC,IAAIna,EAAQ1B,KAAK0B,QACb1B,KAAKgqB,UACLhqB,KAAKgvB,QAAQnT,EAAOna,GAGpB1B,KAAK62B,iBAAiBhb,IAG9B8a,EAAiB5b,UAAUiU,QAAU,SAAUnT,EAAOna,GAClD,IACQ1B,KAAKgqB,UAAUnO,EAAOna,EAAO1B,KAAKohB,SAClCphB,KAAK62B,iBAAiBhb,GAG9B,MAAOG,GACHhc,KAAK2e,YAAYtP,MAAM2M,KAG/B2a,EAAiB5b,UAAUqE,UAAY,WACnC,IAAIT,EAAc3e,KAAK2e,YACnB3e,KAAK0B,MAAQ,GACbid,EAAYjc,KAAK1C,KAAK42B,UAAY52B,KAAK82B,iBAAc5oB,GACrDyQ,EAAYhF,YAGZgF,EAAYtP,MAAM,IAAIof,aAGvBkI,GACTtY,YCzDE0Y,eAAgC,SAAUza,GAE1C,SAASya,EAAepY,EAAahM,GACjC,IAAI/P,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAG9C,OAFA4C,EAAM+P,MAAQA,EACd/P,EAAMsjB,MAAQ,EACPtjB,EAOX,OAZAga,YAAkBma,EAAgBza,GAOlCya,EAAehc,UAAUmE,MAAQ,SAAUzW,KACjCzI,KAAKkmB,MAAQlmB,KAAK2S,OACpB3S,KAAK2e,YAAYjc,KAAK+F,IAGvBsuB,GACT1Y,YCkBE2Y,mBAAoC,SAAU1a,GAE9C,SAAS0a,EAAmBrY,EAAasY,GACrC,IAAIr0B,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAI9C,OAHA4C,EAAMq0B,WAAaA,EACnBr0B,EAAMs0B,OAAS,EACft0B,EAAMu0B,MAAQ,IAAIzc,MAAMuc,GACjBr0B,EAgBX,OAtBAga,YAAkBoa,EAAoB1a,GAQtC0a,EAAmBjc,UAAUmE,MAAQ,SAAUrD,GAC3C,IAAIub,EAAYp3B,KAAKi3B,WACjB/Q,EAAQlmB,KAAKk3B,SACjB,GAAIhR,EAAQkR,EACRp3B,KAAKm3B,MAAMjR,GAASrK,MAEnB,CACD,IAAIwb,EAAenR,EAAQkR,EACvB7F,EAAOvxB,KAAKm3B,MACZG,EAAW/F,EAAK8F,GACpB9F,EAAK8F,GAAgBxb,EACrB7b,KAAK2e,YAAYjc,KAAK40B,KAGvBN,GACT3Y,YCtDEkZ,oBAAqC,SAAUjb,GAE/C,SAASib,EAAoB5Y,EAAa0W,GACtC,IAAIzyB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAG9C,OAFA4C,EAAM0gB,UAAW,EACjB1gB,EAAM2a,IAAI3a,EAAM6gB,kBAAoBP,kBAAkBtgB,EAAOyyB,IACtDzyB,EAgBX,OArBAga,YAAkB2a,EAAqBjb,GAOvCib,EAAoBxc,UAAUmE,MAAQ,SAAUrD,GACxC7b,KAAKsjB,UACLhH,EAAOvB,UAAUmE,MAAM1C,KAAKxc,KAAM6b,IAG1C0b,EAAoBxc,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GACjGrgB,KAAKsjB,UAAW,EACZtjB,KAAKyjB,mBACLzjB,KAAKyjB,kBAAkBjO,eAG/B+hB,EAAoBxc,UAAUwF,eAAiB,aAGxCgX,GACTxX,iBCxBEyX,oBAAqC,SAAUlb,GAE/C,SAASkb,EAAoB7Y,EAAaqL,GACtC,IAAIpnB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAI9C,OAHA4C,EAAMonB,UAAYA,EAClBpnB,EAAM60B,UAAW,EACjB70B,EAAMlB,MAAQ,EACPkB,EAoBX,OA1BAga,YAAkB4a,EAAqBlb,GAQvCkb,EAAoBzc,UAAUmE,MAAQ,SAAUrD,GAC5C,IAAI8C,EAAc3e,KAAK2e,YACnB3e,KAAKy3B,UACLz3B,KAAK03B,iBAAiB7b,GAErB7b,KAAKy3B,UACN9Y,EAAYjc,KAAKmZ,IAGzB2b,EAAoBzc,UAAU2c,iBAAmB,SAAU7b,GACvD,IACI,IAAI5a,EAASjB,KAAKgqB,UAAUnO,EAAO7b,KAAK0B,SACxC1B,KAAKy3B,SAAWvJ,QAAQjtB,GAE5B,MAAO+a,GACHhc,KAAK2e,YAAYtP,MAAM2M,KAGxBwb,GACTnZ,YC3DEsZ,WAAa,EACbC,iBACJ,SAASC,aAAaC,GAClB,IAAIC,EAAKH,cAAcE,GACnBC,GACAA,IAGR,IAAWC,WACPC,aAAc,SAAUF,GACpB,IAAID,EAASH,aAGb,OAFAC,cAAcE,GAAUC,EACxBpc,QAAQ8F,UAAUW,KAAK,WAAc,OAAOyV,aAAaC,KAClDA,GAEXI,eAAgB,SAAUJ,UACfF,cAAcE,KCRzBK,WAA4B,SAAU7b,GAEtC,SAAS6b,EAAWvU,EAAWC,GAC3B,IAAIjhB,EAAQ0Z,EAAOE,KAAKxc,KAAM4jB,EAAWC,IAAS7jB,KAGlD,OAFA4C,EAAMghB,UAAYA,EAClBhhB,EAAMihB,KAAOA,EACNjhB,EAqCX,OA1CAga,YAAkBub,EAAY7b,GAO9B6b,EAAWpd,UAAUsJ,eAAiB,SAAUT,EAAWO,EAAIH,GAK3D,YAJc,IAAVA,IACAA,EAAQ,GAGE,OAAVA,GAAkBA,EAAQ,EACnB1H,EAAOvB,UAAUsJ,eAAe7H,KAAKxc,KAAM4jB,EAAWO,EAAIH,IAGrEJ,EAAUiB,QAAQtiB,KAAKvC,MAIhB4jB,EAAUyB,YAAczB,EAAUyB,UAAY2S,UAAUC,aAAarU,EAAUW,MAAM9E,KAAKmE,EAAW,UAEhHuU,EAAWpd,UAAUqJ,eAAiB,SAAUR,EAAWO,EAAIH,GAO3D,QANc,IAAVA,IACAA,EAAQ,GAKG,OAAVA,GAAkBA,EAAQ,GAAiB,OAAVA,GAAkBhkB,KAAKgkB,MAAQ,EACjE,OAAO1H,EAAOvB,UAAUqJ,eAAe5H,KAAKxc,KAAM4jB,EAAWO,EAAIH,GAKpC,IAA7BJ,EAAUiB,QAAQziB,SAClB41B,UAAUE,eAAe/T,GACzBP,EAAUyB,eAAYnX,IAKvBiqB,GACTlU,aClDEmU,cAA+B,SAAU9b,GAEzC,SAAS8b,IACL,OAAkB,OAAX9b,GAAmBA,EAAOlB,MAAMpb,KAAMqb,YAAcrb,KAuB/D,OAzBA4c,YAAkBwb,EAAe9b,GAIjC8b,EAAcrd,UAAUwJ,MAAQ,SAAUtL,GACtCjZ,KAAKolB,QAAS,EACdplB,KAAKqlB,eAAYnX,EACjB,IACImB,EADAwV,EAAU7kB,KAAK6kB,QAEfnjB,GAAS,EACTwkB,EAAQrB,EAAQziB,OACpB6W,EAASA,GAAU4L,EAAQvZ,QAC3B,GACI,GAAI+D,EAAQ4J,EAAOwL,QAAQxL,EAAO8K,MAAO9K,EAAO+K,OAC5C,cAEGtiB,EAAQwkB,IAAUjN,EAAS4L,EAAQvZ,UAE9C,GADAtL,KAAKolB,QAAS,EACV/V,EAAO,CACP,OAAS3N,EAAQwkB,IAAUjN,EAAS4L,EAAQvZ,UACxC2N,EAAOzD,cAEX,MAAMnG,IAGP+oB,GACTlT,gBCOSmT,KAAqB,IAAID,cAAcD,YC3B9CG,sBAAuC,SAAUhc,GAEjD,SAASgc,EAAsBlX,EAAQmX,EAAW3U,QAC5B,IAAd2U,IACAA,EAAY,QAEE,IAAd3U,IACAA,EAAYyU,MAEhB,IAAIz1B,EAAQ0Z,EAAOE,KAAKxc,OAASA,KAUjC,OATA4C,EAAMwe,OAASA,EACfxe,EAAM21B,UAAYA,EAClB31B,EAAMghB,UAAYA,IACb2B,UAAUgT,IAAcA,EAAY,KACrC31B,EAAM21B,UAAY,GAEjB3U,GAA2C,mBAAvBA,EAAUE,WAC/BlhB,EAAMghB,UAAYyU,MAEfz1B,EA0BX,OA5CAga,YAAkB0b,EAAuBhc,GAqBzCgc,EAAsBpiB,OAAS,SAAUkL,EAAQ4C,EAAOJ,GAOpD,YANc,IAAVI,IACAA,EAAQ,QAEM,IAAdJ,IACAA,EAAYyU,MAET,IAAIC,EAAsBlX,EAAQ4C,EAAOJ,IAGpD0U,EAAsBtN,SAAW,SAAUxD,GACvC,IAAIpG,EAASoG,EAAIpG,OAAQnC,EAAauI,EAAIvI,WAC1C,OAAOjf,KAAKud,IAAI6D,EAAOnQ,UAAUgO,KAGrCqZ,EAAsBvd,UAAUkG,WAAa,SAAUhC,GACnD,IAAI+E,EAAQhkB,KAAKu4B,UACbnX,EAASphB,KAAKohB,OAElB,OADgBphB,KAAK4jB,UACJE,SAASwU,EAAsBtN,SAAUhH,GACtD5C,OAAQA,EAAQnC,WAAYA,KAG7BqZ,GACTnxB,cCUEqxB,oBAAqC,SAAUlc,GAE/C,SAASkc,EAAoB7Z,EAAa0K,GACtC,IAAIzmB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAG9C,OAFA4C,EAAMymB,QAAUA,EAChBzmB,EAAMlB,MAAQ,EACPkB,EAwCX,OA7CAga,YAAkB4b,EAAqBlc,GAOvCkc,EAAoBzd,UAAUmE,MAAQ,SAAUrD,GAC5C,IAAI5a,EACAS,EAAQ1B,KAAK0B,QACjB,IACIT,EAASjB,KAAKqpB,QAAQxN,EAAOna,GAEjC,MAAO2N,GAEH,YADArP,KAAK2e,YAAYtP,MAAMA,GAG3BrP,KAAK6pB,UAAU5oB,EAAQ4a,EAAOna,IAElC82B,EAAoBzd,UAAU8O,UAAY,SAAU5oB,EAAQ4a,EAAOna,GAC/D,IAAI+hB,EAAoBzjB,KAAKyjB,kBACzBA,GACAA,EAAkBjO,cAEtBxV,KAAKud,IAAIvd,KAAKyjB,kBAAoBP,kBAAkBljB,KAAMiB,EAAQ4a,EAAOna,KAE7E82B,EAAoBzd,UAAUqE,UAAY,WACtC,IAAIqE,EAAoBzjB,KAAKyjB,kBACxBA,IAAqBA,EAAkBvH,QACxCI,EAAOvB,UAAUqE,UAAU5C,KAAKxc,OAGxCw4B,EAAoBzd,UAAUkC,aAAe,WACzCjd,KAAKyjB,kBAAoB,MAE7B+U,EAAoBzd,UAAUwF,eAAiB,SAAUF,GACrDrgB,KAAK2Y,OAAO0H,GACZrgB,KAAKyjB,kBAAoB,KACrBzjB,KAAK0e,WACLpC,EAAOvB,UAAUqE,UAAU5C,KAAKxc,OAGxCw4B,EAAoBzd,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GACjGrgB,KAAK2e,YAAYjc,KAAKwd,IAEnBsY,GACTzY,iBCpDE0Y,oBAAqC,SAAUnc,GAE/C,SAASmc,EAAoB9Z,GACzB,OAAOrC,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAQ7C,OAVA4c,YAAkB6b,EAAqBnc,GAIvCmc,EAAoB1d,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GACjGrgB,KAAK2Z,YAET8e,EAAoB1d,UAAUwF,eAAiB,aAGxCkY,GACT1Y,iBCjBE2Y,oBAAqC,SAAUpc,GAE/C,SAASoc,EAAoB/Z,EAAaqL,GACtC,IAAIpnB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAG9C,OAFA4C,EAAMonB,UAAYA,EAClBpnB,EAAMlB,MAAQ,EACPkB,EAuBX,OA5BAga,YAAkB8b,EAAqBpc,GAOvCoc,EAAoB3d,UAAUmE,MAAQ,SAAUrD,GAC5C,IACI5a,EADA0d,EAAc3e,KAAK2e,YAEvB,IACI1d,EAASjB,KAAKgqB,UAAUnO,EAAO7b,KAAK0B,SAExC,MAAOsa,GAEH,YADA2C,EAAYtP,MAAM2M,GAGtBhc,KAAK24B,eAAe9c,EAAO5a,IAE/By3B,EAAoB3d,UAAU4d,eAAiB,SAAU9c,EAAO+c,GAC5D,IAAIja,EAAc3e,KAAK2e,YACnBuP,QAAQ0K,GACRja,EAAYjc,KAAKmZ,GAGjB8C,EAAYhF,YAGb+e,GACTra,YChBEwa,mBAAoC,SAAUvc,GAE9C,SAASuc,EAAmBla,EAAa0E,EAAkByV,EAAUC,GACjE,IAAIn2B,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAM9C,OALA4C,EAAM+b,YAAcA,EACpB/b,EAAMygB,iBAAmBA,EACzBzgB,EAAMk2B,SAAWA,EACjBl2B,EAAMm2B,UAAYA,EAClBn2B,EAAMo2B,WAAY,EACXp2B,EAsDX,OA9DAga,YAAkBic,EAAoBvc,GAUtCuc,EAAmB9d,UAAUmE,MAAQ,SAAUrD,GAC3C7b,KAAKg5B,WAAY,EACjBh5B,KAAKi5B,WAAapd,EACb7b,KAAKk5B,aACFl5B,KAAK84B,SACL94B,KAAKm5B,OAGLn5B,KAAKo5B,SAASvd,KAI1Bgd,EAAmB9d,UAAUoe,KAAO,WAChC,IAAeH,EAANh5B,KAAqBg5B,UAAWC,EAAhCj5B,KAAgDi5B,WACrDD,IACAh5B,KAAK2e,YAAYjc,KAAKu2B,GACtBj5B,KAAKo5B,SAASH,IAElBj5B,KAAKg5B,WAAY,EACjBh5B,KAAKi5B,WAAa,MAEtBJ,EAAmB9d,UAAUqe,SAAW,SAAUvd,GAC9C,IAAI2H,EAAWxjB,KAAKq5B,oBAAoBxd,GACpC2H,GACAxjB,KAAKud,IAAIvd,KAAKk5B,WAAahW,kBAAkBljB,KAAMwjB,KAG3DqV,EAAmB9d,UAAUse,oBAAsB,SAAUxd,GACzD,IACI,OAAO7b,KAAKqjB,iBAAiBxH,GAEjC,MAAOG,GAEH,OADAhc,KAAK2e,YAAYtP,MAAM2M,GAChB,OAGf6c,EAAmB9d,UAAUue,eAAiB,WAC1C,IAAeJ,EAANl5B,KAAsBk5B,WAAYH,EAAlC/4B,KAAiD+4B,UACtDG,GACAA,EAAW1jB,cAEfxV,KAAKk5B,WAAa,KACdH,GACA/4B,KAAKm5B,QAGbN,EAAmB9d,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GAChGrgB,KAAKs5B,kBAETT,EAAmB9d,UAAUwF,eAAiB,WAC1CvgB,KAAKs5B,kBAEFT,GACT9Y,iBC9DEwZ,uBAAwC,SAAUjd,GAElD,SAASid,EAAuB5a,EAAa6E,EAAUI,EAAW4V,EAASC,GACvE,IAAI72B,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAO9C,OANA4C,EAAM4gB,SAAWA,EACjB5gB,EAAMghB,UAAYA,EAClBhhB,EAAM42B,QAAUA,EAChB52B,EAAM62B,SAAWA,EACjB72B,EAAM82B,mBAAoB,EAC1B92B,EAAM+2B,eAAiB,KAChB/2B,EAsCX,OA/CAga,YAAkB2c,EAAwBjd,GAW1Cid,EAAuBxe,UAAUmE,MAAQ,SAAUrD,GAC3C7b,KAAKujB,UACDvjB,KAAKy5B,WACLz5B,KAAK25B,eAAiB9d,EACtB7b,KAAK05B,mBAAoB,IAI7B15B,KAAKud,IAAIvd,KAAKujB,UAAYvjB,KAAK4jB,UAAUE,SAAS4G,eAAc1qB,KAAKwjB,UAAYvE,WAAYjf,QACzFA,KAAKw5B,SACLx5B,KAAK2e,YAAYjc,KAAKmZ,KAIlC0d,EAAuBxe,UAAUqE,UAAY,WACrCpf,KAAK05B,mBACL15B,KAAK2e,YAAYjc,KAAK1C,KAAK25B,gBAC3B35B,KAAK2e,YAAYhF,YAGjB3Z,KAAK2e,YAAYhF,YAGzB4f,EAAuBxe,UAAU2I,cAAgB,WAC7C,IAAIH,EAAYvjB,KAAKujB,UACjBA,IACIvjB,KAAKy5B,UAAYz5B,KAAK05B,oBACtB15B,KAAK2e,YAAYjc,KAAK1C,KAAK25B,gBAC3B35B,KAAK25B,eAAiB,KACtB35B,KAAK05B,mBAAoB,GAE7BnW,EAAU/N,cACVxV,KAAK2Y,OAAO4K,GACZvjB,KAAKujB,UAAY,OAGlBgW,GACTlb,YACF,SAASqM,eAAalD,GACDA,EAAIvI,WACVyE,gBCnHf,IAAIkW,aAA8B,SAAUtd,GAExC,SAASsd,IACL,IAAIh3B,EAAQ0Z,EAAOE,KAAKxc,KAAM,yBAA2BA,KAGzD,OAFA4C,EAAMT,KAAO,eACb8B,OAAOuW,eAAe5X,EAAOg3B,EAAa7e,WACnCnY,EAEX,OAPAga,YAAkBgd,EAActd,GAOzBsd,GACTx2B,OC+DEy2B,sBAAuC,SAAUvd,GAEjD,SAASud,EAAsBlb,EAAamb,EAAiBC,EAASC,EAAgBpW,GAClF,IAAIhhB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAO9C,OANA4C,EAAMk3B,gBAAkBA,EACxBl3B,EAAMm3B,QAAUA,EAChBn3B,EAAMo3B,eAAiBA,EACvBp3B,EAAMghB,UAAYA,EAClBhhB,EAAMqW,OAAS,KACfrW,EAAMq3B,kBACCr3B,EAiCX,OA1CAga,YAAkBid,EAAuBvd,GAWzCud,EAAsBK,gBAAkB,SAAUjb,GAC9C,IAAI+a,EAAiB/a,EAAW+a,eAChC/a,EAAWI,yBACXJ,EAAW1B,IAAI2F,kBAAkBjE,EAAY+a,KAEjDH,EAAsB9e,UAAUkf,gBAAkB,WAC9C,IAAIhhB,EAASjZ,KAAKiZ,OACdA,EAMAjZ,KAAKiZ,OAASA,EAAO6K,SAAS9jB,KAAMA,KAAK+5B,SAGzC/5B,KAAKud,IAAIvd,KAAKiZ,OAASjZ,KAAK4jB,UAAUE,SAAS+V,EAAsBK,gBAAiBl6B,KAAK+5B,QAAS/5B,QAG5G65B,EAAsB9e,UAAUmE,MAAQ,SAAUrD,GACzC7b,KAAK85B,iBACN95B,KAAKi6B,kBAET3d,EAAOvB,UAAUmE,MAAM1C,KAAKxc,KAAM6b,IAGtCge,EAAsB9e,UAAUkC,aAAe,WAC3Cjd,KAAKiZ,OAAS,KACdjZ,KAAK4jB,UAAY,KACjB5jB,KAAKg6B,eAAiB,MAEnBH,GACT9Z,iBC5DEoa,iBAAkC,SAAU7d,GAE5C,SAAS6d,EAAiBxb,GACtB,IAAI/b,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAG9C,OAFA4C,EAAMgB,OAAS,IAAIrC,UACnBod,EAAYjc,KAAKE,EAAMgB,QAChBhB,EAmCX,OAxCAga,YAAkBud,EAAkB7d,GAOpC6d,EAAiBpf,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GAC9FrgB,KAAKo6B,cAETD,EAAiBpf,UAAUuF,YAAc,SAAUjR,EAAOgR,GACtDrgB,KAAKmf,OAAO9P,IAEhB8qB,EAAiBpf,UAAUwF,eAAiB,SAAUF,GAClDrgB,KAAKof,aAET+a,EAAiBpf,UAAUmE,MAAQ,SAAUrD,GACzC7b,KAAK4D,OAAOlB,KAAKmZ,IAErBse,EAAiBpf,UAAUoE,OAAS,SAAUnD,GAC1Chc,KAAK4D,OAAOyL,MAAM2M,GAClBhc,KAAK2e,YAAYtP,MAAM2M,IAE3Bme,EAAiBpf,UAAUqE,UAAY,WACnCpf,KAAK4D,OAAO+V,WACZ3Z,KAAK2e,YAAYhF,YAGrBwgB,EAAiBpf,UAAUkC,aAAe,WACtCjd,KAAK4D,OAAS,MAElBu2B,EAAiBpf,UAAUqf,WAAa,WACpC,IAAIC,EAAar6B,KAAK4D,OAClBy2B,GACAA,EAAW1gB,WAEf,IAAIgF,EAAc3e,KAAK2e,YACnB2b,EAAYt6B,KAAK4D,OAAS,IAAIrC,UAClCod,EAAYjc,KAAK43B,IAEdH,GACTpa,iBChCEwa,sBAAuC,SAAUje,GAEjD,SAASie,EAAsB5b,EAAa6b,EAAYC,GACpD,IAAI73B,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAO9C,OANA4C,EAAM+b,YAAcA,EACpB/b,EAAM43B,WAAaA,EACnB53B,EAAM63B,iBAAmBA,EACzB73B,EAAM83B,SAAW,IAAIn5B,WACrBqB,EAAMsjB,MAAQ,EACdvH,EAAYjc,KAAKE,EAAM83B,QAAQ,IACxB93B,EA2CX,OApDAga,YAAkB2d,EAAuBje,GAWzCie,EAAsBxf,UAAUmE,MAAQ,SAAUrD,GAM9C,IALA,IAAI4e,EAAoBz6B,KAAKy6B,iBAAmB,EAAKz6B,KAAKy6B,iBAAmBz6B,KAAKw6B,WAC9E7b,EAAc3e,KAAK2e,YACnB6b,EAAax6B,KAAKw6B,WAClBE,EAAU16B,KAAK06B,QACfvd,EAAMud,EAAQt4B,OACTsa,EAAI,EAAGA,EAAIS,IAAQnd,KAAKkc,OAAQQ,IACrCge,EAAQhe,GAAGha,KAAKmZ,GAEpB,IAAI8e,EAAI36B,KAAKkmB,MAAQsU,EAAa,EAIlC,GAHIG,GAAK,GAAKA,EAAIF,GAAqB,IAAMz6B,KAAKkc,QAC9Cwe,EAAQpvB,QAAQqO,aAEd3Z,KAAKkmB,MAAQuU,GAAqB,IAAMz6B,KAAKkc,OAAQ,CACvD,IAAI0e,EAAW,IAAIr5B,UACnBm5B,EAAQn4B,KAAKq4B,GACbjc,EAAYjc,KAAKk4B,KAGzBL,EAAsBxf,UAAUoE,OAAS,SAAUnD,GAC/C,IAAI0e,EAAU16B,KAAK06B,QACnB,GAAIA,EACA,KAAOA,EAAQt4B,OAAS,IAAMpC,KAAKkc,QAC/Bwe,EAAQpvB,QAAQ+D,MAAM2M,GAG9Bhc,KAAK2e,YAAYtP,MAAM2M,IAE3Bue,EAAsBxf,UAAUqE,UAAY,WACxC,IAAIsb,EAAU16B,KAAK06B,QACnB,GAAIA,EACA,KAAOA,EAAQt4B,OAAS,IAAMpC,KAAKkc,QAC/Bwe,EAAQpvB,QAAQqO,WAGxB3Z,KAAK2e,YAAYhF,YAErB4gB,EAAsBxf,UAAUkC,aAAe,WAC3Cjd,KAAKkmB,MAAQ,EACblmB,KAAK06B,QAAU,MAEZH,GACTlc,YCvFEwc,eAAgC,SAAUve,GAE1C,SAASue,IACL,IAAIj4B,EAAmB,OAAX0Z,GAAmBA,EAAOlB,MAAMpb,KAAMqb,YAAcrb,KAEhE,OADA4C,EAAMk4B,sBAAwB,EACvBl4B,EAaX,OAjBAga,YAAkBie,EAAgBve,GAMlCue,EAAe9f,UAAUrY,KAAO,SAAUmZ,GACtC7b,KAAK86B,wBACLxe,EAAOvB,UAAUrY,KAAK8Z,KAAKxc,KAAM6b,IAErC5X,OAAO8tB,eAAe8I,EAAe9f,UAAW,wBAC5CzK,IAAK,WACD,OAAOtQ,KAAK86B,uBAEhB9I,YAAY,EACZC,cAAc,IAEX4I,GACTt5B,WAMEw5B,qBAAsC,SAAUze,GAEhD,SAASye,EAAqBpc,EAAaqc,EAAgBC,EAAwBC,EAAetX,GAC9F,IAAIhhB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAC9C4C,EAAM+b,YAAcA,EACpB/b,EAAMo4B,eAAiBA,EACvBp4B,EAAMq4B,uBAAyBA,EAC/Br4B,EAAMs4B,cAAgBA,EACtBt4B,EAAMghB,UAAYA,EAClBhhB,EAAM83B,WACN,IAAI92B,EAAShB,EAAMw3B,aACnB,GAA+B,OAA3Ba,GAAmCA,GAA0B,EAAG,CAChE,IAAInU,GAAe7H,WAAYrc,EAAOgB,OAAQA,EAAQ4b,QAAS,MAC3DuH,GAAkBiU,eAAgBA,EAAgBC,uBAAwBA,EAAwBhc,WAAYrc,EAAOghB,UAAWA,GACpIhhB,EAAM2a,IAAIqG,EAAUE,SAASqX,oBAAqBH,EAAgBlU,IAClElkB,EAAM2a,IAAIqG,EAAUE,SAASsX,uBAAwBH,EAAwBlU,QAE5E,CACD,IAAIJ,GAAsB1H,WAAYrc,EAAOgB,OAAQA,EAAQo3B,eAAgBA,GAC7Ep4B,EAAM2a,IAAIqG,EAAUE,SAASuX,2BAA4BL,EAAgBrU,IAE7E,OAAO/jB,EA4CX,OAhEAga,YAAkBme,EAAsBze,GAsBxCye,EAAqBhgB,UAAUmE,MAAQ,SAAUrD,GAG7C,IAFA,IAAI6e,EAAU16B,KAAK06B,QACfvd,EAAMud,EAAQt4B,OACTsa,EAAI,EAAGA,EAAIS,EAAKT,IAAK,CAC1B,IAAIke,EAAWF,EAAQhe,GAClBke,EAAS1e,SACV0e,EAASl4B,KAAKmZ,GACV+e,EAASU,sBAAwBt7B,KAAKk7B,eACtCl7B,KAAKu7B,YAAYX,MAKjCG,EAAqBhgB,UAAUoE,OAAS,SAAUnD,GAE9C,IADA,IAAI0e,EAAU16B,KAAK06B,QACZA,EAAQt4B,OAAS,GACpBs4B,EAAQpvB,QAAQ+D,MAAM2M,GAE1Bhc,KAAK2e,YAAYtP,MAAM2M,IAE3B+e,EAAqBhgB,UAAUqE,UAAY,WAEvC,IADA,IAAIsb,EAAU16B,KAAK06B,QACZA,EAAQt4B,OAAS,GAAG,CACvB,IAAIo5B,EAAWd,EAAQpvB,QAClBkwB,EAAStf,QACVsf,EAAS7hB,WAGjB3Z,KAAK2e,YAAYhF,YAErBohB,EAAqBhgB,UAAUqf,WAAa,WACxC,IAAIx2B,EAAS,IAAIi3B,eAIjB,OAHA76B,KAAK06B,QAAQn4B,KAAKqB,GACA5D,KAAK2e,YACXjc,KAAKkB,GACVA,GAEXm3B,EAAqBhgB,UAAUwgB,YAAc,SAAU33B,GACnDA,EAAO+V,WACP,IAAI+gB,EAAU16B,KAAK06B,QACnBA,EAAQ5c,OAAO4c,EAAQ7c,QAAQja,GAAS,IAErCm3B,GACT1c,YACF,SAASgd,2BAA2BtX,GAChC,IAAI9E,EAAa8E,EAAM9E,WAAY+b,EAAiBjX,EAAMiX,eAAgBp3B,EAASmgB,EAAMngB,OACrFA,GACAqb,EAAWsc,YAAY33B,GAE3BmgB,EAAMngB,OAASqb,EAAWmb,aAC1Bp6B,KAAK8jB,SAASC,EAAOiX,GAEzB,SAASI,uBAAuBrX,GAC5B,IAAIiX,EAAiBjX,EAAMiX,eAAgB/b,EAAa8E,EAAM9E,WAAY2E,EAAYG,EAAMH,UAAWqX,EAAyBlX,EAAMkX,uBAGlIzb,GAAYvG,OADHjZ,KACmBuV,aAAc,MAC1CkmB,GAAkBxc,WAAYA,EAAYrb,OAHjCqb,EAAWmb,aAGsC5a,QAASA,GACvEA,EAAQjK,aAAeqO,EAAUE,SAASqX,oBAAqBH,EAAgBS,GAHlEz7B,KAINud,IAAIiC,EAAQjK,cAJNvV,KAKN8jB,SAASC,EAAOkX,GAE3B,SAASE,oBAAoBpX,GACzB,IAAI9E,EAAa8E,EAAM9E,WAAYrb,EAASmgB,EAAMngB,OAAQ4b,EAAUuE,EAAMvE,QACtEA,GAAWA,EAAQvG,QAAUuG,EAAQjK,cACrCiK,EAAQvG,OAAON,OAAO6G,EAAQjK,cAElC0J,EAAWsc,YAAY33B,GC1F3B,IAAI83B,uBAAwC,SAAUpf,GAElD,SAASof,EAAuB/c,EAAa+I,EAAUC,GACnD,IAAI/kB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAK9C,OAJA4C,EAAM8kB,SAAWA,EACjB9kB,EAAM+kB,gBAAkBA,EACxB/kB,EAAM4jB,YACN5jB,EAAM2a,IAAI3a,EAAM+4B,iBAAmBzY,kBAAkBtgB,EAAO8kB,EAAUA,IAC/D9kB,EAmGX,OA1GAga,YAAkB8e,EAAwBpf,GAS1Cof,EAAuB3gB,UAAUmE,MAAQ,SAAUrD,GAC/C,IAAI2K,EAAWxmB,KAAKwmB,SACpB,GAAIA,EAEA,IADA,IAAIrJ,EAAMqJ,EAASpkB,OACVsa,EAAI,EAAGA,EAAIS,EAAKT,IACrB8J,EAAS9J,GAAG9Y,OAAOlB,KAAKmZ,IAIpC6f,EAAuB3gB,UAAUoE,OAAS,SAAUnD,GAChD,IAAIwK,EAAWxmB,KAAKwmB,SAEpB,GADAxmB,KAAKwmB,SAAW,KACZA,EAGA,IAFA,IAAIrJ,EAAMqJ,EAASpkB,OACfV,GAAS,IACJA,EAAQyb,GAAK,CAClB,IAAIgK,EAAYX,EAAS9kB,GACzBylB,EAAUvjB,OAAOyL,MAAM2M,GACvBmL,EAAU5R,aAAaC,cAG/B8G,EAAOvB,UAAUoE,OAAO3C,KAAKxc,KAAMgc,IAEvC0f,EAAuB3gB,UAAUqE,UAAY,WACzC,IAAIoH,EAAWxmB,KAAKwmB,SAEpB,GADAxmB,KAAKwmB,SAAW,KACZA,EAGA,IAFA,IAAIrJ,EAAMqJ,EAASpkB,OACfV,GAAS,IACJA,EAAQyb,GAAK,CAClB,IAAIkK,EAAYb,EAAS9kB,GACzB2lB,EAAUzjB,OAAO+V,WACjB0N,EAAU9R,aAAaC,cAG/B8G,EAAOvB,UAAUqE,UAAU5C,KAAKxc,OAGpC07B,EAAuB3gB,UAAUkC,aAAe,WAC5C,IAAIuJ,EAAWxmB,KAAKwmB,SAEpB,GADAxmB,KAAKwmB,SAAW,KACZA,EAGA,IAFA,IAAIrJ,EAAMqJ,EAASpkB,OACfV,GAAS,IACJA,EAAQyb,GAAK,CAClB,IAAIye,EAAYpV,EAAS9kB,GACzBk6B,EAAUh4B,OAAO4R,cACjBomB,EAAUrmB,aAAaC,gBAInCkmB,EAAuB3gB,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GACpG,GAAIJ,IAAejgB,KAAK0nB,SAAU,CAC9B,IACI/B,EAAkBrK,SADAtb,KAAK2nB,gBACLrM,CAA0B4E,GAChD,GAAIyF,IAAoB1K,YACpB,OAAOjb,KAAKqP,MAAM4L,YAAYC,GAG9B,IAAI0f,EAAW,IAAIr5B,UACfgU,EAAe,IAAIsH,aACnBgf,GAAcj4B,OAAQg3B,EAAUrlB,aAAcA,GAClDvV,KAAKwmB,SAASjkB,KAAKs5B,GACnB,IAAIpY,EAAoBP,kBAAkBljB,KAAM2lB,EAAiBkW,GAC7DpY,EAAkBvH,OAClBlc,KAAKu7B,YAAYv7B,KAAKwmB,SAASpkB,OAAS,IAGxCqhB,EAAkBjE,QAAUqc,EAC5BtmB,EAAagI,IAAIkG,IAErBzjB,KAAK2e,YAAYjc,KAAKk4B,QAI1B56B,KAAKu7B,YAAYv7B,KAAKwmB,SAAS3I,QAAQoC,KAG/Cyb,EAAuB3gB,UAAUuF,YAAc,SAAUtE,GACrDhc,KAAKqP,MAAM2M,IAEf0f,EAAuB3gB,UAAUwF,eAAiB,SAAUub,GACpDA,IAAU97B,KAAK27B,kBACf37B,KAAKu7B,YAAYv7B,KAAKwmB,SAAS3I,QAAQie,EAAMtc,WAGrDkc,EAAuB3gB,UAAUwgB,YAAc,SAAU75B,GACrD,IAAe,IAAXA,EAAJ,CAGA,IAAI8kB,EAAWxmB,KAAKwmB,SAChBhH,EAAUgH,EAAS9kB,GACnBkC,EAAS4b,EAAQ5b,OAAQ2R,EAAeiK,EAAQjK,aACpDiR,EAAS1I,OAAOpc,EAAO,GACvBkC,EAAO+V,WACPpE,EAAaC,gBAEVkmB,GACT3b,iBC/GEoa,mBAAkC,SAAU7d,GAE5C,SAAS6d,EAAiBxb,EAAagJ,GACnC,IAAI/kB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAI9C,OAHA4C,EAAM+b,YAAcA,EACpB/b,EAAM+kB,gBAAkBA,EACxB/kB,EAAMw3B,aACCx3B,EAqDX,OA3DAga,YAAkBud,EAAkB7d,GAQpC6d,EAAiBpf,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GAC9FrgB,KAAKo6B,WAAW/Z,IAEpB8Z,EAAiBpf,UAAUuF,YAAc,SAAUjR,EAAOgR,GACtDrgB,KAAKmf,OAAO9P,IAEhB8qB,EAAiBpf,UAAUwF,eAAiB,SAAUF,GAClDrgB,KAAKo6B,WAAW/Z,IAEpB8Z,EAAiBpf,UAAUmE,MAAQ,SAAUrD,GACzC7b,KAAK4D,OAAOlB,KAAKmZ,IAErBse,EAAiBpf,UAAUoE,OAAS,SAAUnD,GAC1Chc,KAAK4D,OAAOyL,MAAM2M,GAClBhc,KAAK2e,YAAYtP,MAAM2M,GACvBhc,KAAK+7B,kCAET5B,EAAiBpf,UAAUqE,UAAY,WACnCpf,KAAK4D,OAAO+V,WACZ3Z,KAAK2e,YAAYhF,WACjB3Z,KAAK+7B,kCAET5B,EAAiBpf,UAAUghB,+BAAiC,WACpD/7B,KAAKg8B,qBACLh8B,KAAKg8B,oBAAoBxmB,eAGjC2kB,EAAiBpf,UAAUqf,WAAa,SAAU/Z,QAC7B,IAAbA,IACAA,EAAW,MAEXA,IACArgB,KAAK2Y,OAAO0H,GACZA,EAAS7K,eAEb,IAAI6kB,EAAar6B,KAAK4D,OAClBy2B,GACAA,EAAW1gB,WAEf,IAAI/V,EAAS5D,KAAK4D,OAAS,IAAIrC,UAC/BvB,KAAK2e,YAAYjc,KAAKkB,GACtB,IAAI+hB,EAAkBrK,SAAStb,KAAK2nB,gBAAdrM,GACtB,GAAIqK,IAAoB1K,YAAa,CACjC,IAAIe,EAAMf,YAAYC,EACtBlb,KAAK2e,YAAYtP,MAAM2M,GACvBhc,KAAK4D,OAAOyL,MAAM2M,QAGlBhc,KAAKud,IAAIvd,KAAKg8B,oBAAsB9Y,kBAAkBljB,KAAM2lB,KAG7DwU,GACTpa,iBCrDEkc,yBAA0C,SAAU3f,GAEpD,SAAS2f,EAAyBtd,EAAa+J,EAAaW,GACxD,IAAIzmB,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAC9C4C,EAAM8lB,YAAcA,EACpB9lB,EAAMymB,QAAUA,EAChBzmB,EAAM+lB,aACN,IAAIxL,EAAMuL,EAAYtmB,OACtBQ,EAAM6lB,OAAS,IAAI/N,MAAMyC,GACzB,IAAK,IAAIT,EAAI,EAAGA,EAAIS,EAAKT,IACrB9Z,EAAM+lB,UAAUpmB,KAAKma,GAEzB,IAASA,EAAI,EAAGA,EAAIS,EAAKT,IAAK,CAC1B,IAAIiE,EAAa+H,EAAYhM,GAC7B9Z,EAAM2a,IAAI2F,kBAAkBtgB,EAAO+d,EAAYA,EAAYjE,IAE/D,OAAO9Z,EAqCX,OApDAga,YAAkBqf,EAA0B3f,GAiB5C2f,EAAyBlhB,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GACtGrgB,KAAKyoB,OAAOtI,GAAcD,EAC1B,IAAIyI,EAAY3oB,KAAK2oB,UACrB,GAAIA,EAAUvmB,OAAS,EAAG,CACtB,IAAI85B,EAAQvT,EAAU9K,QAAQsC,IACf,IAAX+b,GACAvT,EAAU7K,OAAOoe,EAAO,KAIpCD,EAAyBlhB,UAAUwF,eAAiB,aAGpD0b,EAAyBlhB,UAAUmE,MAAQ,SAAUrD,GACjD,GAA8B,IAA1B7b,KAAK2oB,UAAUvmB,OAAc,CAC7B,IAAI8mB,GAAQrN,GAAOyB,OAAOtd,KAAKyoB,QAC3BzoB,KAAKqpB,QACLrpB,KAAKm8B,YAAYjT,GAGjBlpB,KAAK2e,YAAYjc,KAAKwmB,KAIlC+S,EAAyBlhB,UAAUohB,YAAc,SAAUjT,GACvD,IAAIjoB,EACJ,IACIA,EAASjB,KAAKqpB,QAAQjO,MAAMpb,KAAMkpB,GAEtC,MAAOlN,GAEH,YADAhc,KAAK2e,YAAYtP,MAAM2M,GAG3Bhc,KAAK2e,YAAYjc,KAAKzB,IAEnBg7B,GACTlc,iBC5DEqc,cAA+B,SAAU9f,GAEzC,SAAS8f,EAAczd,EAAa6J,EAAgBC,QACjC,IAAXA,IACAA,EAASxkB,OAAOiS,OAAO,OAE3B,IAAItT,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAK9C,OAJA4C,EAAMy5B,aACNz5B,EAAMwiB,OAAS,EACfxiB,EAAM4lB,eAA4C,mBAAnBA,EAAiCA,EAAiB,KACjF5lB,EAAM6lB,OAASA,EACR7lB,EAsFX,OAhGAga,YAAkBwf,EAAe9f,GAYjC8f,EAAcrhB,UAAUmE,MAAQ,SAAUrD,GACtC,IAAIwgB,EAAYr8B,KAAKq8B,UACjBlgB,QAAQN,GACRwgB,EAAU95B,KAAK,IAAI+5B,oBAAoBzgB,IAEA,mBAA3BA,EAAM4G,UAClB4Z,EAAU95B,KAAK,IAAIg6B,eAAe1gB,EAAM4G,cAGxC4Z,EAAU95B,KAAK,IAAIi6B,kBAAkBx8B,KAAK2e,YAAa3e,KAAM6b,KAGrEugB,EAAcrhB,UAAUqE,UAAY,WAChC,IAAIid,EAAYr8B,KAAKq8B,UACjBlf,EAAMkf,EAAUj6B,OACpB,GAAY,IAAR+a,EAAJ,CAIAnd,KAAKolB,OAASjI,EACd,IAAK,IAAIT,EAAI,EAAGA,EAAIS,EAAKT,IAAK,CAC1B,IAAI4F,EAAW+Z,EAAU3f,GACrB4F,EAASma,kBACTz8B,KAAKud,IAAI+E,EAASrR,UAAUqR,EAAU5F,IAGtC1c,KAAKolB,eAVTplB,KAAK2e,YAAYhF,YAczByiB,EAAcrhB,UAAU2hB,eAAiB,WACrC18B,KAAKolB,SACe,IAAhBplB,KAAKolB,QACLplB,KAAK2e,YAAYhF,YAGzByiB,EAAcrhB,UAAU4hB,eAAiB,WAKrC,IAJA,IAAIN,EAAYr8B,KAAKq8B,UACjBlf,EAAMkf,EAAUj6B,OAChBuc,EAAc3e,KAAK2e,YAEdjC,EAAI,EAAGA,EAAIS,EAAKT,IAAK,CAE1B,GAAiC,mBAD7B4F,EAAW+Z,EAAU3f,IACL4G,WAA4BhB,EAASgB,WACrD,OAGR,IAAIsZ,GAAiB,EACjB1T,KACJ,IAASxM,EAAI,EAAGA,EAAIS,EAAKT,IAAK,CAC1B,IAAI4F,EACArhB,GADAqhB,EAAW+Z,EAAU3f,IACHha,OAMtB,GAHI4f,EAASqH,iBACTiT,GAAiB,GAEjB37B,EAAOmF,KAEP,YADAuY,EAAYhF,WAGhBuP,EAAK3mB,KAAKtB,EAAO4a,OAEjB7b,KAAKwoB,eACLxoB,KAAK68B,mBAAmB3T,GAGxBvK,EAAYjc,KAAKwmB,GAEjB0T,GACAje,EAAYhF,YAGpByiB,EAAcrhB,UAAU8hB,mBAAqB,SAAU3T,GACnD,IAAIjoB,EACJ,IACIA,EAASjB,KAAKwoB,eAAepN,MAAMpb,KAAMkpB,GAE7C,MAAOlN,GAEH,YADAhc,KAAK2e,YAAYtP,MAAM2M,GAG3Bhc,KAAK2e,YAAYjc,KAAKzB,IAEnBm7B,GACT/d,YAEEke,eAAgC,WAChC,SAASA,EAAeja,GACpBtiB,KAAKsiB,SAAWA,EAChBtiB,KAAK88B,WAAaxa,EAAS5f,OAc/B,OAZA65B,EAAexhB,UAAUuI,SAAW,WAChC,OAAO,GAEXiZ,EAAexhB,UAAUrY,KAAO,WAC5B,IAAIzB,EAASjB,KAAK88B,WAElB,OADA98B,KAAK88B,WAAa98B,KAAKsiB,SAAS5f,OACzBzB,GAEXs7B,EAAexhB,UAAU4O,aAAe,WACpC,IAAImT,EAAa98B,KAAK88B,WACtB,OAAOA,GAAcA,EAAW12B,MAE7Bm2B,KAEPD,oBAAqC,WACrC,SAASA,EAAoBra,GACzBjiB,KAAKiiB,MAAQA,EACbjiB,KAAK0B,MAAQ,EACb1B,KAAKoC,OAAS,EACdpC,KAAKoC,OAAS6f,EAAM7f,OAgBxB,OAdAk6B,EAAoBvhB,UAAU0H,UAAmB,WAC7C,OAAOziB,MAEXs8B,EAAoBvhB,UAAUrY,KAAO,SAAUmZ,GAC3C,IAAIa,EAAI1c,KAAK0B,QACTugB,EAAQjiB,KAAKiiB,MACjB,OAAOvF,EAAI1c,KAAKoC,QAAWyZ,MAAOoG,EAAMvF,GAAItW,MAAM,IAAYyV,MAAO,KAAMzV,MAAM,IAErFk2B,EAAoBvhB,UAAUuI,SAAW,WACrC,OAAOtjB,KAAKiiB,MAAM7f,OAASpC,KAAK0B,OAEpC46B,EAAoBvhB,UAAU4O,aAAe,WACzC,OAAO3pB,KAAKiiB,MAAM7f,SAAWpC,KAAK0B,OAE/B46B,KAOPE,kBAAmC,SAAUlgB,GAE7C,SAASkgB,EAAkB7d,EAAaZ,EAAQ4C,GAC5C,IAAI/d,EAAQ0Z,EAAOE,KAAKxc,KAAM2e,IAAgB3e,KAM9C,OALA4C,EAAMmb,OAASA,EACfnb,EAAM+d,WAAaA,EACnB/d,EAAM65B,mBAAoB,EAC1B75B,EAAMgjB,UACNhjB,EAAMm6B,YAAa,EACZn6B,EAsCX,OA9CAga,YAAkB4f,EAAmBlgB,GAUrCkgB,EAAkBzhB,UAAU0H,UAAmB,WAC3C,OAAOziB,MAIXw8B,EAAkBzhB,UAAUrY,KAAO,WAC/B,IAAIkjB,EAAS5lB,KAAK4lB,OAClB,OAAsB,IAAlBA,EAAOxjB,QAAgBpC,KAAK+8B,YACnBlhB,MAAO,KAAMzV,MAAM,IAGnByV,MAAO+J,EAAOta,QAASlF,MAAM,IAG9Co2B,EAAkBzhB,UAAUuI,SAAW,WACnC,OAAOtjB,KAAK4lB,OAAOxjB,OAAS,GAEhCo6B,EAAkBzhB,UAAU4O,aAAe,WACvC,OAA8B,IAAvB3pB,KAAK4lB,OAAOxjB,QAAgBpC,KAAK+8B,YAE5CP,EAAkBzhB,UAAUwF,eAAiB,WACrCvgB,KAAK4lB,OAAOxjB,OAAS,GACrBpC,KAAK+8B,YAAa,EAClB/8B,KAAK+d,OAAO2e,kBAGZ18B,KAAK2e,YAAYhF,YAGzB6iB,EAAkBzhB,UAAUiF,WAAa,SAAUC,EAAYC,EAAYC,EAAYC,EAAYC,GAC/FrgB,KAAK4lB,OAAOrjB,KAAK2d,GACjBlgB,KAAK+d,OAAO4e,kBAEhBH,EAAkBzhB,UAAU9J,UAAY,SAAU4K,EAAOna,GACrD,OAAOwhB,kBAAkBljB,KAAMA,KAAK2gB,WAAY3gB,KAAM0B,IAEnD86B,GACTzc,4CChQF,OALO,0CCeH,WACiC1c,EACtB25B,EACAxxB,GAFsBxL,gBAAAqD,EACtBrD,iBAAAg9B,EACAh9B,oBAAAwL,EANHxL,qBAA0B,YA6BtC,OApBIi9B,sBAAA,SAAU/8B,GAAV,WACI,OAAKyD,kBAAkB3D,KAAKqD,aAGvBrD,KAAKk9B,iBACNl9B,KAAKk9B,gBAAiB,EAClBh9B,GACAF,KAAKwL,eAAe2xB,WAAWj9B,GAEnCF,KAAKo9B,MAAQp9B,KAAKg9B,YAAYK,YAAYzb,KACtCuN,SAAS,WAAM,OAAAvsB,EAAKs6B,gBAAiB,KACzCl9B,KAAKo9B,MAAMnsB,aAERjR,KAAKo9B,OAXDh2B,GAAG,IAAIk2B,kBActBL,6BAAA,WACI,OAAOj9B,KAAKk9B,gBA5BPD,cADZ77B,aAOQ0C,UAAAC,OAAOC,uFAAiCC,QAAAA,+CACrBsM,oBAAAA,2DACGtQ,uBAAAA,mCARlBg9B,wCCRb,aAYIj9B,aAA6B,IAAI8E,mBAKrC,OAHIy4B,oBAAA,WACIv9B,KAAKw9B,QAAQ5kB,QANjBrR,YADCC,sEAIDD,YADCG,gEACQ5C,cAAAA,uDAPAy4B,0vBAAAA,6CCSN,cAAoC,OAA9BE,cAdZC,WACG91B,SAAU,mBACVzD,SAAU,wYAYDs5B,uCCbb,aAQIz9B,cAAmB,MACvB,OADIuH,YADCC,yEADQm2B,u6BAAAA,MCWAC,qBAA4CC,aAAaC,sCAgB/D,oBAyBP,SAzBaC,EACFA,UAAP,WACI,OACIC,SAAUC,EACVC,WACIjB,eACA1sB,mBACA9O,6BACAkK,uBACAyC,qBACAnG,gBACAhI,sBACA8V,kBACArS,cACAmL,cACA3K,oBAIL65B,WAAP,WACI,OACIC,SAAUC,EACVC,eAtBCH,gBAdZI,UACGC,SAAUC,aAAcT,sBACxBU,cACIr5B,iBACAmL,qBACAutB,sBACAJ,uBACAE,6BAEJc,iBAAkBnuB,sBAClBouB,SACIv5B,qBAGK84B"}